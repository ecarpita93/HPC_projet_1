        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/externals/Eigen/src/Core/CwiseBinaryOp.h
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// This file is part of Eigen, a lightweight C++ template library
        -:    2:// for linear algebra.
        -:    3://
        -:    4:// Copyright (C) 2008-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
        -:    5:// Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
        -:    6://
        -:    7:// This Source Code Form is subject to the terms of the Mozilla
        -:    8:// Public License v. 2.0. If a copy of the MPL was not distributed
        -:    9:// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   10:
        -:   11:#ifndef EIGEN_CWISE_BINARY_OP_H
        -:   12:#define EIGEN_CWISE_BINARY_OP_H
        -:   13:
        -:   14:namespace Eigen {
        -:   15:
        -:   16:namespace internal {
        -:   17:template<typename BinaryOp, typename Lhs, typename Rhs>
        -:   18:struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
        -:   19:{
        -:   20:  // we must not inherit from traits<Lhs> since it has
        -:   21:  // the potential to cause problems with MSVC
        -:   22:  typedef typename remove_all<Lhs>::type Ancestor;
        -:   23:  typedef typename traits<Ancestor>::XprKind XprKind;
        -:   24:  enum {
        -:   25:    RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,
        -:   26:    ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,
        -:   27:    MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,
        -:   28:    MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime
        -:   29:  };
        -:   30:
        -:   31:  // even though we require Lhs and Rhs to have the same scalar type (see CwiseBinaryOp constructor),
        -:   32:  // we still want to handle the case when the result type is different.
        -:   33:  typedef typename result_of<
        -:   34:                     BinaryOp(
        -:   35:                       const typename Lhs::Scalar&,
        -:   36:                       const typename Rhs::Scalar&
        -:   37:                     )
        -:   38:                   >::type Scalar;
        -:   39:  typedef typename cwise_promote_storage_type<typename traits<Lhs>::StorageKind,
        -:   40:                                              typename traits<Rhs>::StorageKind,
        -:   41:                                              BinaryOp>::ret StorageKind;
        -:   42:  typedef typename promote_index_type<typename traits<Lhs>::StorageIndex,
        -:   43:                                      typename traits<Rhs>::StorageIndex>::type StorageIndex;
        -:   44:  typedef typename Lhs::Nested LhsNested;
        -:   45:  typedef typename Rhs::Nested RhsNested;
        -:   46:  typedef typename remove_reference<LhsNested>::type _LhsNested;
        -:   47:  typedef typename remove_reference<RhsNested>::type _RhsNested;
        -:   48:  enum {
        -:   49:    Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,typename traits<Rhs>::StorageKind,_LhsNested::Flags & RowMajorBit,_RhsNested::Flags & RowMajorBit>::value
        -:   50:  };
        -:   51:};
        -:   52:} // end namespace internal
        -:   53:
        -:   54:template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
        -:   55:class CwiseBinaryOpImpl;
        -:   56:
        -:   57:/** \class CwiseBinaryOp
        -:   58:  * \ingroup Core_Module
        -:   59:  *
        -:   60:  * \brief Generic expression where a coefficient-wise binary operator is applied to two expressions
        -:   61:  *
        -:   62:  * \tparam BinaryOp template functor implementing the operator
        -:   63:  * \tparam LhsType the type of the left-hand side
        -:   64:  * \tparam RhsType the type of the right-hand side
        -:   65:  *
        -:   66:  * This class represents an expression  where a coefficient-wise binary operator is applied to two expressions.
        -:   67:  * It is the return type of binary operators, by which we mean only those binary operators where
        -:   68:  * both the left-hand side and the right-hand side are Eigen expressions.
        -:   69:  * For example, the return type of matrix1+matrix2 is a CwiseBinaryOp.
        -:   70:  *
        -:   71:  * Most of the time, this is the only way that it is used, so you typically don't have to name
        -:   72:  * CwiseBinaryOp types explicitly.
        -:   73:  *
        -:   74:  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
        -:   75:  */
        -:   76:template<typename BinaryOp, typename LhsType, typename RhsType>
    4536*:   77:class CwiseBinaryOp : 
    %%%%%:   77-block  0
    %%%%%:   77-block  1
    %%%%%:   77-block  2
     1503:   77-block  3
     1503:   77-block  4
        -:   78:  public CwiseBinaryOpImpl<
        -:   79:          BinaryOp, LhsType, RhsType,
        -:   80:          typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKind,
        -:   81:                                                        typename internal::traits<RhsType>::StorageKind,
        -:   82:                                                        BinaryOp>::ret>,
        -:   83:  internal::no_assignment_operator
        -:   84:{
        -:   85:  public:
        -:   86:    
        -:   87:    typedef typename internal::remove_all<BinaryOp>::type Functor;
        -:   88:    typedef typename internal::remove_all<LhsType>::type Lhs;
        -:   89:    typedef typename internal::remove_all<RhsType>::type Rhs;
        -:   90:
        -:   91:    typedef typename CwiseBinaryOpImpl<
        -:   92:        BinaryOp, LhsType, RhsType,
        -:   93:        typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKind,
        -:   94:                                                      typename internal::traits<Rhs>::StorageKind,
        -:   95:                                                      BinaryOp>::ret>::Base Base;
        -:   96:    EIGEN_GENERIC_PUBLIC_INTERFACE(CwiseBinaryOp)
        -:   97:
        -:   98:    typedef typename internal::ref_selector<LhsType>::type LhsNested;
        -:   99:    typedef typename internal::ref_selector<RhsType>::type RhsNested;
        -:  100:    typedef typename internal::remove_reference<LhsNested>::type _LhsNested;
        -:  101:    typedef typename internal::remove_reference<RhsNested>::type _RhsNested;
        -:  102:
        -:  103:    EIGEN_DEVICE_FUNC
   70134*:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
   70134*:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
   70134*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
   70134*:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5BlockIKNS4_IKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELi1ELin1ELb1EEELi1ELin1ELb0EEEKNS_9TransposeIKNS4_IKNS5_IKNS6_IfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb0EEEEEEC2ERSG_RSR_RKS3_:
    30240:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    30240:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    30240:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
   30240*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    30240:  110-block  0
    %%%%%:  110-block  1
    30240:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS4_IKNS_5BlockIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb0EEEEEEEKNS5_INS5_INS6_IfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEELin1ELi1ELb0EEEEC2ERSE_RSI_RKS3_:
    #####:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    #####:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    %%%%%:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    #####:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    %%%%%:  110-block  0
    %%%%%:  110-block  1
        -:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEEEKNS_5BlockIKNSC_IKNS_3MapIKNS7_IfLin1ELin1ELi0ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELin1ELi1ELb1EEELin1ELi1ELb0EEEEC2ERSB_RSN_RKS3_:
    35328:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    35328:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    35328:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
   35328*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    35328:  110-block  0
    35328:  110-block  1
    35328:  111:    }
    35328:  111-block  0
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIddEEKNS_12SparseMatrixIdLi0EiEES6_EC2ERS6_S8_RKS3_:
    #####:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    #####:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    %%%%%:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    #####:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    %%%%%:  110-block  0
    %%%%%:  110-block  1
    %%%%%:  110-block  2
    #####:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi1ELin1ELi1ELi1ELin1EEEEEKNS_9TransposeIKNS_5BlockIKNSD_IKNSD_INS7_IfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1EEELin1ELi1ELb0EEEEEEC2ERSB_RSM_RKS3_:
     1503:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
     1503:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
     1503:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    1503*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
     1503:  110-block  0
    %%%%%:  110-block  1
     1503:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEELin1ELi1ELb0EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS5_IfLin1ELi1ELi0ELin1ELi1EEEEEEC2ERSB_RSI_RKS3_:
     1530:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
     1530:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
     1530:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    1530*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
     1530:  110-block  0
     1530:  110-block  1
     1530:  111:    }
     1530:  111-block  0
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEEEKNS_5BlockIKNS7_IfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb0EEEEC2ERSB_RSG_RKS3_:
    #####:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    #####:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    %%%%%:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    #####:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    %%%%%:  110-block  0
    %%%%%:  110-block  1
    #####:  111:    }
    %%%%%:  111-block  0
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEEEKNS_5BlockINSC_INS7_IfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEEEC2ERSB_RSG_RKS3_:
     1530:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
     1530:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
     1530:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    1530*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
     1530:  110-block  0
     1530:  110-block  1
     1530:  111:    }
     1530:  111-block  0
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_5BlockIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES7_EEEC2ERS9_RSE_RKS3_:
    #####:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
    #####:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
    %%%%%:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
    #####:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
    %%%%%:  110-block  0
    %%%%%:  110-block  1
    %%%%%:  110-block  2
    #####:  111:    }
------------------
_ZN5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC2ERS6_RSB_RKS3_:
        3:  104:    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
        3:  105:      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
        3:  105-block  0
        -:  106:    {
        -:  107:      EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar);
        -:  108:      // require the sizes to match
        -:  109:      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
       3*:  110:      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
        3:  110-block  0
        3:  110-block  1
    %%%%%:  110-block  2
        3:  111:    }
------------------
        -:  112:
        -:  113:    EIGEN_DEVICE_FUNC
  523056*:  114:    EIGEN_STRONG_INLINE Index rows() const {
        -:  115:      // return the fixed size type if available to enable compile time optimizations
        -:  116:      if (internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic)
  429303*:  117:        return m_rhs.rows();
    35328:  117-block  0
    %%%%%:  117-block  1
    %%%%%:  117-block  2
    %%%%%:  117-block  3
    %%%%%:  117-block  4
   392445:  117-block  5
    %%%%%:  117-block  6
     1530:  117-block  7
    %%%%%:  117-block  8
    %%%%%:  117-block  9
    %%%%%:  117-block 10
    %%%%%:  117-block 11
        -:  118:      else
   93753*:  119:        return m_lhs.rows();
    30240:  119-block  0
    30240:  119-block  1
     1503:  119-block  2
     1530:  119-block  3
        -:  120:    }
        -:  121:    EIGEN_DEVICE_FUNC
  524586*:  122:    EIGEN_STRONG_INLINE Index cols() const {
        -:  123:      // return the fixed size type if available to enable compile time optimizations
        -:  124:      if (internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic)
   93753*:  125:        return m_rhs.cols();
    30240:  125-block  0
    30240:  125-block  1
    %%%%%:  125-block  2
    %%%%%:  125-block  3
    %%%%%:  125-block  4
     1530:  125-block  5
    %%%%%:  125-block  6
     1503:  125-block  7
        -:  126:      else
  430833*:  127:        return m_lhs.cols();
    35328:  127-block  0
    %%%%%:  127-block  1
    %%%%%:  127-block  2
    %%%%%:  127-block  3
   392445:  127-block  4
    %%%%%:  127-block  5
    %%%%%:  127-block  6
     1530:  127-block  7
    %%%%%:  127-block  8
        -:  128:    }
        -:  129:
        -:  130:    /** \returns the left hand side nested expression */
        -:  131:    EIGEN_DEVICE_FUNC
  464109*:  132:    const _LhsNested& lhs() const { return m_lhs; }
    %%%%%:  132-block  0
    35328:  132-block  1
    %%%%%:  132-block  2
    30240:  132-block  3
    %%%%%:  132-block  4
    %%%%%:  132-block  5
    %%%%%:  132-block  6
   392445:  132-block  7
     1530:  132-block  8
    %%%%%:  132-block  9
     1530:  132-block 10
    %%%%%:  132-block 11
    %%%%%:  132-block 12
     1530:  132-block 13
    %%%%%:  132-block 14
        3:  132-block 15
        -:  133:    /** \returns the right hand side nested expression */
        -:  134:    EIGEN_DEVICE_FUNC
  464109*:  135:    const _RhsNested& rhs() const { return m_rhs; }
    %%%%%:  135-block  0
    35328:  135-block  1
    %%%%%:  135-block  2
    30240:  135-block  3
    %%%%%:  135-block  4
    %%%%%:  135-block  5
    %%%%%:  135-block  6
    %%%%%:  135-block  7
   392445:  135-block  8
     1530:  135-block  9
    %%%%%:  135-block 10
     1530:  135-block 11
    %%%%%:  135-block 12
    %%%%%:  135-block 13
     1530:  135-block 14
    %%%%%:  135-block 15
        3:  135-block 16
        -:  136:    /** \returns the functor representing the binary operation */
        -:  137:    EIGEN_DEVICE_FUNC
  462606*:  138:    const BinaryOp& functor() const { return m_functor; }
    %%%%%:  138-block  0
    35328:  138-block  1
    %%%%%:  138-block  2
    30240:  138-block  3
    %%%%%:  138-block  4
    %%%%%:  138-block  5
    %%%%%:  138-block  6
    %%%%%:  138-block  7
   392445:  138-block  8
     1530:  138-block  9
    %%%%%:  138-block 10
     1530:  138-block 11
    %%%%%:  138-block 12
    %%%%%:  138-block 13
     1530:  138-block 14
    %%%%%:  138-block 15
        3:  138-block 16
        -:  139:
        -:  140:  protected:
        -:  141:    LhsNested m_lhs;
        -:  142:    RhsNested m_rhs;
        -:  143:    const BinaryOp m_functor;
        -:  144:};
        -:  145:
        -:  146:// Generic API dispatcher
        -:  147:template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
   70134*:  148:class CwiseBinaryOpImpl
    30240:  148-block  0
    %%%%%:  148-block  1
    35328:  148-block  2
     1503:  148-block  3
     1530:  148-block  4
    %%%%%:  148-block  5
     1530:  148-block  6
    %%%%%:  148-block  7
        3:  148-block  8
        -:  149:  : public internal::generic_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type
        -:  150:{
        -:  151:public:
        -:  152:  typedef typename internal::generic_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type Base;
        -:  153:};
        -:  154:
        -:  155:/** replaces \c *this by \c *this - \a other.
        -:  156:  *
        -:  157:  * \returns a reference to \c *this
        -:  158:  */
        -:  159:template<typename Derived>
        -:  160:template<typename OtherDerived>
        -:  161:EIGEN_STRONG_INLINE Derived &
  393975*:  162:MatrixBase<Derived>::operator-=(const MatrixBase<OtherDerived> &other)
        -:  163:{
  393975*:  164:  call_assignment(derived(), other.derived(), internal::sub_assign_op<Scalar,typename OtherDerived::Scalar>());
  393975*:  165:  return derived();
        -:  166:}
        -:  167:
        -:  168:/** replaces \c *this by \c *this + \a other.
        -:  169:  *
        -:  170:  * \returns a reference to \c *this
        -:  171:  */
        -:  172:template<typename Derived>
        -:  173:template<typename OtherDerived>
        -:  174:EIGEN_STRONG_INLINE Derived &
   36858*:  175:MatrixBase<Derived>::operator+=(const MatrixBase<OtherDerived>& other)
        -:  176:{
   36858*:  177:  call_assignment(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>());
   36858*:  178:  return derived();
        -:  179:}
        -:  180:
        -:  181:} // end namespace Eigen
        -:  182:
        -:  183:#endif // EIGEN_CWISE_BINARY_OP_H
        -:  184:
