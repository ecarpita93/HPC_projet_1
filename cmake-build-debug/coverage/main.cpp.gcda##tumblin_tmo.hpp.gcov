        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/tone_mapping/tumblin_tmo.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_TONE_MAPPING_TUMBLIN_TMO_HPP
        -:   19:#define PIC_TONE_MAPPING_TUMBLIN_TMO_HPP
        -:   20:
        -:   21:#include "../base.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:#include "../filtering/filter_luminance.hpp"
        -:   25:#include "../tone_mapping/tone_mapping_operator.hpp"
        -:   26:
        -:   27:namespace pic {
        -:   28:
        -:   29:/**
        -:   30: * @brief The TumblinTMO class
        -:   31: */
        -:   32:class TumblinTMO: public ToneMappingOperator
        -:   33:{
        -:   34:protected:
        -:   35:    float Ld_Max, Ld_a, Lw_a, C_Max;
        -:   36:    FilterLuminance flt_lum;
        -:   37:
        -:   38:    /**
        -:   39:     * @brief ProcessAux
        -:   40:     * @param imgIn
        -:   41:     * @param imgOut
        -:   42:     * @return
        -:   43:     */    
    #####:   44:    Image *ProcessAux(ImageVec imgIn, Image *imgOut)
        -:   45:    {
    #####:   46:        updateImage(imgIn[0]);
    %%%%%:   46-block  0
        -:   47:
        -:   48:        //compute luminance and its statistics
    #####:   49:        images[0] = flt_lum.Process(imgIn, images[0]);
    %%%%%:   49-block  0
    $$$$$:   49-block  1
        -:   50:
    #####:   51:        float Lw_Max;
    #####:   52:        images[0]->getMaxVal(NULL, &Lw_Max);
    %%%%%:   52-block  0
        -:   53:
    #####:   54:        float Lw_a_t;
    #####:   55:        if(Lw_a > 0.0f) {
    #####:   56:            Lw_a_t = Lw_a;
    %%%%%:   56-block  0
        -:   57:        } else {
    #####:   58:            images[0]->getLogMeanVal(NULL, &Lw_a_t);
    %%%%%:   58-block  0
        -:   59:        }
        -:   60:
    #####:   61:        float gamma_w = StevenCSF(Lw_a_t);
    #####:   62:        float gamma_d = StevenCSF(Ld_a);
    #####:   63:        float gamma_wd = gamma_w / (1.855f + 0.4f * logf(Ld_a));
    #####:   64:        float m = powf(C_Max, (gamma_wd - 1.0f) / 2.0f);
        -:   65:
    #####:   66:        float exponent = gamma_w / gamma_d;
    #####:   67:        float scale_norm = Lw_a;
    #####:   68:        float scale = Ld_a * m / Ld_Max;
        -:   69:
    #####:   70:        imgOut->assign(imgIn[0]);
    %%%%%:   70-block  0
        -:   71:
    #####:   72:        std::vector<float> param;
    #####:   73:        param.push_back(exponent);
    #####:   74:        param.push_back(scale_norm);
    %%%%%:   74-block  0
    #####:   75:        param.push_back(scale);
    %%%%%:   75-block  0
    #####:   76:        images[0]->applyFunctionParam(TumblinFun, param);
    %%%%%:   76-block  0
        -:   77:
    #####:   78:        (*imgOut) *= (*images[0]);
        -:   79:
    #####:   80:        return imgOut;
    %%%%%:   80-block  0
        -:   81:    }
        -:   82:
        -:   83:    /**
        -:   84:     * @brief TumblinFun
        -:   85:     * @param x
        -:   86:     * @param param
        -:   87:     * @return
        -:   88:     */
    #####:   89:    static float TumblinFun(float Lw, std::vector<float> &param)
        -:   90:    {
    #####:   91:        if(Lw > 0.0f) {
    %%%%%:   91-block  0
    #####:   92:            float Ld = powf(Lw / param[1], param[0]) * param[2];
    %%%%%:   92-block  0
        -:   93:
    #####:   94:            return Ld / Lw;
    %%%%%:   94-block  0
        -:   95:        } else {
        -:   96:            return 0.0f;
        -:   97:        }
        -:   98:    }
        -:   99:
        -:  100:public:
        -:  101:
        -:  102:    /**
        -:  103:     * @brief TumblinTMO
        -:  104:     * @param Ld_a
        -:  105:     * @param Ld_Max
        -:  106:     * @param C_Max
        -:  107:     * @param Lw_b
        -:  108:     */
        -:  109:    TumblinTMO(float Ld_a = 20.0f, float Ld_Max = 100.0f, float C_Max = 100.0f, float Lw_a = -1.0f) : ToneMappingOperator()
        -:  110:    {
        -:  111:        images.push_back(NULL);
        -:  112:        update(Ld_a, Ld_Max, C_Max, Lw_a);
        -:  113:    }
        -:  114:
        -:  115:    ~TumblinTMO()
        -:  116:    {
        -:  117:        release();
        -:  118:    }
        -:  119:
        -:  120:    /**
        -:  121:     * @brief update
        -:  122:     * @param Ld_a
        -:  123:     * @param Ld_Max
        -:  124:     * @param C_Max
        -:  125:     * @param Lw_a
        -:  126:     */
        -:  127:    void update(float Ld_a = 20.0f, float Ld_Max = 100.0f, float C_Max = 100.0f, float Lw_a = 1.0f)
        -:  128:    {
        -:  129:        this->Ld_a = Ld_a > 0.0f ? Ld_a : 20.0f;
        -:  130:        this->Ld_Max = Ld_Max > 0.0f ? Ld_Max : 100.0f;
        -:  131:        this->C_Max = C_Max > 0.0f ? C_Max : 100.0f;
        -:  132:        this->Lw_a = Lw_a > 0.0f ? Lw_a : 1.0f;
        -:  133:    }
        -:  134:
        -:  135:    /**
        -:  136:     * @brief execute
        -:  137:     * @param imgIn
        -:  138:     * @param imgOut
        -:  139:     * @return
        -:  140:     */
        -:  141:    static Image *execute(Image *imgIn, Image *imgOut)
        -:  142:    {
        -:  143:        TumblinTMO ttmo;
        -:  144:        return ttmo.Process(Single(imgIn), imgOut);
        -:  145:    }
        -:  146:
        -:  147:    /**
        -:  148:     * @brief StevenCSF
        -:  149:     * @param x
        -:  150:     * @return
        -:  151:     */
    #####:  152:    static float StevenCSF(float x)
        -:  153:    {
    #####:  154:        if(x <= 100.0f) {
    %%%%%:  154-block  0
    %%%%%:  154-block  1
    #####:  155:            return 1.855f + 0.4f * log10f(x + 2.3e-5f);
    %%%%%:  155-block  0
    %%%%%:  155-block  1
        -:  156:        } else {
        -:  157:            return 2.655f;
        -:  158:        }
        -:  159:    }
        -:  160:};
        -:  161:} // end namespace pic
        -:  162:
        -:  163:#endif /* PIC_TONE_MAPPING_TUMBLIN_TMO_HPP */
        -:  164:
