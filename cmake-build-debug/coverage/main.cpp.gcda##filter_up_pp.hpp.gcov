        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_up_pp.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_UP_PP_HPP
        -:   19:#define PIC_FILTERING_FILTER_UP_PP_HPP
        -:   20:
        -:   21:#include "../util/array.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:#include "../filtering/filter_down_pp.hpp"
        -:   25:#include "../image_samplers/image_sampler_bilinear.hpp"
        -:   26:
        -:   27:namespace pic {
        -:   28:
        -:   29:/**
        -:   30: * @brief The FilterUpPP class
        -:   31: */
        -:   32:class FilterUpPP: public Filter
        -:   33:{
        -:   34:protected:
        -:   35:
        -:   36:    ImageSamplerBilinear isb;
        -:   37:
        -:   38:    float *value, threshold;
        -:   39:
        -:   40:    /**
        -:   41:     * @brief ProcessBBox
        -:   42:     * @param dst
        -:   43:     * @param src
        -:   44:     * @param box
        -:   45:     */
    #####:   46:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   47:    {
    #####:   48:        for(int i = box->y0; i < box->y1; i++) {
    %%%%%:   48-block  0
    %%%%%:   48-block  1
    %%%%%:   48-block  2
    #####:   49:            float y = float(i) / dst->heightf;
        -:   50:
    #####:   51:            for(int j = box->x0; j < box->x1; j++) {
    %%%%%:   51-block  0
    %%%%%:   51-block  1
    #####:   52:                float x = float(j) / dst->widthf;
        -:   53:
    #####:   54:                float *data = (*dst)(j, i);
    %%%%%:   54-block  0
        -:   55:
    #####:   56:                float dist = Arrayf::distanceSq(data, value, src[0]->channels);
    %%%%%:   56-block  0
        -:   57:
    #####:   58:                if(dist <= threshold) {
    %%%%%:   58-block  0
    #####:   59:                    isb.SampleImage(src[0], x, y, data);
    %%%%%:   59-block  0
    %%%%%:   59-block  1
        -:   60:                }
        -:   61:            }
        -:   62:        }
    #####:   63:    }
        -:   64:
        -:   65:public:
        -:   66:
        -:   67:    /**
        -:   68:     * @brief FilterUpPP
        -:   69:     * @param value
        -:   70:     * @param threshold
        -:   71:     */
        -:   72:    FilterUpPP(float *value, float threshold) : Filter()
        -:   73:    {
        -:   74:        update(value, threshold);
        -:   75:    }
        -:   76:
        -:   77:    ~FilterUpPP()
        -:   78:    {
        -:   79:    }
        -:   80:
        -:   81:    /**
        -:   82:     * @brief update
        -:   83:     * @param value
        -:   84:     * @param threshold
        -:   85:     */
        -:   86:    void update(float *value, float threshold)
        -:   87:    {
        -:   88:        this->value = value;
        -:   89:
        -:   90:        if(value == NULL) {
        -:   91:            printf("ERROR in FilterUpPP");
        -:   92:        }
        -:   93:
        -:   94:        this->value = value;
        -:   95:
        -:   96:        this->threshold = (threshold > 0.0f) ? threshold : 1e-6f;
        -:   97:    }
        -:   98:
        -:   99:    /**
        -:  100:     * @brief OutputSize
        -:  101:     * @param imgIn
        -:  102:     * @param width
        -:  103:     * @param height
        -:  104:     * @param channels
        -:  105:     * @param frames
        -:  106:     */
    #####:  107:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:  108:    {
    #####:  109:        if(imgIn.size() == 1) {
    %%%%%:  109-block  0
    #####:  110:            width       = imgIn[0]->width << 1;
    %%%%%:  110-block  0
    #####:  111:            height      = imgIn[0]->height << 1;
    %%%%%:  111-block  0
        -:  112:        } else {
    #####:  113:            width       = imgIn[1]->width;
    %%%%%:  113-block  0
    #####:  114:            height      = imgIn[1]->height;
    %%%%%:  114-block  0
        -:  115:        }
        -:  116:
    #####:  117:        channels    = imgIn[0]->channels;
    #####:  118:        frames      = imgIn[0]->frames;
    #####:  119:    }
        -:  120:};
        -:  121:
        -:  122:} // end namespace pic
        -:  123:
        -:  124:#endif /* PIC_FILTERING_FILTER_DOWN_PP_HPP */
        -:  125:
