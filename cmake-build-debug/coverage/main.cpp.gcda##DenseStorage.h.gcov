        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/externals/Eigen/src/Core/DenseStorage.h
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// This file is part of Eigen, a lightweight C++ template library
        -:    2:// for linear algebra.
        -:    3://
        -:    4:// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
        -:    5:// Copyright (C) 2006-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
        -:    6:// Copyright (C) 2010-2013 Hauke Heibel <hauke.heibel@gmail.com>
        -:    7://
        -:    8:// This Source Code Form is subject to the terms of the Mozilla
        -:    9:// Public License v. 2.0. If a copy of the MPL was not distributed
        -:   10:// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   11:
        -:   12:#ifndef EIGEN_MATRIXSTORAGE_H
        -:   13:#define EIGEN_MATRIXSTORAGE_H
        -:   14:
        -:   15:#ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN
        -:   16:  #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X) X; EIGEN_DENSE_STORAGE_CTOR_PLUGIN;
        -:   17:#else
        -:   18:  #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X)
        -:   19:#endif
        -:   20:
        -:   21:namespace Eigen {
        -:   22:
        -:   23:namespace internal {
        -:   24:
        -:   25:struct constructor_without_unaligned_array_assert {};
        -:   26:
        -:   27:template<typename T, int Size>
        -:   28:EIGEN_DEVICE_FUNC
 1650996*:   29:void check_static_allocation_size()
        -:   30:{
        -:   31:  // if EIGEN_STACK_ALLOCATION_LIMIT is defined to 0, then no limit
        -:   32:  #if EIGEN_STACK_ALLOCATION_LIMIT
        -:   33:  EIGEN_STATIC_ASSERT(Size * sizeof(T) <= EIGEN_STACK_ALLOCATION_LIMIT, OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG);
        -:   34:  #endif
        -:   35:}
        -:   36:
        -:   37:/** \internal
        -:   38:  * Static array. If the MatrixOrArrayOptions require auto-alignment, the array will be automatically aligned:
        -:   39:  * to 16 bytes boundary if the total size is a multiple of 16 bytes.
        -:   40:  */
        -:   41:template <typename T, int Size, int MatrixOrArrayOptions,
        -:   42:          int Alignment = (MatrixOrArrayOptions&DontAlign) ? 0
        -:   43:                        : compute_default_alignment<T,Size>::value >
        -:   44:struct plain_array
        -:   45:{
        -:   46:  T array[Size];
        -:   47:
        -:   48:  EIGEN_DEVICE_FUNC
    #####:   49:  plain_array()
        -:   50:  { 
        -:   51:    check_static_allocation_size<T,Size>();
        -:   52:  }
        -:   53:
        -:   54:  EIGEN_DEVICE_FUNC
        -:   55:  plain_array(constructor_without_unaligned_array_assert)
        -:   56:  { 
        -:   57:    check_static_allocation_size<T,Size>();
        -:   58:  }
        -:   59:};
        -:   60:
        -:   61:#if defined(EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT)
        -:   62:  #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask)
        -:   63:#elif EIGEN_GNUC_AT_LEAST(4,7) 
        -:   64:  // GCC 4.7 is too aggressive in its optimizations and remove the alignement test based on the fact the array is declared to be aligned.
        -:   65:  // See this bug report: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53900
        -:   66:  // Hiding the origin of the array pointer behind a function argument seems to do the trick even if the function is inlined:
        -:   67:  template<typename PtrType>
  1650897:   68:  EIGEN_ALWAYS_INLINE PtrType eigen_unaligned_array_assert_workaround_gcc47(PtrType array) { return array; }
        -:   69:  #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask) \
        -:   70:    eigen_assert((internal::UIntPtr(eigen_unaligned_array_assert_workaround_gcc47(array)) & (sizemask)) == 0 \
        -:   71:              && "this assertion is explained here: " \
        -:   72:              "http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html" \
        -:   73:              " **** READ THIS WEB PAGE !!! ****");
        -:   74:#else
        -:   75:  #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask) \
        -:   76:    eigen_assert((internal::UIntPtr(array) & (sizemask)) == 0 \
        -:   77:              && "this assertion is explained here: " \
        -:   78:              "http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html" \
        -:   79:              " **** READ THIS WEB PAGE !!! ****");
        -:   80:#endif
        -:   81:
        -:   82:template <typename T, int Size, int MatrixOrArrayOptions>
        -:   83:struct plain_array<T, Size, MatrixOrArrayOptions, 8>
        -:   84:{
        -:   85:  EIGEN_ALIGN_TO_BOUNDARY(8) T array[Size];
        -:   86:
        -:   87:  EIGEN_DEVICE_FUNC
        -:   88:  plain_array() 
        -:   89:  {
        -:   90:    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(7);
        -:   91:    check_static_allocation_size<T,Size>();
        -:   92:  }
        -:   93:
        -:   94:  EIGEN_DEVICE_FUNC
        -:   95:  plain_array(constructor_without_unaligned_array_assert) 
        -:   96:  { 
        -:   97:    check_static_allocation_size<T,Size>();
        -:   98:  }
        -:   99:};
        -:  100:
        -:  101:template <typename T, int Size, int MatrixOrArrayOptions>
        -:  102:struct plain_array<T, Size, MatrixOrArrayOptions, 16>
        -:  103:{
        -:  104:  EIGEN_ALIGN_TO_BOUNDARY(16) T array[Size];
        -:  105:
        -:  106:  EIGEN_DEVICE_FUNC
  1650897:  107:  plain_array() 
        -:  108:  { 
  1650897:  109:    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(15);
        -:  110:    check_static_allocation_size<T,Size>();
        -:  111:  }
        -:  112:
        -:  113:  EIGEN_DEVICE_FUNC
        -:  114:  plain_array(constructor_without_unaligned_array_assert) 
        -:  115:  { 
        -:  116:    check_static_allocation_size<T,Size>();
        -:  117:  }
        -:  118:};
        -:  119:
        -:  120:template <typename T, int Size, int MatrixOrArrayOptions>
        -:  121:struct plain_array<T, Size, MatrixOrArrayOptions, 32>
        -:  122:{
        -:  123:  EIGEN_ALIGN_TO_BOUNDARY(32) T array[Size];
        -:  124:
        -:  125:  EIGEN_DEVICE_FUNC
        -:  126:  plain_array() 
        -:  127:  {
        -:  128:    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(31);
        -:  129:    check_static_allocation_size<T,Size>();
        -:  130:  }
        -:  131:
        -:  132:  EIGEN_DEVICE_FUNC
      99*:  133:  plain_array(constructor_without_unaligned_array_assert) 
        -:  134:  { 
        -:  135:    check_static_allocation_size<T,Size>();
        -:  136:  }
        -:  137:};
        -:  138:
        -:  139:template <typename T, int Size, int MatrixOrArrayOptions>
        -:  140:struct plain_array<T, Size, MatrixOrArrayOptions, 64>
        -:  141:{
        -:  142:  EIGEN_ALIGN_TO_BOUNDARY(64) T array[Size];
        -:  143:
        -:  144:  EIGEN_DEVICE_FUNC
        -:  145:  plain_array() 
        -:  146:  { 
        -:  147:    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(63);
        -:  148:    check_static_allocation_size<T,Size>();
        -:  149:  }
        -:  150:
        -:  151:  EIGEN_DEVICE_FUNC
        -:  152:  plain_array(constructor_without_unaligned_array_assert) 
        -:  153:  { 
        -:  154:    check_static_allocation_size<T,Size>();
        -:  155:  }
        -:  156:};
        -:  157:
        -:  158:template <typename T, int MatrixOrArrayOptions, int Alignment>
        -:  159:struct plain_array<T, 0, MatrixOrArrayOptions, Alignment>
        -:  160:{
        -:  161:  T array[1];
        -:  162:  EIGEN_DEVICE_FUNC plain_array() {}
        -:  163:  EIGEN_DEVICE_FUNC plain_array(constructor_without_unaligned_array_assert) {}
        -:  164:};
        -:  165:
        -:  166:} // end namespace internal
        -:  167:
        -:  168:/** \internal
        -:  169:  *
        -:  170:  * \class DenseStorage
        -:  171:  * \ingroup Core_Module
        -:  172:  *
        -:  173:  * \brief Stores the data of a matrix
        -:  174:  *
        -:  175:  * This class stores the data of fixed-size, dynamic-size or mixed matrices
        -:  176:  * in a way as compact as possible.
        -:  177:  *
        -:  178:  * \sa Matrix
        -:  179:  */
        -:  180:template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage;
        -:  181:
        -:  182:// purely fixed-size matrix
        -:  183:template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
        -:  184:{
        -:  185:    internal::plain_array<T,Size,_Options> m_data;
        -:  186:  public:
 1650897*:  187:    EIGEN_DEVICE_FUNC DenseStorage() {
  1650897:  187-block  0
    %%%%%:  187-block  1
    %%%%%:  187-block  2
        -:  188:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
        -:  189:    }
        -:  190:    EIGEN_DEVICE_FUNC
      99*:  191:    explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
      99*:  192:      : m_data(internal::constructor_without_unaligned_array_assert()) {}
    %%%%%:  192-block  0
       33:  192-block  1
       33:  192-block  2
       33:  192-block  3
        -:  193:    EIGEN_DEVICE_FUNC 
    #####:  194:    DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
    %%%%%:  194-block  0
        -:  195:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
        -:  196:    }
        -:  197:    EIGEN_DEVICE_FUNC 
        -:  198:    DenseStorage& operator=(const DenseStorage& other)
        -:  199:    { 
        -:  200:      if (this != &other) m_data = other.m_data;
        -:  201:      return *this; 
        -:  202:    }
        -:  203:    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols) {
        -:  204:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  205:      eigen_internal_assert(size==rows*cols && rows==_Rows && cols==_Cols);
        -:  206:      EIGEN_UNUSED_VARIABLE(size);
        -:  207:      EIGEN_UNUSED_VARIABLE(rows);
        -:  208:      EIGEN_UNUSED_VARIABLE(cols);
        -:  209:    }
        -:  210:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); }
 9905511*:  211:    EIGEN_DEVICE_FUNC static Index rows(void) {return _Rows;}
       66:  211-block  0
    %%%%%:  211-block  1
    %%%%%:  211-block  2
    %%%%%:  211-block  3
    %%%%%:  211-block  4
       63:  211-block  5
    %%%%%:  211-block  6
  3301794:  211-block  7
  1650897:  211-block  8
  1650897:  211-block  9
  1650897:  211-block 10
    %%%%%:  211-block 11
    %%%%%:  211-block 12
    %%%%%:  211-block 13
11556438*:  212:    EIGEN_DEVICE_FUNC static Index cols(void) {return _Cols;}
       33:  212-block  0
       63:  212-block  1
    %%%%%:  212-block  2
    %%%%%:  212-block  3
    %%%%%:  212-block  4
       63:  212-block  5
    %%%%%:  212-block  6
  3301794:  212-block  7
  1650897:  212-block  8
  4952691:  212-block  9
  4952691:  212-block 10
    %%%%%:  212-block 11
    %%%%%:  212-block 12
    %%%%%:  212-block 13
        -:  213:    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    #####:  214:    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 3301794*:  215:    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    %%%%%:  215-block  0
    %%%%%:  215-block  1
    %%%%%:  215-block  2
    %%%%%:  215-block  3
    %%%%%:  215-block  4
 5014320*:  216:    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
    %%%%%:  216-block  0
    %%%%%:  216-block  1
    %%%%%:  216-block  2
     1536:  216-block  3
    19968:  216-block  4
       63:  216-block  5
    19968:  216-block  6
       63:  216-block  7
    19968:  216-block  8
       63:  216-block  9
  3301794:  216-block 10
  1650897:  216-block 11
        -:  217:};
        -:  218:
        -:  219:// null matrix
        -:  220:template<typename T, int _Rows, int _Cols, int _Options> class DenseStorage<T, 0, _Rows, _Cols, _Options>
        -:  221:{
        -:  222:  public:
        -:  223:    EIGEN_DEVICE_FUNC DenseStorage() {}
        -:  224:    EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert) {}
        -:  225:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage&) {}
        -:  226:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage&) { return *this; }
        -:  227:    EIGEN_DEVICE_FUNC DenseStorage(Index,Index,Index) {}
        -:  228:    EIGEN_DEVICE_FUNC void swap(DenseStorage& ) {}
        -:  229:    EIGEN_DEVICE_FUNC static Index rows(void) {return _Rows;}
        -:  230:    EIGEN_DEVICE_FUNC static Index cols(void) {return _Cols;}
        -:  231:    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
        -:  232:    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
        -:  233:    EIGEN_DEVICE_FUNC const T *data() const { return 0; }
        -:  234:    EIGEN_DEVICE_FUNC T *data() { return 0; }
        -:  235:};
        -:  236:
        -:  237:// more specializations for null matrices; these are necessary to resolve ambiguities
        -:  238:template<typename T, int _Options> class DenseStorage<T, 0, Dynamic, Dynamic, _Options>
        -:  239:: public DenseStorage<T, 0, 0, 0, _Options> { };
        -:  240:
        -:  241:template<typename T, int _Rows, int _Options> class DenseStorage<T, 0, _Rows, Dynamic, _Options>
        -:  242:: public DenseStorage<T, 0, 0, 0, _Options> { };
        -:  243:
        -:  244:template<typename T, int _Cols, int _Options> class DenseStorage<T, 0, Dynamic, _Cols, _Options>
        -:  245:: public DenseStorage<T, 0, 0, 0, _Options> { };
        -:  246:
        -:  247:// dynamic-size matrix with fixed-size storage
        -:  248:template<typename T, int Size, int _Options> class DenseStorage<T, Size, Dynamic, Dynamic, _Options>
        -:  249:{
        -:  250:    internal::plain_array<T,Size,_Options> m_data;
        -:  251:    Index m_rows;
        -:  252:    Index m_cols;
        -:  253:  public:
        -:  254:    EIGEN_DEVICE_FUNC DenseStorage() : m_rows(0), m_cols(0) {}
        -:  255:    EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
        -:  256:      : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(0), m_cols(0) {}
        -:  257:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_data(other.m_data), m_rows(other.m_rows), m_cols(other.m_cols) {}
        -:  258:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other) 
        -:  259:    { 
        -:  260:      if (this != &other)
        -:  261:      {
        -:  262:        m_data = other.m_data;
        -:  263:        m_rows = other.m_rows;
        -:  264:        m_cols = other.m_cols;
        -:  265:      }
        -:  266:      return *this; 
        -:  267:    }
        -:  268:    EIGEN_DEVICE_FUNC DenseStorage(Index, Index rows, Index cols) : m_rows(rows), m_cols(cols) {}
        -:  269:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other)
        -:  270:    { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); std::swap(m_cols,other.m_cols); }
        -:  271:    EIGEN_DEVICE_FUNC Index rows() const {return m_rows;}
        -:  272:    EIGEN_DEVICE_FUNC Index cols() const {return m_cols;}
        -:  273:    EIGEN_DEVICE_FUNC void conservativeResize(Index, Index rows, Index cols) { m_rows = rows; m_cols = cols; }
        -:  274:    EIGEN_DEVICE_FUNC void resize(Index, Index rows, Index cols) { m_rows = rows; m_cols = cols; }
        -:  275:    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
        -:  276:    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
        -:  277:};
        -:  278:
        -:  279:// dynamic-size matrix with fixed-size storage and fixed width
        -:  280:template<typename T, int Size, int _Cols, int _Options> class DenseStorage<T, Size, Dynamic, _Cols, _Options>
        -:  281:{
        -:  282:    internal::plain_array<T,Size,_Options> m_data;
        -:  283:    Index m_rows;
        -:  284:  public:
        -:  285:    EIGEN_DEVICE_FUNC DenseStorage() : m_rows(0) {}
        -:  286:    EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
        -:  287:      : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(0) {}
        -:  288:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_data(other.m_data), m_rows(other.m_rows) {}
        -:  289:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other) 
        -:  290:    {
        -:  291:      if (this != &other)
        -:  292:      {
        -:  293:        m_data = other.m_data;
        -:  294:        m_rows = other.m_rows;
        -:  295:      }
        -:  296:      return *this; 
        -:  297:    }
        -:  298:    EIGEN_DEVICE_FUNC DenseStorage(Index, Index rows, Index) : m_rows(rows) {}
        -:  299:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); }
        -:  300:    EIGEN_DEVICE_FUNC Index rows(void) const {return m_rows;}
        -:  301:    EIGEN_DEVICE_FUNC Index cols(void) const {return _Cols;}
        -:  302:    EIGEN_DEVICE_FUNC void conservativeResize(Index, Index rows, Index) { m_rows = rows; }
        -:  303:    EIGEN_DEVICE_FUNC void resize(Index, Index rows, Index) { m_rows = rows; }
        -:  304:    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
        -:  305:    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
        -:  306:};
        -:  307:
        -:  308:// dynamic-size matrix with fixed-size storage and fixed height
        -:  309:template<typename T, int Size, int _Rows, int _Options> class DenseStorage<T, Size, _Rows, Dynamic, _Options>
        -:  310:{
        -:  311:    internal::plain_array<T,Size,_Options> m_data;
        -:  312:    Index m_cols;
        -:  313:  public:
        -:  314:    EIGEN_DEVICE_FUNC DenseStorage() : m_cols(0) {}
        -:  315:    EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
        -:  316:      : m_data(internal::constructor_without_unaligned_array_assert()), m_cols(0) {}
        -:  317:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_data(other.m_data), m_cols(other.m_cols) {}
        -:  318:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
        -:  319:    {
        -:  320:      if (this != &other)
        -:  321:      {
        -:  322:        m_data = other.m_data;
        -:  323:        m_cols = other.m_cols;
        -:  324:      }
        -:  325:      return *this;
        -:  326:    }
        -:  327:    EIGEN_DEVICE_FUNC DenseStorage(Index, Index, Index cols) : m_cols(cols) {}
        -:  328:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_cols,other.m_cols); }
        -:  329:    EIGEN_DEVICE_FUNC Index rows(void) const {return _Rows;}
        -:  330:    EIGEN_DEVICE_FUNC Index cols(void) const {return m_cols;}
        -:  331:    void conservativeResize(Index, Index, Index cols) { m_cols = cols; }
        -:  332:    void resize(Index, Index, Index cols) { m_cols = cols; }
        -:  333:    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
        -:  334:    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
        -:  335:};
        -:  336:
        -:  337:// purely dynamic matrix.
        -:  338:template<typename T, int _Options> class DenseStorage<T, Dynamic, Dynamic, Dynamic, _Options>
        -:  339:{
        -:  340:    T *m_data;
        -:  341:    Index m_rows;
        -:  342:    Index m_cols;
        -:  343:  public:
     108*:  344:    EIGEN_DEVICE_FUNC DenseStorage() : m_data(0), m_rows(0), m_cols(0) {}
    %%%%%:  344-block  0
       33:  344-block  1
       33:  344-block  2
       33:  344-block  3
        3:  344-block  4
        3:  344-block  5
        3:  344-block  6
    %%%%%:  344-block  7
        -:  345:    EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert)
        -:  346:       : m_data(0), m_rows(0), m_cols(0) {}
        -:  347:    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols)
        -:  348:      : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_rows(rows), m_cols(cols)
        -:  349:    {
        -:  350:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  351:      eigen_internal_assert(size==rows*cols && rows>=0 && cols >=0);
        -:  352:    }
        -:  353:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
        -:  354:      : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(other.m_rows*other.m_cols))
        -:  355:      , m_rows(other.m_rows)
        -:  356:      , m_cols(other.m_cols)
        -:  357:    {
        -:  358:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_rows*m_cols)
        -:  359:      internal::smart_copy(other.m_data, other.m_data+other.m_rows*other.m_cols, m_data);
        -:  360:    }
        -:  361:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
        -:  362:    {
        -:  363:      if (this != &other)
        -:  364:      {
        -:  365:        DenseStorage tmp(other);
        -:  366:        this->swap(tmp);
        -:  367:      }
        -:  368:      return *this;
        -:  369:    }
        -:  370:#if EIGEN_HAS_RVALUE_REFERENCES
        -:  371:    EIGEN_DEVICE_FUNC
        -:  372:    DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  373:      : m_data(std::move(other.m_data))
        -:  374:      , m_rows(std::move(other.m_rows))
        -:  375:      , m_cols(std::move(other.m_cols))
        -:  376:    {
        -:  377:      other.m_data = nullptr;
        -:  378:      other.m_rows = 0;
        -:  379:      other.m_cols = 0;
        -:  380:    }
        -:  381:    EIGEN_DEVICE_FUNC
        -:  382:    DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  383:    {
        -:  384:      using std::swap;
        -:  385:      swap(m_data, other.m_data);
        -:  386:      swap(m_rows, other.m_rows);
        -:  387:      swap(m_cols, other.m_cols);
        -:  388:      return *this;
        -:  389:    }
        -:  390:#endif
     105*:  391:    EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols); }
    $$$$$:  391-block  0
    $$$$$:  391-block  1
    $$$$$:  391-block  2
    $$$$$:  391-block  3
       33:  391-block  4
       33:  391-block  5
       33:  391-block  6
    $$$$$:  391-block  7
    $$$$$:  391-block  8
    $$$$$:  391-block  9
    $$$$$:  391-block 10
    $$$$$:  391-block 11
    $$$$$:  391-block 12
    $$$$$:  391-block 13
    $$$$$:  391-block 14
    $$$$$:  391-block 15
    $$$$$:  391-block 16
    $$$$$:  391-block 17
    $$$$$:  391-block 18
    %%%%%:  391-block 19
    %%%%%:  391-block 20
    $$$$$:  391-block 21
        3:  391-block 22
        3:  391-block 23
    $$$$$:  391-block 24
        -:  392:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other)
        -:  393:    { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); std::swap(m_cols,other.m_cols); }
18434731*:  394:    EIGEN_DEVICE_FUNC Index rows(void) const {return m_rows;}
    %%%%%:  394-block  0
       33:  394-block  1
    %%%%%:  394-block  2
  3148800:  394-block  3
    %%%%%:  394-block  4
    %%%%%:  394-block  5
    %%%%%:  394-block  6
     1536:  394-block  7
     1536:  394-block  8
   393984:  394-block  9
    %%%%%:  394-block 10
    %%%%%:  394-block 11
    %%%%%:  394-block 12
        3:  394-block 13
        3:  394-block 14
     1536:  394-block 15
    %%%%%:  394-block 16
    %%%%%:  394-block 17
    %%%%%:  394-block 18
    %%%%%:  394-block 19
    %%%%%:  394-block 20
    %%%%%:  394-block 21
    %%%%%:  394-block 22
    %%%%%:  394-block 23
    %%%%%:  394-block 24
    %%%%%:  394-block 25
        3:  394-block 26
        3:  394-block 27
    %%%%%:  394-block 28
        6:  394-block 29
        6:  394-block 30
     1503:  394-block 31
     4509:  394-block 32
       33:  394-block 33
     1536:  394-block 34
    %%%%%:  394-block 35
    %%%%%:  394-block 36
       72:  394-block 37
        3:  394-block 38
  9920368:  394-block 39
    %%%%%:  394-block 40
       33:  394-block 41
    %%%%%:  394-block 42
       33:  394-block 43
       36:  394-block 44
    %%%%%:  394-block 45
  3301794:  394-block 46
        3:  394-block 47
     1536:  394-block 48
        3:  394-block 49
     1602:  394-block 50
     1602:  394-block 51
    %%%%%:  394-block 52
        3:  394-block 53
       36:  394-block 54
  1650897:  394-block 55
        3:  394-block 56
        3:  394-block 57
        3:  394-block 58
        3:  394-block 59
       33:  394-block 60
    %%%%%:  394-block 61
    %%%%%:  394-block 62
    %%%%%:  394-block 63
    %%%%%:  394-block 64
    %%%%%:  394-block 65
    %%%%%:  394-block 66
    %%%%%:  394-block 67
    %%%%%:  394-block 68
    %%%%%:  394-block 69
    %%%%%:  394-block 70
    %%%%%:  394-block 71
    %%%%%:  394-block 72
    %%%%%:  394-block 73
    %%%%%:  394-block 74
    %%%%%:  394-block 75
    %%%%%:  394-block 76
    %%%%%:  394-block 77
    %%%%%:  394-block 78
    %%%%%:  394-block 79
    %%%%%:  394-block 80
    %%%%%:  394-block 81
    %%%%%:  394-block 82
    %%%%%:  394-block 83
        3:  394-block 84
        3:  394-block 85
        3:  394-block 86
        3:  394-block 87
        3:  394-block 88
    %%%%%:  394-block 89
        3:  394-block 90
     1536:  394-block 91
        3:  394-block 92
        3:  394-block 93
        3:  394-block 94
    %%%%%:  394-block 95
    %%%%%:  394-block 96
        3:  394-block 97
    %%%%%:  394-block 98
    %%%%%:  394-block 99
13240801*:  395:    EIGEN_DEVICE_FUNC Index cols(void) const {return m_cols;}
    %%%%%:  395-block  0
       33:  395-block  1
       33:  395-block  2
    %%%%%:  395-block  3
     1539:  395-block  4
    %%%%%:  395-block  5
    %%%%%:  395-block  6
    %%%%%:  395-block  7
     1539:  395-block  8
       33:  395-block  9
    %%%%%:  395-block 10
        3:  395-block 11
    %%%%%:  395-block 12
    %%%%%:  395-block 13
    %%%%%:  395-block 14
    %%%%%:  395-block 15
    %%%%%:  395-block 16
     4509:  395-block 17
    %%%%%:  395-block 18
        3:  395-block 19
        6:  395-block 20
     1503:  395-block 21
     1503:  395-block 22
     1536:  395-block 23
    %%%%%:  395-block 24
       72:  395-block 25
       33:  395-block 26
    %%%%%:  395-block 27
       33:  395-block 28
       36:  395-block 29
    %%%%%:  395-block 30
  3301794:  395-block 31
        3:  395-block 32
     1536:  395-block 33
        3:  395-block 34
     1602:  395-block 35
        3:  395-block 36
  9920368:  395-block 37
        3:  395-block 38
        3:  395-block 39
        3:  395-block 40
    %%%%%:  395-block 41
    %%%%%:  395-block 42
    %%%%%:  395-block 43
    %%%%%:  395-block 44
    %%%%%:  395-block 45
    %%%%%:  395-block 46
    %%%%%:  395-block 47
    %%%%%:  395-block 48
    %%%%%:  395-block 49
    %%%%%:  395-block 50
    %%%%%:  395-block 51
    %%%%%:  395-block 52
    %%%%%:  395-block 53
        3:  395-block 54
        3:  395-block 55
        3:  395-block 56
    %%%%%:  395-block 57
    %%%%%:  395-block 58
        3:  395-block 59
        3:  395-block 60
     1536:  395-block 61
        3:  395-block 62
        3:  395-block 63
        3:  395-block 64
        3:  395-block 65
    %%%%%:  395-block 66
        3:  395-block 67
    %%%%%:  395-block 68
    %%%%%:  395-block 69
    %%%%%:  395-block 70
    %%%%%:  395-block 71
    %%%%%:  395-block 72
    %%%%%:  395-block 73
    %%%%%:  395-block 74
    %%%%%:  395-block 75
        -:  396:    void conservativeResize(Index size, Index rows, Index cols)
        -:  397:    {
        -:  398:      m_data = internal::conditional_aligned_realloc_new_auto<T,(_Options&DontAlign)==0>(m_data, size, m_rows*m_cols);
        -:  399:      m_rows = rows;
        -:  400:      m_cols = cols;
        -:  401:    }
      126:  402:    EIGEN_DEVICE_FUNC void resize(Index size, Index rows, Index cols)
        -:  403:    {
      126:  404:      if(size != m_rows*m_cols)
        -:  405:      {
      117:  406:        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols);
      117:  407:        if (size)
      117:  408:          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
        -:  409:        else
    #####:  410:          m_data = 0;
        -:  411:        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  412:      }
      126:  413:      m_rows = rows;
      126:  414:      m_cols = cols;
      126:  415:    }
------------------
_ZN5Eigen12DenseStorageIfLin1ELin1ELin1ELi1EE6resizeElll:
       33:  402:    EIGEN_DEVICE_FUNC void resize(Index size, Index rows, Index cols)
        -:  403:    {
       33:  404:      if(size != m_rows*m_cols)
       33:  404-block  0
        -:  405:      {
       33:  406:        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols);
       33:  406-block  0
       33:  407:        if (size)
       33:  407-block  0
       33:  408:          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
       33:  408-block  0
        -:  409:        else
    #####:  410:          m_data = 0;
    %%%%%:  410-block  0
        -:  411:        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  412:      }
       33:  413:      m_rows = rows;
       33:  414:      m_cols = cols;
       33:  415:    }
------------------
_ZN5Eigen12DenseStorageIfLin1ELin1ELin1ELi0EE6resizeElll:
       93:  402:    EIGEN_DEVICE_FUNC void resize(Index size, Index rows, Index cols)
        -:  403:    {
       93:  404:      if(size != m_rows*m_cols)
       93:  404-block  0
        -:  405:      {
       84:  406:        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols);
       84:  406-block  0
       84:  407:        if (size)
       84:  407-block  0
       84:  408:          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
       84:  408-block  0
        -:  409:        else
    #####:  410:          m_data = 0;
    %%%%%:  410-block  0
        -:  411:        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  412:      }
       93:  413:      m_rows = rows;
       93:  414:      m_cols = cols;
       93:  415:    }
------------------
 7229544*:  416:    EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
        3:  416-block  0
     1536:  416-block  1
    %%%%%:  416-block  2
    %%%%%:  416-block  3
    %%%%%:  416-block  4
    %%%%%:  416-block  5
    %%%%%:  416-block  6
        3:  416-block  7
        6:  416-block  8
    %%%%%:  416-block  9
       36:  416-block 10
        3:  416-block 11
        3:  416-block 12
        3:  416-block 13
  1650897:  416-block 14
  3924480:  416-block 15
  3165000:  416-block 16
  1650897:  416-block 17
     1536:  416-block 18
13626904*:  417:    EIGEN_DEVICE_FUNC T *data() { return m_data; }
    %%%%%:  417-block  0
     4509:  417-block  1
     1503:  417-block  2
  9920368:  417-block  3
  3301794:  417-block  4
     1602:  417-block  5
   389385:  417-block  6
     5376:  417-block  7
        3:  417-block  8
      762:  417-block  9
        -:  418:};
        -:  419:
        -:  420:// matrix with dynamic width and fixed height (so that matrix has dynamic size).
        -:  421:template<typename T, int _Rows, int _Options> class DenseStorage<T, Dynamic, _Rows, Dynamic, _Options>
        -:  422:{
        -:  423:    T *m_data;
        -:  424:    Index m_cols;
        -:  425:  public:
     1518:  426:    EIGEN_DEVICE_FUNC DenseStorage() : m_data(0), m_cols(0) {}
     1503:  426-block  0
        9:  426-block  1
        3:  426-block  2
        3:  426-block  3
        -:  427:    explicit DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_cols(0) {}
        -:  428:    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_cols(cols)
        -:  429:    {
        -:  430:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  431:      eigen_internal_assert(size==rows*cols && rows==_Rows && cols >=0);
        -:  432:      EIGEN_UNUSED_VARIABLE(rows);
        -:  433:    }
        -:  434:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
        -:  435:      : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(_Rows*other.m_cols))
        -:  436:      , m_cols(other.m_cols)
        -:  437:    {
        -:  438:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_cols*_Rows)
        -:  439:      internal::smart_copy(other.m_data, other.m_data+_Rows*m_cols, m_data);
        -:  440:    }
        -:  441:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
        -:  442:    {
        -:  443:      if (this != &other)
        -:  444:      {
        -:  445:        DenseStorage tmp(other);
        -:  446:        this->swap(tmp);
        -:  447:      }
        -:  448:      return *this;
        -:  449:    }    
        -:  450:#if EIGEN_HAS_RVALUE_REFERENCES
        -:  451:    EIGEN_DEVICE_FUNC
        -:  452:    DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  453:      : m_data(std::move(other.m_data))
        -:  454:      , m_cols(std::move(other.m_cols))
        -:  455:    {
        -:  456:      other.m_data = nullptr;
        -:  457:      other.m_cols = 0;
        -:  458:    }
        -:  459:    EIGEN_DEVICE_FUNC
        -:  460:    DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  461:    {
        -:  462:      using std::swap;
        -:  463:      swap(m_data, other.m_data);
        -:  464:      swap(m_cols, other.m_cols);
        -:  465:      return *this;
        -:  466:    }
        -:  467:#endif
    =====:  468:    EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Rows*m_cols); }
    $$$$$:  468-block  0
    $$$$$:  468-block  1
    $$$$$:  468-block  2
    $$$$$:  468-block  3
    $$$$$:  468-block  4
    $$$$$:  468-block  5
    $$$$$:  468-block  6
    $$$$$:  468-block  7
    $$$$$:  468-block  8
    $$$$$:  468-block  9
    $$$$$:  468-block 10
    $$$$$:  468-block 11
    $$$$$:  468-block 12
    $$$$$:  468-block 13
    $$$$$:  468-block 14
    $$$$$:  468-block 15
    $$$$$:  468-block 16
        -:  469:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_cols,other.m_cols); }
   12129*:  470:    EIGEN_DEVICE_FUNC static Index rows(void) {return _Rows;}
     1503:  470-block  0
     1503:  470-block  1
    %%%%%:  470-block  2
    %%%%%:  470-block  3
    %%%%%:  470-block  4
     1503:  470-block  5
     1503:  470-block  6
     1503:  470-block  7
     1536:  470-block  8
     1536:  470-block  9
        3:  470-block 10
        3:  470-block 11
     1536:  470-block 12
   12129*:  471:    EIGEN_DEVICE_FUNC Index cols(void) const {return m_cols;}
     1503:  471-block  0
     1503:  471-block  1
    %%%%%:  471-block  2
    %%%%%:  471-block  3
    %%%%%:  471-block  4
     1503:  471-block  5
     1503:  471-block  6
     1503:  471-block  7
     1536:  471-block  8
     1536:  471-block  9
        3:  471-block 10
        3:  471-block 11
     1536:  471-block 12
        -:  472:    EIGEN_DEVICE_FUNC void conservativeResize(Index size, Index, Index cols)
        -:  473:    {
        -:  474:      m_data = internal::conditional_aligned_realloc_new_auto<T,(_Options&DontAlign)==0>(m_data, size, _Rows*m_cols);
        -:  475:      m_cols = cols;
        -:  476:    }
        -:  477:    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(Index size, Index, Index cols)
        -:  478:    {
        -:  479:      if(size != _Rows*m_cols)
        -:  480:      {
        -:  481:        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Rows*m_cols);
        -:  482:        if (size)
        -:  483:          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
        -:  484:        else
        -:  485:          m_data = 0;
        -:  486:        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  487:      }
        -:  488:      m_cols = cols;
        -:  489:    }
     4545:  490:    EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
     1503:  490-block  0
        3:  490-block  1
     1536:  490-block  2
  792512*:  491:    EIGEN_DEVICE_FUNC T *data() { return m_data; }
     1503:  491-block  0
     1503:  491-block  1
     1536:  491-block  2
     1536:  491-block  3
   392448:  491-block  4
   389385:  491-block  5
        -:  492:};
        -:  493:
        -:  494:// matrix with dynamic height and fixed width (so that matrix has dynamic size).
        -:  495:template<typename T, int _Cols, int _Options> class DenseStorage<T, Dynamic, Dynamic, _Cols, _Options>
        -:  496:{
        -:  497:    T *m_data;
        -:  498:    Index m_rows;
        -:  499:  public:
    1551*:  500:    EIGEN_DEVICE_FUNC DenseStorage() : m_data(0), m_rows(0) {}
    %%%%%:  500-block  0
        3:  500-block  1
    %%%%%:  500-block  2
    %%%%%:  500-block  3
     1530:  500-block  4
    %%%%%:  500-block  5
        3:  500-block  6
        3:  500-block  7
        3:  500-block  8
        3:  500-block  9
        3:  500-block 10
    %%%%%:  500-block 11
        3:  500-block 12
    %%%%%:  500-block 13
    %%%%%:  500-block 14
    %%%%%:  500-block 15
    %%%%%:  500-block 16
        -:  501:    explicit DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_rows(0) {}
        -:  502:    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_rows(rows)
        -:  503:    {
        -:  504:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  505:      eigen_internal_assert(size==rows*cols && rows>=0 && cols == _Cols);
        -:  506:      EIGEN_UNUSED_VARIABLE(cols);
        -:  507:    }
    #####:  508:    EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
    #####:  509:      : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(other.m_rows*_Cols))
    %%%%%:  509-block  0
    #####:  510:      , m_rows(other.m_rows)
        -:  511:    {
        -:  512:      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_rows*_Cols)
    #####:  513:      internal::smart_copy(other.m_data, other.m_data+other.m_rows*_Cols, m_data);
    #####:  514:    }
        -:  515:    EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
        -:  516:    {
        -:  517:      if (this != &other)
        -:  518:      {
        -:  519:        DenseStorage tmp(other);
        -:  520:        this->swap(tmp);
        -:  521:      }
        -:  522:      return *this;
        -:  523:    }    
        -:  524:#if EIGEN_HAS_RVALUE_REFERENCES
        -:  525:    EIGEN_DEVICE_FUNC
        -:  526:    DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  527:      : m_data(std::move(other.m_data))
        -:  528:      , m_rows(std::move(other.m_rows))
        -:  529:    {
        -:  530:      other.m_data = nullptr;
        -:  531:      other.m_rows = 0;
        -:  532:    }
        -:  533:    EIGEN_DEVICE_FUNC
        -:  534:    DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
        -:  535:    {
        -:  536:      using std::swap;
        -:  537:      swap(m_data, other.m_data);
        -:  538:      swap(m_rows, other.m_rows);
        -:  539:      return *this;
        -:  540:    }
        -:  541:#endif
    1545*:  542:    EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows); }
    $$$$$:  542-block  0
    %%%%%:  542-block  1
    %%%%%:  542-block  2
    $$$$$:  542-block  3
    $$$$$:  542-block  4
    $$$$$:  542-block  5
    $$$$$:  542-block  6
    $$$$$:  542-block  7
    %%%%%:  542-block  8
    %%%%%:  542-block  9
    $$$$$:  542-block 10
    %%%%%:  542-block 11
    %%%%%:  542-block 12
     1530:  542-block 13
    %%%%%:  542-block 14
    %%%%%:  542-block 15
    $$$$$:  542-block 16
    %%%%%:  542-block 17
    %%%%%:  542-block 18
    $$$$$:  542-block 19
    $$$$$:  542-block 20
        3:  542-block 21
        3:  542-block 22
    $$$$$:  542-block 23
    %%%%%:  542-block 24
    %%%%%:  542-block 25
    $$$$$:  542-block 26
    $$$$$:  542-block 27
    $$$$$:  542-block 28
    $$$$$:  542-block 29
    $$$$$:  542-block 30
    %%%%%:  542-block 31
    %%%%%:  542-block 32
    $$$$$:  542-block 33
    %%%%%:  542-block 34
    %%%%%:  542-block 35
    $$$$$:  542-block 36
    $$$$$:  542-block 37
    %%%%%:  542-block 38
    %%%%%:  542-block 39
    $$$$$:  542-block 40
    $$$$$:  542-block 41
    $$$$$:  542-block 42
    %%%%%:  542-block 43
    %%%%%:  542-block 44
    $$$$$:  542-block 45
    $$$$$:  542-block 46
    $$$$$:  542-block 47
    $$$$$:  542-block 48
    $$$$$:  542-block 49
    $$$$$:  542-block 50
    $$$$$:  542-block 51
    $$$$$:  542-block 52
    $$$$$:  542-block 53
    %%%%%:  542-block 54
    %%%%%:  542-block 55
    %%%%%:  542-block 56
    %%%%%:  542-block 57
    %%%%%:  542-block 58
    %%%%%:  542-block 59
    $$$$$:  542-block 60
    %%%%%:  542-block 61
    %%%%%:  542-block 62
    %%%%%:  542-block 63
    $$$$$:  542-block 64
    $$$$$:  542-block 65
    $$$$$:  542-block 66
    $$$$$:  542-block 67
    %%%%%:  542-block 68
    %%%%%:  542-block 69
    %%%%%:  542-block 70
    $$$$$:  542-block 71
    $$$$$:  542-block 72
    $$$$$:  542-block 73
    %%%%%:  542-block 74
    %%%%%:  542-block 75
    %%%%%:  542-block 76
    $$$$$:  542-block 77
    $$$$$:  542-block 78
    %%%%%:  542-block 79
    %%%%%:  542-block 80
    %%%%%:  542-block 81
    $$$$$:  542-block 82
    $$$$$:  542-block 83
    $$$$$:  542-block 84
        3:  542-block 85
        3:  542-block 86
        3:  542-block 87
    $$$$$:  542-block 88
    $$$$$:  542-block 89
    $$$$$:  542-block 90
    $$$$$:  542-block 91
        -:  543:    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); }
  407919*:  544:    EIGEN_DEVICE_FUNC Index rows(void) const {return m_rows;}
        3:  544-block  0
    %%%%%:  544-block  1
    %%%%%:  544-block  2
     1530:  544-block  3
   392445:  544-block  4
    %%%%%:  544-block  5
    %%%%%:  544-block  6
    %%%%%:  544-block  7
    %%%%%:  544-block  8
    %%%%%:  544-block  9
    %%%%%:  544-block 10
    %%%%%:  544-block 11
    %%%%%:  544-block 12
    %%%%%:  544-block 13
    %%%%%:  544-block 14
    %%%%%:  544-block 15
    %%%%%:  544-block 16
        3:  544-block 17
    %%%%%:  544-block 18
    %%%%%:  544-block 19
        3:  544-block 20
    %%%%%:  544-block 21
    %%%%%:  544-block 22
    %%%%%:  544-block 23
        3:  544-block 24
    %%%%%:  544-block 25
    %%%%%:  544-block 26
     1539:  544-block 27
    %%%%%:  544-block 28
       36:  544-block 29
    %%%%%:  544-block 30
    %%%%%:  544-block 31
    %%%%%:  544-block 32
    %%%%%:  544-block 33
    %%%%%:  544-block 34
    %%%%%:  544-block 35
        3:  544-block 36
        3:  544-block 37
        3:  544-block 38
        3:  544-block 39
    %%%%%:  544-block 40
    %%%%%:  544-block 41
    %%%%%:  544-block 42
    %%%%%:  544-block 43
    %%%%%:  544-block 44
    %%%%%:  544-block 45
    %%%%%:  544-block 46
    %%%%%:  544-block 47
        3:  544-block 48
     1533:  544-block 49
        3:  544-block 50
        3:  544-block 51
        3:  544-block 52
       36:  544-block 53
        9:  544-block 54
        3:  544-block 55
        3:  544-block 56
    %%%%%:  544-block 57
    %%%%%:  544-block 58
    %%%%%:  544-block 59
     1533:  544-block 60
     1536:  544-block 61
     1536:  544-block 62
    %%%%%:  544-block 63
    %%%%%:  544-block 64
    %%%%%:  544-block 65
    %%%%%:  544-block 66
    %%%%%:  544-block 67
    %%%%%:  544-block 68
     1533:  544-block 69
    %%%%%:  544-block 70
    %%%%%:  544-block 71
    %%%%%:  544-block 72
     6144:  544-block 73
    %%%%%:  544-block 74
    %%%%%:  544-block 75
    %%%%%:  544-block 76
    %%%%%:  544-block 77
    %%%%%:  544-block 78
    %%%%%:  544-block 79
    %%%%%:  544-block 80
    %%%%%:  544-block 81
    %%%%%:  544-block 82
    %%%%%:  544-block 83
    %%%%%:  544-block 84
    %%%%%:  544-block 85
    %%%%%:  544-block 86
   15468*:  545:    EIGEN_DEVICE_FUNC static Index cols(void) {return _Cols;}
        3:  545-block  0
    %%%%%:  545-block  1
    %%%%%:  545-block  2
     1530:  545-block  3
    %%%%%:  545-block  4
        3:  545-block  5
    %%%%%:  545-block  6
    %%%%%:  545-block  7
    %%%%%:  545-block  8
    %%%%%:  545-block  9
    %%%%%:  545-block 10
    %%%%%:  545-block 11
    %%%%%:  545-block 12
    %%%%%:  545-block 13
        3:  545-block 14
    %%%%%:  545-block 15
    %%%%%:  545-block 16
        3:  545-block 17
    %%%%%:  545-block 18
    %%%%%:  545-block 19
    %%%%%:  545-block 20
        3:  545-block 21
    %%%%%:  545-block 22
    %%%%%:  545-block 23
     1539:  545-block 24
    %%%%%:  545-block 25
    %%%%%:  545-block 26
    %%%%%:  545-block 27
    %%%%%:  545-block 28
    %%%%%:  545-block 29
       36:  545-block 30
    %%%%%:  545-block 31
    %%%%%:  545-block 32
    %%%%%:  545-block 33
        3:  545-block 34
    %%%%%:  545-block 35
    %%%%%:  545-block 36
    %%%%%:  545-block 37
    %%%%%:  545-block 38
    %%%%%:  545-block 39
    %%%%%:  545-block 40
        3:  545-block 41
     1533:  545-block 42
        3:  545-block 43
        3:  545-block 44
        3:  545-block 45
       36:  545-block 46
        9:  545-block 47
        3:  545-block 48
    %%%%%:  545-block 49
    %%%%%:  545-block 50
     1533:  545-block 51
     1536:  545-block 52
     1536:  545-block 53
    %%%%%:  545-block 54
    %%%%%:  545-block 55
    %%%%%:  545-block 56
    %%%%%:  545-block 57
    %%%%%:  545-block 58
    %%%%%:  545-block 59
        3:  545-block 60
     1533:  545-block 61
    %%%%%:  545-block 62
    %%%%%:  545-block 63
    %%%%%:  545-block 64
     6144:  545-block 65
    %%%%%:  545-block 66
    %%%%%:  545-block 67
    %%%%%:  545-block 68
    %%%%%:  545-block 69
    %%%%%:  545-block 70
    %%%%%:  545-block 71
    %%%%%:  545-block 72
    %%%%%:  545-block 73
    %%%%%:  545-block 74
    %%%%%:  545-block 75
    %%%%%:  545-block 76
    %%%%%:  545-block 77
    %%%%%:  545-block 78
    #####:  546:    void conservativeResize(Index size, Index rows, Index)
        -:  547:    {
    #####:  548:      m_data = internal::conditional_aligned_realloc_new_auto<T,(_Options&DontAlign)==0>(m_data, size, m_rows*_Cols);
    %%%%%:  548-block  0
    #####:  549:      m_rows = rows;
    %%%%%:  549-block  0
        -:  550:    }
        -:  551:    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(Index size, Index rows, Index)
        -:  552:    {
        -:  553:      if(size != m_rows*_Cols)
        -:  554:      {
        -:  555:        internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows);
        -:  556:        if (size)
        -:  557:          m_data = internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size);
        -:  558:        else
        -:  559:          m_data = 0;
        -:  560:        EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
        -:  561:      }
        -:  562:      m_rows = rows;
        -:  563:    }
  395574*:  564:    EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
   392445:  564-block  0
    %%%%%:  564-block  1
    %%%%%:  564-block  2
    %%%%%:  564-block  3
    %%%%%:  564-block  4
    %%%%%:  564-block  5
    %%%%%:  564-block  6
        3:  564-block  7
        3:  564-block  8
        3:  564-block  9
    %%%%%:  564-block 10
    %%%%%:  564-block 11
     1536:  564-block 12
    %%%%%:  564-block 13
    %%%%%:  564-block 14
    %%%%%:  564-block 15
    %%%%%:  564-block 16
       36:  564-block 17
        3:  564-block 18
        3:  564-block 19
        3:  564-block 20
    %%%%%:  564-block 21
    %%%%%:  564-block 22
        3:  564-block 23
    %%%%%:  564-block 24
    %%%%%:  564-block 25
    %%%%%:  564-block 26
    %%%%%:  564-block 27
    %%%%%:  564-block 28
    %%%%%:  564-block 29
    %%%%%:  564-block 30
    %%%%%:  564-block 31
    %%%%%:  564-block 32
    %%%%%:  564-block 33
    %%%%%:  564-block 34
    %%%%%:  564-block 35
    %%%%%:  564-block 36
    9149*:  565:    EIGEN_DEVICE_FUNC T *data() { return m_data; }
        3:  565-block  0
    %%%%%:  565-block  1
    %%%%%:  565-block  2
    %%%%%:  565-block  3
    %%%%%:  565-block  4
    %%%%%:  565-block  5
    %%%%%:  565-block  6
    %%%%%:  565-block  7
    %%%%%:  565-block  8
    %%%%%:  565-block  9
     1533:  565-block 10
    %%%%%:  565-block 11
    %%%%%:  565-block 12
    %%%%%:  565-block 13
     1536:  565-block 14
     1536:  565-block 15
     1466:  565-block 16
        -:  566:};
        -:  567:
        -:  568:} // end namespace Eigen
        -:  569:
        -:  570:#endif // EIGEN_MATRIX_H
