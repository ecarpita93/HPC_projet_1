        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_laplacian.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_LAPLACIAN_HPP
        -:   19:#define PIC_FILTERING_FILTER_LAPLACIAN_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterLaplacian class
        -:   27: */
        -:   28:class FilterLaplacian: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:
        -:   32:    /**
        -:   33:     * @brief ProcessBBox
        -:   34:     * @param dst
        -:   35:     * @param src
        -:   36:     * @param box
        -:   37:     */
    #####:   38:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   39:    {
    #####:   40:        int channels = src[0]->channels;
    %%%%%:   40-block  0
        -:   41:
    #####:   42:        Image *in = src[0];
        -:   43:
    #####:   44:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
        -:   45:
    #####:   46:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   46-block  0
    %%%%%:   46-block  1
        -:   47:
    #####:   48:                float *cur = (*in)(i, j);
    %%%%%:   48-block  0
    #####:   49:                float *out = (*dst)(i, j);
    %%%%%:   49-block  0
        -:   50:
        -:   51:                //neighbors
    #####:   52:                float *N = (*in)(i    , j + 1);
    %%%%%:   52-block  0
    #####:   53:                float *S = (*in)(i    , j - 1);
    %%%%%:   53-block  0
    #####:   54:                float *E = (*in)(i + 1, j);
    %%%%%:   54-block  0
    #####:   55:                float *W = (*in)(i - 1, j);
    %%%%%:   55-block  0
        -:   56:
    #####:   57:                for(int k = 0; k < channels; k++) {
    %%%%%:   57-block  0
    %%%%%:   57-block  1
    #####:   58:                    out[k] = (-4.0f * cur[k]) + N[k] + S[k] + E[k] + W[k];
    %%%%%:   58-block  0
        -:   59:                }
        -:   60:            }
        -:   61:        }
    #####:   62:    }
        -:   63:
        -:   64:public:
        -:   65:    /**
        -:   66:     * @brief FilterLaplacian
        -:   67:     */
        -:   68:    FilterLaplacian() : Filter()
        -:   69:    {
        -:   70:
        -:   71:    }
        -:   72:
        -:   73:    /**
        -:   74:     * @brief execute
        -:   75:     * @param imgIn
        -:   76:     * @param imgOut
        -:   77:     * @return
        -:   78:     */
        -:   79:    static Image *execute(Image *imgIn, Image *imgOut)
        -:   80:    {
        -:   81:        FilterLaplacian filter;
        -:   82:        return filter.Process(Single(imgIn), imgOut);
        -:   83:    }
        -:   84:};
        -:   85:
        -:   86:} // end namespace pic
        -:   87:
        -:   88:#endif /* PIC_FILTERING_FILTER_LAPLACIAN_HPP */
        -:   89:
