        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_guided_a_b.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_GUIDED_A_B_HPP
        -:   19:#define PIC_FILTERING_FILTER_GUIDED_A_B_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:#include "../util/array.hpp"
        -:   24:
        -:   25:#include "../util/matrix_3_x_3.hpp"
        -:   26:
        -:   27:#include "../util/math.hpp"
        -:   28:
        -:   29:namespace pic {
        -:   30:
        -:   31:/**
        -:   32: * @brief The FilterGuidedAB class
        -:   33: */
        -:   34:class FilterGuidedAB: public Filter
        -:   35:{
        -:   36:protected:
        -:   37:
        -:   38:    int radius;
        -:   39:    float e_regularization, nPixels;
        -:   40:
        -:   41:    /**
        -:   42:     * @brief Process1Channel
        -:   43:     * @param I
        -:   44:     * @param p
        -:   45:     * @param q
        -:   46:     * @param box
        -:   47:     */
        -:   48:    void Process1Channel(Image *I, Image *p, Image *q, BBox *box);
        -:   49:
        -:   50:    /**
        -:   51:     * @brief Process3Channel
        -:   52:     * @param I
        -:   53:     * @param p
        -:   54:     * @param q
        -:   55:     * @param box
        -:   56:     */
        -:   57:    void Process3Channel(Image *I, Image *p, Image *q, BBox *box);
        -:   58:
        -:   59:    /**
        -:   60:     * @brief ProcessBBox
        -:   61:     * @param dst
        -:   62:     * @param src
        -:   63:     * @param box
        -:   64:     */
        -:   65:    void ProcessBBox(Image *dst, ImageVec src, BBox *box);
        -:   66:
        -:   67:public:
        -:   68:
        -:   69:    /**
        -:   70:     * @brief FilterGuidedAB
        -:   71:     */
        -:   72:    FilterGuidedAB() : Filter()
        -:   73:    {
        -:   74:        update(8, 0.01f);
        -:   75:    }
        -:   76:
        -:   77:    /**
        -:   78:     * @brief FilterGuidedAB
        -:   79:     * @param radius
        -:   80:     * @param e_regularization
        -:   81:     */
        -:   82:    FilterGuidedAB(int radius, float e_regularization) : Filter()
        -:   83:    {
        -:   84:        update(radius, e_regularization);
        -:   85:    }
        -:   86:
        -:   87:    /**
        -:   88:     * @brief OutputSize
        -:   89:     * @param imgIn
        -:   90:     * @param width
        -:   91:     * @param height
        -:   92:     * @param channels
        -:   93:     * @param frames
        -:   94:     */
    #####:   95:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:   96:    {
    #####:   97:        width = imgIn[0]->width;
    %%%%%:   97-block  0
    #####:   98:        height = imgIn[0]->height;
    #####:   99:        channels = getp(imgIn)->channels * (getI(imgIn)->channels + 1);
    #####:  100:        frames = imgIn[0]->frames;
    #####:  101:    }
        -:  102:
        -:  103:    /**
        -:  104:     * @brief getI
        -:  105:     * @param imgIn
        -:  106:     * @return
        -:  107:     */
    #####:  108:    Image *getI(ImageVec &imgIn)
        -:  109:    {
    #####:  110:        auto n = imgIn.size();
    #####:  111:        if(n == 1) {
    %%%%%:  111-block  0
    %%%%%:  111-block  1
    #####:  112:            return imgIn[0];
    %%%%%:  112-block  0
        -:  113:        } else {
    #####:  114:            if(n > 1) {
    %%%%%:  114-block  0
    %%%%%:  114-block  1
    #####:  115:                return imgIn[1];
    %%%%%:  115-block  0
    %%%%%:  115-block  1
        -:  116:            } else {
        -:  117:                return NULL;
        -:  118:            }
        -:  119:        }
        -:  120:    }
        -:  121:
        -:  122:    /**
        -:  123:     * @brief getp
        -:  124:     * @param imgIn
        -:  125:     * @return
        -:  126:     */
    #####:  127:    Image *getp(ImageVec &imgIn)
        -:  128:    {
    #####:  129:        auto n = imgIn.size();
    %%%%%:  129-block  0
    #####:  130:        if(n == 1) {
    %%%%%:  130-block  0
    %%%%%:  130-block  1
    #####:  131:            return imgIn[0];
    %%%%%:  131-block  0
    %%%%%:  131-block  1
        -:  132:        } else {
    #####:  133:            if(n > 1) {
    %%%%%:  133-block  0
    %%%%%:  133-block  1
    #####:  134:                return imgIn[0];
    %%%%%:  134-block  0
    %%%%%:  134-block  1
        -:  135:            } else {
        -:  136:                return NULL;
        -:  137:            }
        -:  138:        }
        -:  139:    }
        -:  140:
        -:  141:    /**
        -:  142:     * @brief update
        -:  143:     * @param radius
        -:  144:     * @param e_regularization
        -:  145:     */
        -:  146:    void update(int radius, float e_regularization);
        -:  147:
        -:  148:    /**
        -:  149:     * @brief execute
        -:  150:     * @param imgIn
        -:  151:     * @param guide
        -:  152:     * @param imgOut
        -:  153:     * @param radius
        -:  154:     * @param e_regularization
        -:  155:     * @return
        -:  156:     */
        -:  157:    static Image *execute(Image *imgIn, Image *guide, Image *imgOut,
        -:  158:                             int radius, float e_regularization)
        -:  159:    {
        -:  160:        FilterGuidedAB filter(radius, e_regularization);
        -:  161:        return filter.Process(Double(imgIn, guide), imgOut);
        -:  162:    }
        -:  163:};
        -:  164:
        -:  165:PIC_INLINE void FilterGuidedAB::update(int radius, float e_regularization)
        -:  166:{
        -:  167:    this->radius = radius;
        -:  168:    this->e_regularization = e_regularization;
        -:  169:    nPixels = float(radius * radius * 4);
        -:  170:}
        -:  171:
    #####:  172:PIC_INLINE void FilterGuidedAB::Process1Channel(Image *I, Image *p, Image *q,
        -:  173:                                   BBox *box)
        -:  174:{
    #####:  175:    float I_mean, I_var;
    #####:  176:    float *p_mean = new float [p->channels];
    %%%%%:  176-block  0
    %%%%%:  176-block  1
    %%%%%:  176-block  2
        -:  177:
    #####:  178:    for(int j = box->y0; j < box->y1; j++) {
    %%%%%:  178-block  0
    %%%%%:  178-block  1
    #####:  179:        for(int i = box->x0; i < box->x1; i++) {
    %%%%%:  179-block  0
    %%%%%:  179-block  1
    %%%%%:  179-block  2
    #####:  180:            float *tmpQ = (*q)(i, j);
    %%%%%:  180-block  0
        -:  181:
    #####:  182:            BBox tmpBox(i - radius, i + radius, j - radius, j + radius);
    %%%%%:  182-block  0
        -:  183:
    #####:  184:            I->getMeanVal(&tmpBox, &I_mean);
    %%%%%:  184-block  0
    #####:  185:            I->getVarianceVal(&I_mean, &tmpBox, &I_var);
        -:  186:
    #####:  187:            p->getMeanVal(&tmpBox, p_mean);
        -:  188:
    #####:  189:            for(int c = 0; c < p->channels; c++) {
    %%%%%:  189-block  0
    #####:  190:                float I_mean_p_mean = I_mean * p_mean[c];
    #####:  191:                float a = 0.0f;
        -:  192:
    #####:  193:                for(int k = -radius; k < radius; k++) {
    %%%%%:  193-block  0
    %%%%%:  193-block  1
    %%%%%:  193-block  2
    #####:  194:                    for(int l = -radius; l < radius; l++) {
    %%%%%:  194-block  0
    #####:  195:                        float *I_i = (*I)(i + l, j + k);
    %%%%%:  195-block  0
    #####:  196:                        float *p_i = (*p)(i + l, j + k);
    %%%%%:  196-block  0
    #####:  197:                        a += I_i[0] * p_i[c] - I_mean_p_mean;
    %%%%%:  197-block  0
        -:  198:                    }
        -:  199:                }
        -:  200:
    #####:  201:                a /= (nPixels * (I_var + e_regularization));
    #####:  202:                float b = p_mean[c] - a * I_mean;
        -:  203:
    #####:  204:                int index = c << 1;
    #####:  205:                tmpQ[index] = a;
    #####:  206:                tmpQ[index + 1] = b;
    %%%%%:  206-block  0
        -:  207:            }
        -:  208:        }
        -:  209:    }
        -:  210:
    #####:  211:    delete[] p_mean;
    %%%%%:  211-block  0
    #####:  212:}
        -:  213:
    #####:  214:PIC_INLINE void FilterGuidedAB::Process3Channel(Image *I, Image *p,
        -:  215:        Image *q, BBox *box)
        -:  216:{
    #####:  217:    float *I_mean = new float[I->channels];
    %%%%%:  217-block  0
    %%%%%:  217-block  1
    %%%%%:  217-block  2
    #####:  218:    float *p_mean = new float[p->channels];
    %%%%%:  218-block  0
    %%%%%:  218-block  1
        -:  219:
    #####:  220:    float *a = new float[I->channels];
    %%%%%:  220-block  0
    %%%%%:  220-block  1
    #####:  221:    float *tmp_A = new float[I->channels];
    %%%%%:  221-block  0
    %%%%%:  221-block  1
        -:  222:
    #####:  223:    Matrix3x3 cov, inv;
    %%%%%:  223-block  0
        -:  224:
    #####:  225:    for(int j = box->y0; j < box->y1; j++) {
    %%%%%:  225-block  0
    %%%%%:  225-block  1
    %%%%%:  225-block  2
    #####:  226:        for(int i = box->x0; i < box->x1; i++) {
    %%%%%:  226-block  0
    %%%%%:  226-block  1
    %%%%%:  226-block  2
    #####:  227:            float *tmpQ = (*q)(i, j);
    %%%%%:  227-block  0
        -:  228:
    #####:  229:            BBox tmpBox(i - radius, i + radius, j - radius, j + radius);
    %%%%%:  229-block  0
        -:  230:
    #####:  231:            I->getMeanVal(&tmpBox, I_mean);
    %%%%%:  231-block  0
    #####:  232:            I->getCovMtxVal(I_mean, &tmpBox, cov.data);
        -:  233:
        -:  234:            //regularization
    #####:  235:            cov.add(e_regularization);
        -:  236:            //invert matrix
    #####:  237:            cov.inverse(&inv);
        -:  238:
    #####:  239:            p->getMeanVal(&tmpBox, p_mean);
        -:  240:
        -:  241:            int index = 0;
    #####:  242:            for(int c = 0; c < p->channels; c++) {
    %%%%%:  242-block  0
        -:  243:
    #####:  244:                Array<float>::assign(0.0f, tmp_A, I->channels);
    %%%%%:  244-block  0
        -:  245:
    #####:  246:                for(int k = -radius; k < radius; k++) {
    %%%%%:  246-block  0
    %%%%%:  246-block  1
    %%%%%:  246-block  2
    #####:  247:                    for(int l = -radius; l < radius; l++) {
    %%%%%:  247-block  0
    %%%%%:  247-block  1
    #####:  248:                        float *I_i = (*I)(i + l, j + k);
    %%%%%:  248-block  0
    #####:  249:                        float *p_i = (*p)(i + l, j + k);
    %%%%%:  249-block  0
        -:  250:
    #####:  251:                        for(int n = 0; n < I->channels; n++) {
    %%%%%:  251-block  0
    %%%%%:  251-block  1
    #####:  252:                            tmp_A[n] += I_i[n] * p_i[c] - I_mean[n] * p_mean[c];
    %%%%%:  252-block  0
        -:  253:                        }
        -:  254:                    }
        -:  255:                }
        -:  256:
    #####:  257:                Array<float>::div(tmp_A, I->channels, nPixels);
    %%%%%:  257-block  0
        -:  258:
        -:  259:                //multiply for inverted matrix
    #####:  260:                a = inv.mul(tmp_A, a);
    %%%%%:  260-block  0
        -:  261:
    #####:  262:                float a_dot_I_mean = Array<float>::dot(a, I_mean, I->channels);
        -:  263:                //float a_dot_I = Array<float>::dot(a, tmpI, channels);
        -:  264:
    #####:  265:                for(int n = 0; n < I->channels; n++) {
    %%%%%:  265-block  0
    #####:  266:                    tmpQ[index] = a[n];
    #####:  267:                    index++;
    %%%%%:  267-block  0
        -:  268:                }
        -:  269:
        -:  270:                //b
    #####:  271:                tmpQ[index] = p_mean[c] - a_dot_I_mean;
    #####:  272:                index++;
    %%%%%:  272-block  0
        -:  273:            }
        -:  274:        }
        -:  275:    }
    #####:  276:}
        -:  277:
    #####:  278:PIC_INLINE void FilterGuidedAB::ProcessBBox(Image *dst, ImageVec src,
        -:  279:        BBox *box)
        -:  280:{
    #####:  281:    Image *I = getI(src);
    %%%%%:  281-block  0
    #####:  282:    Image *p = getp(src);
    %%%%%:  282-block  0
        -:  283:
    #####:  284:    if(I->channels == 1) {
    %%%%%:  284-block  0
    #####:  285:        Process1Channel(I, p, dst, box);
    %%%%%:  285-block  0
        -:  286:    }
        -:  287:
    #####:  288:    if(I->channels == 3) {
    %%%%%:  288-block  0
    #####:  289:        Process3Channel(I, p, dst, box);
    %%%%%:  289-block  0
        -:  290:    }
    #####:  291:}
        -:  292:
        -:  293:} // end namespace pic
        -:  294:
        -:  295:#endif /* PIC_FILTERING_FILTER_GUIDED_A_B_HPP */
        -:  296:
