        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/util/point_samplers.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_UTIL_POINT_SAMPLERS_HPP
        -:   19:#define PIC_UTIL_POINT_SAMPLERS_HPP
        -:   20:
        -:   21:namespace pic {
        -:   22:
        -:   23:/**
        -:   24: * @brief randU computes a random number in [0, 1[ using the classic rand().
        -:   25: * @return It returns a random value in [0, 1[ using the classic rand().
        -:   26: */
        -:   27:inline float randU()
        -:   28:{
        -:   29:    return float(rand() % RAND_MAX) / float(RAND_MAX);
        -:   30:}
        -:   31:
        -:   32:const float POISSON_RHO = 0.75f;
        -:   33:
        -:   34:/**
        -:   35: * @brief PoissonRadius estimates the radius of a Poisson-disk like distribution
        -:   36: * using nSmaples.
        -:   37: * @param nSamples is the number of samples to have.
        -:   38: * @return It returns the estimation of the radius.
        -:   39: */
    #####:   40:inline float PoissonRadius(int nSamples)
        -:   41:{
    #####:   42:    return (2.0f * POISSON_RHO) / sqrtf(2.0f * sqrtf(3.0f) * float(nSamples));
    %%%%%:   42-block  0
        -:   43:}
        -:   44:
        -:   45:/*Sampler type:
        -:   46:	-ST_POISSON: poisson sampling
        -:   47:	-ST_POISSON_M: multiple poisson sampling
        -:   48:	-ST_MONTECARLO: classic montecarlo
        -:   49:	-ST_MONTECARLO_S: stratifield montecarlo*/
        -:   50:
        -:   51:enum SAMPLER_TYPE {ST_BRIDSON, ST_DARTTHROWING, ST_PATTERN, ST_MONTECARLO, ST_MONTECARLO_S};
        -:   52:
        -:   53:} // end namespace pic
        -:   54:
        -:   55:#endif /* PIC_UTIL_POINT_SAMPLERS_HPP */
        -:   56:
