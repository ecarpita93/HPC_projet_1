        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/externals/Eigen/src/Core/Block.h
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// This file is part of Eigen, a lightweight C++ template library
        -:    2:// for linear algebra.
        -:    3://
        -:    4:// Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
        -:    5:// Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
        -:    6://
        -:    7:// This Source Code Form is subject to the terms of the Mozilla
        -:    8:// Public License v. 2.0. If a copy of the MPL was not distributed
        -:    9:// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   10:
        -:   11:#ifndef EIGEN_BLOCK_H
        -:   12:#define EIGEN_BLOCK_H
        -:   13:
        -:   14:namespace Eigen { 
        -:   15:
        -:   16:namespace internal {
        -:   17:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
        -:   18:struct traits<Block<XprType, BlockRows, BlockCols, InnerPanel> > : traits<XprType>
        -:   19:{
        -:   20:  typedef typename traits<XprType>::Scalar Scalar;
        -:   21:  typedef typename traits<XprType>::StorageKind StorageKind;
        -:   22:  typedef typename traits<XprType>::XprKind XprKind;
        -:   23:  typedef typename ref_selector<XprType>::type XprTypeNested;
        -:   24:  typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;
        -:   25:  enum{
        -:   26:    MatrixRows = traits<XprType>::RowsAtCompileTime,
        -:   27:    MatrixCols = traits<XprType>::ColsAtCompileTime,
        -:   28:    RowsAtCompileTime = MatrixRows == 0 ? 0 : BlockRows,
        -:   29:    ColsAtCompileTime = MatrixCols == 0 ? 0 : BlockCols,
        -:   30:    MaxRowsAtCompileTime = BlockRows==0 ? 0
        -:   31:                         : RowsAtCompileTime != Dynamic ? int(RowsAtCompileTime)
        -:   32:                         : int(traits<XprType>::MaxRowsAtCompileTime),
        -:   33:    MaxColsAtCompileTime = BlockCols==0 ? 0
        -:   34:                         : ColsAtCompileTime != Dynamic ? int(ColsAtCompileTime)
        -:   35:                         : int(traits<XprType>::MaxColsAtCompileTime),
        -:   36:
        -:   37:    XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0,
        -:   38:    IsRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1
        -:   39:               : (MaxColsAtCompileTime==1&&MaxRowsAtCompileTime!=1) ? 0
        -:   40:               : XprTypeIsRowMajor,
        -:   41:    HasSameStorageOrderAsXprType = (IsRowMajor == XprTypeIsRowMajor),
        -:   42:    InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
        -:   43:    InnerStrideAtCompileTime = HasSameStorageOrderAsXprType
        -:   44:                             ? int(inner_stride_at_compile_time<XprType>::ret)
        -:   45:                             : int(outer_stride_at_compile_time<XprType>::ret),
        -:   46:    OuterStrideAtCompileTime = HasSameStorageOrderAsXprType
        -:   47:                             ? int(outer_stride_at_compile_time<XprType>::ret)
        -:   48:                             : int(inner_stride_at_compile_time<XprType>::ret),
        -:   49:
        -:   50:    // FIXME, this traits is rather specialized for dense object and it needs to be cleaned further
        -:   51:    FlagsLvalueBit = is_lvalue<XprType>::value ? LvalueBit : 0,
        -:   52:    FlagsRowMajorBit = IsRowMajor ? RowMajorBit : 0,
        -:   53:    Flags = (traits<XprType>::Flags & (DirectAccessBit | (InnerPanel?CompressedAccessBit:0))) | FlagsLvalueBit | FlagsRowMajorBit,
        -:   54:    // FIXME DirectAccessBit should not be handled by expressions
        -:   55:    // 
        -:   56:    // Alignment is needed by MapBase's assertions
        -:   57:    // We can sefely set it to false here. Internal alignment errors will be detected by an eigen_internal_assert in the respective evaluator
        -:   58:    Alignment = 0
        -:   59:  };
        -:   60:};
        -:   61:
        -:   62:template<typename XprType, int BlockRows=Dynamic, int BlockCols=Dynamic, bool InnerPanel = false,
        -:   63:         bool HasDirectAccess = internal::has_direct_access<XprType>::ret> class BlockImpl_dense;
        -:   64:         
        -:   65:} // end namespace internal
        -:   66:
        -:   67:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, typename StorageKind> class BlockImpl;
        -:   68:
        -:   69:/** \class Block
        -:   70:  * \ingroup Core_Module
        -:   71:  *
        -:   72:  * \brief Expression of a fixed-size or dynamic-size block
        -:   73:  *
        -:   74:  * \tparam XprType the type of the expression in which we are taking a block
        -:   75:  * \tparam BlockRows the number of rows of the block we are taking at compile time (optional)
        -:   76:  * \tparam BlockCols the number of columns of the block we are taking at compile time (optional)
        -:   77:  * \tparam InnerPanel is true, if the block maps to a set of rows of a row major matrix or
        -:   78:  *         to set of columns of a column major matrix (optional). The parameter allows to determine
        -:   79:  *         at compile time whether aligned access is possible on the block expression.
        -:   80:  *
        -:   81:  * This class represents an expression of either a fixed-size or dynamic-size block. It is the return
        -:   82:  * type of DenseBase::block(Index,Index,Index,Index) and DenseBase::block<int,int>(Index,Index) and
        -:   83:  * most of the time this is the only way it is used.
        -:   84:  *
        -:   85:  * However, if you want to directly maniputate block expressions,
        -:   86:  * for instance if you want to write a function returning such an expression, you
        -:   87:  * will need to use this class.
        -:   88:  *
        -:   89:  * Here is an example illustrating the dynamic case:
        -:   90:  * \include class_Block.cpp
        -:   91:  * Output: \verbinclude class_Block.out
        -:   92:  *
        -:   93:  * \note Even though this expression has dynamic size, in the case where \a XprType
        -:   94:  * has fixed size, this expression inherits a fixed maximal size which means that evaluating
        -:   95:  * it does not cause a dynamic memory allocation.
        -:   96:  *
        -:   97:  * Here is an example illustrating the fixed-size case:
        -:   98:  * \include class_FixedBlock.cpp
        -:   99:  * Output: \verbinclude class_FixedBlock.out
        -:  100:  *
        -:  101:  * \sa DenseBase::block(Index,Index,Index,Index), DenseBase::block(Index,Index), class VectorBlock
        -:  102:  */
  201635*:  103:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel> class Block
        -:  104:  : public BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>::StorageKind>
        -:  105:{
        -:  106:    typedef BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>::StorageKind> Impl;
        -:  107:  public:
        -:  108:    //typedef typename Impl::Base Base;
        -:  109:    typedef Impl Base;
        -:  110:    EIGEN_GENERIC_PUBLIC_INTERFACE(Block)
    #####:  111:    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
        -:  112:    
        -:  113:    typedef typename internal::remove_all<XprType>::type NestedExpression;
        -:  114:  
        -:  115:    /** Column or Row constructor
        -:  116:      */
        -:  117:    EIGEN_DEVICE_FUNC
33985148*:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
16992574*:  120:      eigen_assert( (i>=0) && (
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
16992574*:  123:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEELi1ELi1ELb0EEC2ERS3_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEC2ERS2_l:
 19840736:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
 9920368*:  120:      eigen_assert( (i>=0) && (
  9920368:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
  9920368:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi1ELin1ELb0EEC2ERS2_l:
  6603588:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
 3301794*:  120:      eigen_assert( (i>=0) && (
  3301794:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
  3301794:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLi2ELi2ELi0ELi2ELi2EEELi1ELi2ELb0EEC2ERS2_l:
  6603588:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
 3301794*:  120:      eigen_assert( (i>=0) && (
  3301794:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
  3301794:  123:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELi1ELin1ELb0EEC2ERS3_l:
     6120:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    3060*:  120:      eigen_assert( (i>=0) && (
     3060:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
     3060:  123:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1EEC2ERS3_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi1ELi1ELb0EEC2ERS2_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi1ELin1ELb1EEC2ERS2_l:
     9018:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    4509*:  120:      eigen_assert( (i>=0) && (
     4509:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
     4509:  123:    }
------------------
_ZN5Eigen5BlockIKNS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1EEC2ERS4_l:
     3006:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    1503*:  120:      eigen_assert( (i>=0) && (
     1503:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
     1503:  123:    }
------------------
_ZN5Eigen5BlockINS0_INS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0EEELin1ELi1ELb1EEC2ERS4_l:
   784890:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
  392445*:  120:      eigen_assert( (i>=0) && (
   392445:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
   392445:  123:    }
------------------
_ZN5Eigen5BlockIKNS_3MapINS_6MatrixIfLi1ELi1ELi1ELi1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELi1ELb0EEC2ERS7_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELin1ELi1ELb1EEC2ERS8_l:
    70656:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
   35328*:  120:      eigen_assert( (i>=0) && (
    35328:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    35328:  123:    }
------------------
_ZN5Eigen5BlockINS_9TransposeINS_3MapINS_6MatrixIfLi1ELin1ELi1ELi1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEELin1ELi1ELb1EEC2ERS8_l:
     3060:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    1530*:  120:      eigen_assert( (i>=0) && (
     1530:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
     1530:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb1EEC2ERS2_l:
        6:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
       3*:  120:      eigen_assert( (i>=0) && (
        3:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
        3:  123:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEELi1ELi1ELb0EEC2ERS2_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIdLin1ELi1ELi0ELin1ELi1EEELi1ELi1ELb0EEC2ERS3_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC2ERS3_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC2ERS3_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
_ZN5Eigen5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELi1ELin1ELb1EEC2ERS8_l:
    60480:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
   30240*:  120:      eigen_assert( (i>=0) && (
    30240:  120-block  0
    %%%%%:  120-block  1
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    30240:  123:    }
------------------
_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEEEKNS0_IKNS8_IfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb0EEEEELi1ELi1ELb0EEC2ERSI_l:
    #####:  118:    inline Block(XprType& xpr, Index i) : Impl(xpr,i)
        -:  119:    {
    #####:  120:      eigen_assert( (i>=0) && (
    %%%%%:  120-block  0
    %%%%%:  120-block  1
    %%%%%:  120-block  2
        -:  121:          ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && i<xpr.rows())
        -:  122:        ||((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && i<xpr.cols())));
    #####:  123:    }
------------------
        -:  124:
        -:  125:    /** Fixed-size constructor
        -:  126:      */
        -:  127:    EIGEN_DEVICE_FUNC
        -:  128:    inline Block(XprType& xpr, Index startRow, Index startCol)
        -:  129:      : Impl(xpr, startRow, startCol)
        -:  130:    {
        -:  131:      EIGEN_STATIC_ASSERT(RowsAtCompileTime!=Dynamic && ColsAtCompileTime!=Dynamic,THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE)
        -:  132:      eigen_assert(startRow >= 0 && BlockRows >= 0 && startRow + BlockRows <= xpr.rows()
        -:  133:             && startCol >= 0 && BlockCols >= 0 && startCol + BlockCols <= xpr.cols());
        -:  134:    }
        -:  135:
        -:  136:    /** Dynamic-size constructor
        -:  137:      */
        -:  138:    EIGEN_DEVICE_FUNC
  152544*:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
  305088*:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
  146397*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
  152544*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
  152544*:  148:    }
------------------
_ZN5Eigen5BlockIKNS0_INS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEELin1ELi1ELb0EEC2ERS5_llll:
     1536:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3072:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    1536*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1536*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1536:  146-block  0
     1536:  146-block  1
     1536:  146-block  2
     1536:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1536:  148:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEC2ERS3_llll:
        3:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
        6:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
       3*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
        3:  146-block  0
        3:  146-block  1
        3:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
        3:  148:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEC2ERS2_llll:
     1602:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3204:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1602*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1602:  146-block  0
     1602:  146-block  1
     1602:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1602:  148:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEC2ERS2_llll:
     1533:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3066:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    1533*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1533*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1533:  146-block  0
     1533:  146-block  1
     1533:  146-block  2
     1533:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1533:  148:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0EEC2ERS3_llll:
     1530:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3060:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1530*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1530:  146-block  0
     1530:  146-block  1
     1530:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1530:  148:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLi1ELin1ELi1ELi1ELin1EEELi1ELin1ELb0EEC2ERS2_llll:
     1536:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3072:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    1536*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1536*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1536:  146-block  0
     1536:  146-block  1
     1536:  146-block  2
     1536:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1536:  148:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEC2ERS3_llll:
     3072:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     6144:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    3072*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    3072*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     3072:  146-block  0
     3072:  146-block  1
     3072:  146-block  2
     3072:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     3072:  148:    }
------------------
_ZN5Eigen5BlockINS0_INS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEELin1ELi1ELb0EEC2ERS4_llll:
     1536:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3072:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    1536*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1536*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1536:  146-block  0
     1536:  146-block  1
     1536:  146-block  2
     1536:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1536:  148:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb0EEC2ERS3_llll:
    #####:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    #####:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    #####:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    #####:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    %%%%%:  146-block  0
    %%%%%:  146-block  1
    %%%%%:  146-block  2
    %%%%%:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    #####:  148:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEC2ERS3_llll:
       36:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
       72:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
      36*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
      36*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
       36:  146-block  0
       36:  146-block  1
       36:  146-block  2
       36:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
       36:  148:    }
------------------
_ZN5Eigen5BlockINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb0EEC2ERS6_llll:
    35328:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    70656:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
   35328*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
   35328*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    35328:  146-block  0
    35328:  146-block  1
    35328:  146-block  2
    35328:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    35328:  148:    }
------------------
_ZN5Eigen5BlockIKNS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0EEC2ERS4_llll:
     1503:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3006:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1503*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1503:  146-block  0
     1503:  146-block  1
     1503:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1503:  148:    }
------------------
_ZN5Eigen5BlockINS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELin1ELin1ELb0EEC2ERS2_llll:
     1503:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3006:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1503*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1503:  146-block  0
     1503:  146-block  1
     1503:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1503:  148:    }
------------------
_ZN5Eigen5BlockIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb1EEC2ERS3_llll:
        6:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
       12:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
        -:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
       6*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
        6:  146-block  0
        6:  146-block  1
        6:  146-block  2
    %%%%%:  146-block  3
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
        6:  148:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi1ELin1ELb1EEELi1ELin1ELb0EEC2ERS3_llll:
     4509:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     9018:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    4509*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    4509*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     4509:  146-block  0
     4509:  146-block  1
     4509:  146-block  2
     4509:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     4509:  148:    }
------------------
_ZN5Eigen5BlockIKNS0_IKNS0_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1EEELin1ELi1ELb0EEC2ERS6_llll:
     1503:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
     3006:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    1503*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    1503*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
     1503:  146-block  0
     1503:  146-block  1
     1503:  146-block  2
     1503:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
     1503:  148:    }
------------------
_ZN5Eigen5BlockINS0_INS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEELin1ELi1ELb0EEC2ERS3_llll:
    #####:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    #####:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
    #####:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
    #####:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    %%%%%:  146-block  0
    %%%%%:  146-block  1
    %%%%%:  146-block  2
    %%%%%:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    #####:  148:    }
------------------
_ZN5Eigen5BlockIKNS0_IKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELin1ELi1ELb1EEELin1ELi1ELb0EEC2ERSA_llll:
    35328:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    70656:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
   35328*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
   35328*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    35328:  146-block  0
    35328:  146-block  1
    35328:  146-block  2
    35328:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    35328:  148:    }
------------------
_ZN5Eigen5BlockIKNS0_IKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELi1ELin1ELb1EEELi1ELin1ELb0EEC2ERSA_llll:
    30240:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    60480:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
   30240*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
   30240*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    30240:  146-block  0
    30240:  146-block  1
    30240:  146-block  2
    30240:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    30240:  148:    }
------------------
_ZN5Eigen5BlockIKNS_3MapIKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb0EEC2ERS8_llll:
    30240:  139:    inline Block(XprType& xpr,
        -:  140:          Index startRow, Index startCol,
        -:  141:          Index blockRows, Index blockCols)
    60480:  142:      : Impl(xpr, startRow, startCol, blockRows, blockCols)
        -:  143:    {
   30240*:  144:      eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==blockRows)
    %%%%%:  144-block  0
        -:  145:          && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==blockCols));
   30240*:  146:      eigen_assert(startRow >= 0 && blockRows >= 0 && startRow  <= xpr.rows() - blockRows
    30240:  146-block  0
    30240:  146-block  1
    30240:  146-block  2
    30240:  146-block  3
    %%%%%:  146-block  4
        -:  147:          && startCol >= 0 && blockCols >= 0 && startCol <= xpr.cols() - blockCols);
    30240:  148:    }
------------------
        -:  149:};
        -:  150:         
        -:  151:// The generic default implementation for dense block simplu forward to the internal::BlockImpl_dense
        -:  152:// that must be specialized for direct and non-direct access...
        -:  153:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
  201635*:  154:class BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, Dense>
        -:  155:  : public internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel>
        -:  156:{
        -:  157:    typedef internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel> Impl;
        -:  158:    typedef typename XprType::StorageIndex StorageIndex;
        -:  159:  public:
        -:  160:    typedef Impl Base;
    #####:  161:    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
10388986*:  162:    EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
    %%%%%:  162-block  0
    30240:  162-block  1
    %%%%%:  162-block  2
        3:  162-block  3
     1530:  162-block  4
    35328:  162-block  5
    %%%%%:  162-block  6
   392445:  162-block  7
     1503:  162-block  8
     4509:  162-block  9
    %%%%%:  162-block 10
     3060:  162-block 11
  9920368:  162-block 12
        -:  163:    EIGEN_DEVICE_FUNC inline BlockImpl(XprType& xpr, Index startRow, Index startCol) : Impl(xpr, startRow, startCol) {}
        -:  164:    EIGEN_DEVICE_FUNC
  152544*:  165:    inline BlockImpl(XprType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)
  149430*:  166:      : Impl(xpr, startRow, startCol, blockRows, blockCols) {}
    35328:  166-block  0
    30240:  166-block  1
    30240:  166-block  2
    35328:  166-block  3
    %%%%%:  166-block  4
     1503:  166-block  5
     4509:  166-block  6
     1503:  166-block  7
     1536:  166-block  8
       36:  166-block  9
     1536:  166-block 10
     3072:  166-block 11
     1536:  166-block 12
     1530:  166-block 13
     1533:  166-block 14
        -:  167:};
        -:  168:
        -:  169:namespace internal {
        -:  170:
        -:  171:/** \internal Internal implementation of dense Blocks in the general case. */
    #####:  172:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, bool HasDirectAccess> class BlockImpl_dense
        -:  173:  : public internal::dense_xpr_base<Block<XprType, BlockRows, BlockCols, InnerPanel> >::type
        -:  174:{
        -:  175:    typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;
        -:  176:    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
        -:  177:  public:
        -:  178:
        -:  179:    typedef typename internal::dense_xpr_base<BlockType>::type Base;
        -:  180:    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
        -:  181:    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
        -:  182:
        -:  183:    // class InnerIterator; // FIXME apparently never used
        -:  184:
        -:  185:    /** Column or Row constructor
        -:  186:      */
        -:  187:    EIGEN_DEVICE_FUNC
    #####:  188:    inline BlockImpl_dense(XprType& xpr, Index i)
    %%%%%:  188-block  0
        -:  189:      : m_xpr(xpr),
        -:  190:        // It is a row if and only if BlockRows==1 and BlockCols==XprType::ColsAtCompileTime,
        -:  191:        // and it is a column if and only if BlockRows==XprType::RowsAtCompileTime and BlockCols==1,
        -:  192:        // all other cases are invalid.
        -:  193:        // The case a 1x1 matrix seems ambiguous, but the result is the same anyway.
        -:  194:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        -:  195:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0),
        -:  196:        m_blockRows(BlockRows==1 ? 1 : xpr.rows()),
    #####:  197:        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
    %%%%%:  197-block  0
        -:  198:    {}
        -:  199:
        -:  200:    /** Fixed-size constructor
        -:  201:      */
        -:  202:    EIGEN_DEVICE_FUNC
        -:  203:    inline BlockImpl_dense(XprType& xpr, Index startRow, Index startCol)
        -:  204:      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
        -:  205:                    m_blockRows(BlockRows), m_blockCols(BlockCols)
        -:  206:    {}
        -:  207:
        -:  208:    /** Dynamic-size constructor
        -:  209:      */
        -:  210:    EIGEN_DEVICE_FUNC
        -:  211:    inline BlockImpl_dense(XprType& xpr,
        -:  212:          Index startRow, Index startCol,
        -:  213:          Index blockRows, Index blockCols)
        -:  214:      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
        -:  215:                    m_blockRows(blockRows), m_blockCols(blockCols)
        -:  216:    {}
        -:  217:
    #####:  218:    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    #####:  219:    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
        -:  220:
        -:  221:    EIGEN_DEVICE_FUNC
        -:  222:    inline Scalar& coeffRef(Index rowId, Index colId)
        -:  223:    {
        -:  224:      EIGEN_STATIC_ASSERT_LVALUE(XprType)
        -:  225:      return m_xpr.coeffRef(rowId + m_startRow.value(), colId + m_startCol.value());
        -:  226:    }
        -:  227:
        -:  228:    EIGEN_DEVICE_FUNC
        -:  229:    inline const Scalar& coeffRef(Index rowId, Index colId) const
        -:  230:    {
        -:  231:      return m_xpr.derived().coeffRef(rowId + m_startRow.value(), colId + m_startCol.value());
        -:  232:    }
        -:  233:
        -:  234:    EIGEN_DEVICE_FUNC
        -:  235:    EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index rowId, Index colId) const
        -:  236:    {
        -:  237:      return m_xpr.coeff(rowId + m_startRow.value(), colId + m_startCol.value());
        -:  238:    }
        -:  239:
        -:  240:    EIGEN_DEVICE_FUNC
        -:  241:    inline Scalar& coeffRef(Index index)
        -:  242:    {
        -:  243:      EIGEN_STATIC_ASSERT_LVALUE(XprType)
        -:  244:      return m_xpr.coeffRef(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
        -:  245:                            m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
        -:  246:    }
        -:  247:
        -:  248:    EIGEN_DEVICE_FUNC
        -:  249:    inline const Scalar& coeffRef(Index index) const
        -:  250:    {
        -:  251:      return m_xpr.coeffRef(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
        -:  252:                            m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
        -:  253:    }
        -:  254:
        -:  255:    EIGEN_DEVICE_FUNC
        -:  256:    inline const CoeffReturnType coeff(Index index) const
        -:  257:    {
        -:  258:      return m_xpr.coeff(m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
        -:  259:                         m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
        -:  260:    }
        -:  261:
        -:  262:    template<int LoadMode>
        -:  263:    inline PacketScalar packet(Index rowId, Index colId) const
        -:  264:    {
        -:  265:      return m_xpr.template packet<Unaligned>(rowId + m_startRow.value(), colId + m_startCol.value());
        -:  266:    }
        -:  267:
        -:  268:    template<int LoadMode>
        -:  269:    inline void writePacket(Index rowId, Index colId, const PacketScalar& val)
        -:  270:    {
        -:  271:      m_xpr.template writePacket<Unaligned>(rowId + m_startRow.value(), colId + m_startCol.value(), val);
        -:  272:    }
        -:  273:
        -:  274:    template<int LoadMode>
        -:  275:    inline PacketScalar packet(Index index) const
        -:  276:    {
        -:  277:      return m_xpr.template packet<Unaligned>
        -:  278:              (m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
        -:  279:               m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0));
        -:  280:    }
        -:  281:
        -:  282:    template<int LoadMode>
        -:  283:    inline void writePacket(Index index, const PacketScalar& val)
        -:  284:    {
        -:  285:      m_xpr.template writePacket<Unaligned>
        -:  286:         (m_startRow.value() + (RowsAtCompileTime == 1 ? 0 : index),
        -:  287:          m_startCol.value() + (RowsAtCompileTime == 1 ? index : 0), val);
        -:  288:    }
        -:  289:
        -:  290:    #ifdef EIGEN_PARSED_BY_DOXYGEN
        -:  291:    /** \sa MapBase::data() */
        -:  292:    EIGEN_DEVICE_FUNC inline const Scalar* data() const;
        -:  293:    EIGEN_DEVICE_FUNC inline Index innerStride() const;
        -:  294:    EIGEN_DEVICE_FUNC inline Index outerStride() const;
        -:  295:    #endif
        -:  296:
        -:  297:    EIGEN_DEVICE_FUNC
    #####:  298:    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
        -:  299:    { 
    #####:  300:      return m_xpr; 
    %%%%%:  300-block  0
        -:  301:    }
        -:  302:
        -:  303:    EIGEN_DEVICE_FUNC
        -:  304:    XprType& nestedExpression() { return m_xpr; }
        -:  305:      
        -:  306:    EIGEN_DEVICE_FUNC
    #####:  307:    StorageIndex startRow() const
        -:  308:    { 
    #####:  309:      return m_startRow.value(); 
    %%%%%:  309-block  0
        -:  310:    }
        -:  311:      
        -:  312:    EIGEN_DEVICE_FUNC
    #####:  313:    StorageIndex startCol() const
    %%%%%:  313-block  0
        -:  314:    { 
        -:  315:      return m_startCol.value(); 
        -:  316:    }
        -:  317:
        -:  318:  protected:
        -:  319:
        -:  320:    XprTypeNested m_xpr;
        -:  321:    const internal::variable_if_dynamic<StorageIndex, (XprType::RowsAtCompileTime == 1 && BlockRows==1) ? 0 : Dynamic> m_startRow;
        -:  322:    const internal::variable_if_dynamic<StorageIndex, (XprType::ColsAtCompileTime == 1 && BlockCols==1) ? 0 : Dynamic> m_startCol;
        -:  323:    const internal::variable_if_dynamic<StorageIndex, RowsAtCompileTime> m_blockRows;
        -:  324:    const internal::variable_if_dynamic<StorageIndex, ColsAtCompileTime> m_blockCols;
        -:  325:};
        -:  326:
        -:  327:/** \internal Internal implementation of dense Blocks in the direct access case.*/
        -:  328:template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel>
  120878*:  329:class BlockImpl_dense<XprType,BlockRows,BlockCols, InnerPanel,true>
    %%%%%:  329-block  0
     1503:  329-block  1
     1503:  329-block  2
    30240:  329-block  3
    %%%%%:  329-block  4
    %%%%%:  329-block  5
    %%%%%:  329-block  6
    %%%%%:  329-block  7
     1503:  329-block  8
    %%%%%:  329-block  9
    %%%%%:  329-block 10
    35328:  329-block 11
    %%%%%:  329-block 12
     1530:  329-block 13
    %%%%%:  329-block 14
     1530:  329-block 15
        3:  329-block 16
     1503:  329-block 17
     1503:  329-block 18
     1503:  329-block 19
     1530:  329-block 20
    %%%%%:  329-block 21
    %%%%%:  329-block 22
    %%%%%:  329-block 23
     1530:  329-block 24
     1530:  329-block 25
     1536:  329-block 26
    %%%%%:  329-block 27
     1536:  329-block 28
        -:  330:  : public MapBase<Block<XprType, BlockRows, BlockCols, InnerPanel> >
        -:  331:{
        -:  332:    typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;
        -:  333:    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
        -:  334:    enum {
        -:  335:      XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0
        -:  336:    };
        -:  337:  public:
        -:  338:
        -:  339:    typedef MapBase<BlockType> Base;
        -:  340:    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    #####:  341:    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
        -:  342:
        -:  343:    /** Column or Row constructor
        -:  344:      */
        -:  345:    EIGEN_DEVICE_FUNC
16992574*:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
16992574*:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    %%%%%:  347-block  0
  3301794:  347-block  1
  3301794:  347-block  2
16992574*:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
    %%%%%:  348-block  0
    %%%%%:  348-block  1
    %%%%%:  348-block  2
    %%%%%:  348-block  3
  3301794:  348-block  4
  3301794:  348-block  5
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
16992574*:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    %%%%%:  353-block  0
    %%%%%:  353-block  1
    %%%%%:  353-block  2
    %%%%%:  353-block  3
  3301794:  353-block  4
  3301794:  353-block  5
        -:  354:    {
16992574*:  355:      init();
10388986*:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_3MapINS_6MatrixIfLi1ELi1ELi1ELi1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELi1ELi1ELb0ELb1EEC2ERS8_l:
    #####:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    #####:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    #####:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
    %%%%%:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    #####:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    %%%%%:  353-block  0
        -:  354:    {
    #####:  355:      init();
    #####:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELi1ELin1ELb1ELb1EEC2ERS9_l:
    30240:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    30240:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    30240:  347-block  0
    30240:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
    30240:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    30240:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    30240:  353-block  0
        -:  354:    {
    30240:  355:      init();
    30240:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC2ERS4_l:
    #####:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    #####:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    %%%%%:  347-block  0
    #####:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
    %%%%%:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    #####:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    %%%%%:  353-block  0
        -:  354:    {
    #####:  355:      init();
    #####:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb1ELb1EEC2ERS3_l:
        3:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
        3:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
        3:  347-block  0
        3:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        3:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        3:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
        3:  353-block  0
        -:  354:    {
        3:  355:      init();
        3:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_9TransposeINS_3MapINS_6MatrixIfLi1ELin1ELi1ELi1ELin1EEELi0ENS_6StrideILi0ELi0EEEEEEELin1ELi1ELb1ELb1EEC2ERS9_l:
     1530:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
     1530:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
     1530:  347-block  0
     1530:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
     1530:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
     1530:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
     1530:  353-block  0
        -:  354:    {
     1530:  355:      init();
     1530:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELin1ELi1ELb1ELb1EEC2ERS9_l:
    35328:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    35328:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    35328:  347-block  0
    35328:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
    35328:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    35328:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    35328:  353-block  0
        -:  354:    {
    35328:  355:      init();
    35328:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEELi1ELi1ELb0ELb1EEC2ERS5_l:
    #####:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    #####:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    #####:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    #####:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    %%%%%:  353-block  0
        -:  354:    {
    #####:  355:      init();
    #####:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS2_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0EEELin1ELi1ELb1ELb1EEC2ERS6_l:
   392445:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
   392445:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
   392445:  347-block  0
   392445:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
   392445:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
   392445:  353-block  0
        -:  354:    {
   392445:  355:      init();
   392445:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1ELb1EEC2ERS6_l:
     1503:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
     1503:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
     1503:  347-block  0
     1503:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
     1503:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
     1503:  353-block  0
        -:  354:    {
     1503:  355:      init();
     1503:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi1ELin1ELb1ELb1EEC2ERS3_l:
     4509:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
     4509:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
     4509:  347-block  0
     4509:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
     4509:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
     4509:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
     4509:  353-block  0
        -:  354:    {
     4509:  355:      init();
     4509:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1ELb1EEC2ERS5_l:
    #####:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
    #####:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
    %%%%%:  347-block  0
    #####:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
    #####:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
    %%%%%:  353-block  0
        -:  354:    {
    #####:  355:      init();
    #####:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELi1ELin1ELb0ELb1EEC2ERS5_l:
     3060:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
     3060:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
     3060:  347-block  0
     3060:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
     3060:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
     3060:  353-block  0
        -:  354:    {
     3060:  355:      init();
     3060:  356:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEC2ERS3_l:
  9920368:  346:    inline BlockImpl_dense(XprType& xpr, Index i)
  9920368:  347:      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor)) 
  9920368:  347-block  0
  9920368:  348:                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
  9920368:  348-block  0
        -:  349:             BlockRows==1 ? 1 : xpr.rows(),
        -:  350:             BlockCols==1 ? 1 : xpr.cols()),
        -:  351:        m_xpr(xpr),
        -:  352:        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
  9920368:  353:        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
  9920368:  353-block  0
        -:  354:    {
  9920368:  355:      init();
  9920368:  356:    }
------------------
        -:  357:
        -:  358:    /** Fixed-size constructor
        -:  359:      */
        -:  360:    EIGEN_DEVICE_FUNC
        -:  361:    inline BlockImpl_dense(XprType& xpr, Index startRow, Index startCol)
        -:  362:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol)),
        -:  363:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
        -:  364:    {
        -:  365:      init();
        -:  366:    }
        -:  367:
        -:  368:    /** Dynamic-size constructor
        -:  369:      */
        -:  370:    EIGEN_DEVICE_FUNC
  152544*:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
  152544*:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
  152544*:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
        6:  375-block  0
     1503:  375-block  1
    %%%%%:  375-block  2
     1602:  375-block  3
        3:  375-block  4
        -:  376:    {
  152544*:  377:      init();
  149430*:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb0ELb1EEC2ERS7_llll:
    35328:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
    35328:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
    35328:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
    35328:  375-block  0
        -:  376:    {
    35328:  377:      init();
    35328:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_3MapIKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEELin1ELi1ELb0ELb1EEC2ERS9_llll:
    30240:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
    30240:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
    30240:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
    30240:  375-block  0
        -:  376:    {
    30240:  377:      init();
    30240:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELi1ELin1ELb1EEELi1ELin1ELb0ELb1EEC2ERSC_llll:
    30240:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
    30240:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
    30240:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
    30240:  375-block  0
        -:  376:    {
    30240:  377:      init();
    30240:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockIKNS_3MapIKNS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELi0ENS_11OuterStrideILin1EEEEELin1ELi1ELb1EEELin1ELi1ELb0ELb1EEC2ERSC_llll:
    35328:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
    35328:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
    35328:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
    35328:  375-block  0
        -:  376:    {
    35328:  377:      init();
    35328:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0EEELin1ELi1ELb0ELb1EEC2ERS5_llll:
    #####:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
    #####:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
    #####:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
    %%%%%:  375-block  0
        -:  376:    {
    #####:  377:      init();
    #####:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockIKNS2_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELi1ELb1EEELin1ELi1ELb0ELb1EEC2ERS8_llll:
     1503:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1503:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1503:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1503:  375-block  0
        -:  376:    {
     1503:  377:      init();
     1503:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELin1ELi1ELin1ELin1EEELi1ELin1ELb1EEELi1ELin1ELb0ELb1EEC2ERS5_llll:
     4509:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     4509:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     4509:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     4509:  375-block  0
        -:  376:    {
     4509:  377:      init();
     4509:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0ELb1EEC2ERS6_llll:
     1503:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1503:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1503:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1503:  375-block  0
        -:  376:    {
     1503:  377:      init();
     1503:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_5BlockINS2_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEELin1ELi1ELb0ELb1EEC2ERS7_llll:
     1536:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1536:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1536:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1536:  375-block  0
        -:  376:    {
     1536:  377:      init();
     1536:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0ELb1EEC2ERS4_llll:
       36:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
       36:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
       36:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
       36:  375-block  0
        -:  376:    {
       36:  377:      init();
       36:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS2_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEELin1ELi1ELb0ELb1EEC2ERS6_llll:
     1536:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1536:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1536:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1536:  375-block  0
        -:  376:    {
     1536:  377:      init();
     1536:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0ELb1EEC2ERS5_llll:
     3072:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     3072:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     3072:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     3072:  375-block  0
        -:  376:    {
     3072:  377:      init();
     3072:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIfLi1ELin1ELi1ELi1ELin1EEELi1ELin1ELb0ELb1EEC2ERS3_llll:
     1536:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1536:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1536:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1536:  375-block  0
        -:  376:    {
     1536:  377:      init();
     1536:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_5BlockINS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb0EEELin1ELin1ELb0ELb1EEC2ERS5_llll:
     1530:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1530:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1530:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1530:  375-block  0
        -:  376:    {
     1530:  377:      init();
     1530:  378:    }
------------------
_ZN5Eigen8internal15BlockImpl_denseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELin1ELi1ELb0ELb1EEC2ERS3_llll:
     1533:  371:    inline BlockImpl_dense(XprType& xpr,
        -:  372:          Index startRow, Index startCol,
        -:  373:          Index blockRows, Index blockCols)
     1533:  374:      : Base(xpr.data()+xpr.innerStride()*(XprTypeIsRowMajor?startCol:startRow) + xpr.outerStride()*(XprTypeIsRowMajor?startRow:startCol), blockRows, blockCols),
     1533:  375:        m_xpr(xpr), m_startRow(startRow), m_startCol(startCol)
     1533:  375-block  0
        -:  376:    {
     1533:  377:      init();
     1533:  378:    }
------------------
        -:  379:
        -:  380:    EIGEN_DEVICE_FUNC
        -:  381:    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
        -:  382:    { 
        -:  383:      return m_xpr; 
        -:  384:    }
        -:  385:
        -:  386:    EIGEN_DEVICE_FUNC
        -:  387:    XprType& nestedExpression() { return m_xpr; }
        -:  388:      
        -:  389:    /** \sa MapBase::innerStride() */
        -:  390:    EIGEN_DEVICE_FUNC
 8871070*:  391:    inline Index innerStride() const
        -:  392:    {
        -:  393:      return internal::traits<BlockType>::HasSameStorageOrderAsXprType
 7168967*:  394:             ? m_xpr.innerStride()
    %%%%%:  394-block  0
    35328:  394-block  1
    35328:  394-block  2
    30240:  394-block  3
    %%%%%:  394-block  4
     1503:  394-block  5
     1503:  394-block  6
    30240:  394-block  7
    %%%%%:  394-block  8
    %%%%%:  394-block  9
    %%%%%:  394-block 10
    %%%%%:  394-block 11
   392445:  394-block 12
     1530:  394-block 13
    %%%%%:  394-block 14
    35328:  394-block 15
    %%%%%:  394-block 16
     1503:  394-block 17
    %%%%%:  394-block 18
        6:  394-block 19
        3:  394-block 20
    %%%%%:  394-block 21
     1503:  394-block 22
    %%%%%:  394-block 23
     1530:  394-block 24
     1530:  394-block 25
        3:  394-block 26
     1503:  394-block 27
     4509:  394-block 28
    %%%%%:  394-block 29
     1503:  394-block 30
    %%%%%:  394-block 31
    %%%%%:  394-block 32
    %%%%%:  394-block 33
     1536:  394-block 34
    %%%%%:  394-block 35
     3060:  394-block 36
     1536:  394-block 37
     1536:  394-block 38
     3072:  394-block 39
      761:  394-block 40
      761:  394-block 41
    %%%%%:  394-block 42
     1530:  394-block 43
     1536:  394-block 44
     4428:  394-block 45
     4428:  394-block 46
     1536:  394-block 47
  4952691:  394-block 48
  1650897:  394-block 49
 3301794*:  395:             : m_xpr.outerStride();
    %%%%%:  395-block  0
  1650897:  395-block  1
  1650897:  395-block  2
        -:  396:    }
        -:  397:
        -:  398:    /** \sa MapBase::outerStride() */
        -:  399:    EIGEN_DEVICE_FUNC
  959327*:  400:    inline Index outerStride() const
    %%%%%:  400-block  0
    35328:  400-block  1
    35328:  400-block  2
    30240:  400-block  3
    %%%%%:  400-block  4
    %%%%%:  400-block  5
     1503:  400-block  6
     1503:  400-block  7
    30240:  400-block  8
    %%%%%:  400-block  9
    %%%%%:  400-block 10
    %%%%%:  400-block 11
    %%%%%:  400-block 12
   392445:  400-block 13
     1530:  400-block 14
    %%%%%:  400-block 15
    35328:  400-block 16
    %%%%%:  400-block 17
     1503:  400-block 18
   392445:  400-block 19
        6:  400-block 20
        3:  400-block 21
    %%%%%:  400-block 22
     1503:  400-block 23
    %%%%%:  400-block 24
     1530:  400-block 25
     1530:  400-block 26
        3:  400-block 27
     1503:  400-block 28
     4509:  400-block 29
    %%%%%:  400-block 30
    %%%%%:  400-block 31
     1503:  400-block 32
     1503:  400-block 33
    %%%%%:  400-block 34
    %%%%%:  400-block 35
    %%%%%:  400-block 36
     1530:  400-block 37
     1530:  400-block 38
     1536:  400-block 39
    %%%%%:  400-block 40
    %%%%%:  400-block 41
    %%%%%:  400-block 42
     1536:  400-block 43
     1536:  400-block 44
     3072:  400-block 45
      761:  400-block 46
      761:  400-block 47
    %%%%%:  400-block 48
     1530:  400-block 49
     1536:  400-block 50
     4428:  400-block 51
     4428:  400-block 52
     1536:  400-block 53
        -:  401:    {
        -:  402:      return m_outerStride;
        -:  403:    }
        -:  404:
        -:  405:    EIGEN_DEVICE_FUNC
        -:  406:    StorageIndex startRow() const
        -:  407:    {
        -:  408:      return m_startRow.value();
        -:  409:    }
        -:  410:
        -:  411:    EIGEN_DEVICE_FUNC
        -:  412:    StorageIndex startCol() const
        -:  413:    {
        -:  414:      return m_startCol.value();
        -:  415:    }
        -:  416:
        -:  417:  #ifndef __SUNPRO_CC
        -:  418:  // FIXME sunstudio is not friendly with the above friend...
        -:  419:  // META-FIXME there is no 'friend' keyword around here. Is this obsolete?
        -:  420:  protected:
        -:  421:  #endif
        -:  422:
        -:  423:    #ifndef EIGEN_PARSED_BY_DOXYGEN
        -:  424:    /** \internal used by allowAligned() */
        -:  425:    EIGEN_DEVICE_FUNC
        -:  426:    inline BlockImpl_dense(XprType& xpr, const Scalar* data, Index blockRows, Index blockCols)
        -:  427:      : Base(data, blockRows, blockCols), m_xpr(xpr)
        -:  428:    {
        -:  429:      init();
        -:  430:    }
        -:  431:    #endif
        -:  432:
        -:  433:  protected:
        -:  434:    EIGEN_DEVICE_FUNC
17145118*:  435:    void init()
        -:  436:    {
 6606702*:  437:      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
    %%%%%:  437-block  0
    3114*:  438:                    ? m_xpr.outerStride()
    %%%%%:  438-block  0
 6603588*:  439:                    : m_xpr.innerStride();
    %%%%%:  439-block  0
        -:  440:    }
        -:  441:
        -:  442:    XprTypeNested m_xpr;
        -:  443:    const internal::variable_if_dynamic<StorageIndex, (XprType::RowsAtCompileTime == 1 && BlockRows==1) ? 0 : Dynamic> m_startRow;
        -:  444:    const internal::variable_if_dynamic<StorageIndex, (XprType::ColsAtCompileTime == 1 && BlockCols==1) ? 0 : Dynamic> m_startCol;
        -:  445:    Index m_outerStride;
        -:  446:};
        -:  447:
        -:  448:} // end namespace internal
        -:  449:
        -:  450:} // end namespace Eigen
        -:  451:
        -:  452:#endif // EIGEN_BLOCK_H
