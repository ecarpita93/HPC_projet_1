        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/util/io.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_UTIL_IO_HPP
        -:   19:#define PIC_UTIL_IO_HPP
        -:   20:
        -:   21:#include <string>
        -:   22:
        -:   23:#include "../base.hpp"
        -:   24:
        -:   25:namespace pic {
        -:   26:
        -:   27:enum LABEL_IO_EXTENSION {IO_TMP, IO_PFM, IO_HDR, IO_EXR, IO_VOL, IO_BMP, IO_PPM, IO_TGA, IO_JPG, IO_PNG, IO_PGM, IO_NULL};
        -:   28:
        -:   29:/**
        -:   30: * @brief getLabelHDRExtension returns the file label given its file name (for HDR images).
        -:   31: * @param nameFile is a file name.
        -:   32: * @return It returns a file label.
        -:   33: */
        9:   34:PIC_INLINE LABEL_IO_EXTENSION getLabelHDRExtension(std::string nameFile)
        -:   35:{
        9:   36:    size_t posTMP = nameFile.find(".tmp");
        9:   36-block  0
        -:   37:
        9:   38:    if(posTMP != std::string::npos)	{
        -:   39:        return IO_TMP;
        -:   40:    }
        -:   41:
        9:   42:    size_t posPFM = nameFile.find(".pfm");
        9:   42-block  0
        -:   43:
        9:   44:    if(posPFM != std::string::npos)	{
        -:   45:        return IO_PFM;
        -:   46:    }
        -:   47:
        9:   48:    size_t posHDR = nameFile.find(".hdr");
        9:   48-block  0
        -:   49:
        9:   50:    if(posHDR != std::string::npos)	{
        -:   51:        return IO_HDR;
        -:   52:    }
        -:   53:
        8:   54:    size_t posPIC = nameFile.find(".pic");
        8:   54-block  0
        -:   55:
        8:   56:    if(posPIC != std::string::npos)	{
        -:   57:        return IO_HDR;
        -:   58:    }
        -:   59:
        8:   60:    size_t posEXR = nameFile.find(".exr");
        8:   60-block  0
        -:   61:
        8:   62:    if(posEXR != std::string::npos)	{
        -:   63:        return IO_EXR;
        -:   64:    }
        -:   65:
        8:   66:    size_t posVOL = nameFile.find(".vol");
        8:   66-block  0
        -:   67:
        8:   68:    if(posVOL != std::string::npos)	{
    #####:   69:        return IO_VOL;
    %%%%%:   69-block  0
        -:   70:    }
        -:   71:
        -:   72:    return IO_NULL;
        -:   73:}
        -:   74:
        -:   75:/**
        -:   76: * @brief getLabelHDRExtension returns the file label given its file name (for LDR images).
        -:   77: * @param nameFile is a file name.
        -:   78: * @return It returns a file label.
        -:   79: */
        8:   80:PIC_INLINE LABEL_IO_EXTENSION getLabelLDRExtension(std::string nameFile)
        -:   81:{
        8:   82:    size_t posBMP = nameFile.find(".bmp");
        8:   82-block  0
        -:   83:
        8:   84:    if(posBMP != std::string::npos)	{
        -:   85:        return IO_BMP;
        -:   86:    }
        -:   87:
        8:   88:    size_t posPPM = nameFile.find(".ppm");
        8:   88-block  0
        -:   89:
        8:   90:    if(posPPM != std::string::npos)	{
        -:   91:        return IO_PPM;
        -:   92:    }
        -:   93:
        8:   94:    size_t posPGM = nameFile.find(".pgm");
        8:   94-block  0
        -:   95:
        8:   96:    if(posPGM != std::string::npos)	{
        -:   97:        return IO_PGM;
        -:   98:    }
        -:   99:
        8:  100:    size_t posTGA = nameFile.find(".tga");
        8:  100-block  0
        -:  101:
        8:  102:    if(posTGA != std::string::npos)	{
        -:  103:        return IO_TGA;
        -:  104:    }
        -:  105:
        8:  106:    size_t posJPG = nameFile.find(".jpg");
        8:  106-block  0
        -:  107:
        8:  108:    if(posJPG != std::string::npos)	{
        -:  109:        return IO_JPG;
        -:  110:    }
        -:  111:
        1:  112:    posJPG = nameFile.find(".JPG");
        1:  112-block  0
        -:  113:
        1:  114:    if(posJPG != std::string::npos)	{
        -:  115:        return IO_JPG;
        -:  116:    }
        -:  117:
        1:  118:    posJPG = nameFile.find(".jpeg");
        1:  118-block  0
        -:  119:
        1:  120:    if(posJPG != std::string::npos)	{
        -:  121:        return IO_JPG;
        -:  122:    }
        -:  123:
        1:  124:    size_t posPNG = nameFile.find(".png");
        1:  124-block  0
        -:  125:
        1:  126:    if(posPNG != std::string::npos)	{
        1:  127:        return IO_PNG;
        1:  127-block  0
        -:  128:    }
        -:  129:
        -:  130:    return IO_NULL;
        -:  131:}
        -:  132:
        -:  133:} // end namespace pic
        -:  134:
        -:  135:#endif /* PIC_UTIL_IO_HPP */
        -:  136:
