        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_kuwahara.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_KUWAHARA_HPP
        -:   19:#define PIC_FILTERING_FILTER_KUWAHARA_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterKuwahara class
        -:   27: */
        -:   28:class FilterKuwahara: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:    unsigned int  kernelSize;
        -:   32:    unsigned int  halfKernelSize;
        -:   33:
        -:   34:    /**
        -:   35:     * @brief ProcessBBox
        -:   36:     * @param dst
        -:   37:     * @param src
        -:   38:     * @param box
        -:   39:     */
    #####:   40:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   41:    {
    #####:   42:        int channels = dst->channels;
        -:   43:
    #####:   44:        Image *source = src[0];
    %%%%%:   44-block  0
        -:   45:
    #####:   46:        float *buf = new float[channels * 8];
    %%%%%:   46-block  0
    %%%%%:   46-block  1
    %%%%%:   46-block  2
        -:   47:
    #####:   48:        int start = 0;
    #####:   49:        float *m00 = &buf[start];
    #####:   50:        start += channels;
    #####:   51:        float *m10 = &buf[start];
    #####:   52:        start += channels;
    #####:   53:        float *m01 = &buf[start];
    #####:   54:        start += channels;
    #####:   55:        float *m11 = &buf[start];
    #####:   56:        start += channels;
    #####:   57:        float *s00 = &buf[start];
    #####:   58:        start += channels;
    #####:   59:        float *s10 = &buf[start];
    #####:   60:        start += channels;
    #####:   61:        float *s01 = &buf[start];
    #####:   62:        start += channels;
    #####:   63:        float *s11 = &buf[start];
        -:   64:
    #####:   65:        for(int m = box->z0; m < box->z1; m++) {
    %%%%%:   65-block  0
    %%%%%:   65-block  1
    #####:   66:            for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   66-block  0
    %%%%%:   66-block  1
    %%%%%:   66-block  2
    #####:   67:                for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   67-block  0
    %%%%%:   67-block  1
    %%%%%:   67-block  2
        -:   68:                    //1D Filtering
    #####:   69:                    float mean = FLT_MAX;
    #####:   70:                    int indx;
    #####:   71:                    float tmpMean;
        -:   72:
    #####:   73:                    float *tmpDst = (*dst)(i, j, m);
        -:   74:
        -:   75:                    //First block
    #####:   76:                    BBox tmp00(i - halfKernelSize, i + 1, j - halfKernelSize, j + 1);
    %%%%%:   76-block  0
    #####:   77:                    source->getMeanVal(&tmp00, m00);
    %%%%%:   77-block  0
    #####:   78:                    source->getVarianceVal(m00, &tmp00, s00);
        -:   79:
        -:   80:                    tmpMean = 0.0f;
        -:   81:
    #####:   82:                    for(int l = 0; l < channels; l++) {
    %%%%%:   82-block  0
    #####:   83:                        tmpMean += s00[l];
    %%%%%:   83-block  0
        -:   84:                    }
        -:   85:
    #####:   86:                    if(tmpMean < mean) {
    %%%%%:   86-block  0
    #####:   87:                        mean = tmpMean;
    #####:   88:                        indx = 0;
    %%%%%:   88-block  0
        -:   89:                    }
        -:   90:
        -:   91:                    //Second block
    #####:   92:                    BBox tmp01(i, i + halfKernelSize, j - halfKernelSize, j + 1);
    %%%%%:   92-block  0
    #####:   93:                    source->getMeanVal(&tmp01, m01);
    %%%%%:   93-block  0
    #####:   94:                    source->getVarianceVal(m01, &tmp01, s01);
        -:   95:
        -:   96:                    tmpMean = 0.0f;
        -:   97:
    #####:   98:                    for(int l = 0; l < channels; l++) {
    %%%%%:   98-block  0
    #####:   99:                        tmpMean += s01[l];
    %%%%%:   99-block  0
        -:  100:                    }
        -:  101:
    #####:  102:                    if(tmpMean < mean) {
    %%%%%:  102-block  0
    #####:  103:                        mean = tmpMean;
    #####:  104:                        indx = 1;
    %%%%%:  104-block  0
        -:  105:                    }
        -:  106:
        -:  107:                    //Third block
    #####:  108:                    BBox tmp10(i - halfKernelSize, i + 1, j, j + halfKernelSize);
    %%%%%:  108-block  0
    #####:  109:                    source->getMeanVal(&tmp10, m10);
    %%%%%:  109-block  0
    #####:  110:                    source->getVarianceVal(m10, &tmp10, s10);
        -:  111:
        -:  112:                    tmpMean = 0.0f;
        -:  113:
    #####:  114:                    for(int l = 0; l < channels; l++) {
    %%%%%:  114-block  0
    #####:  115:                        tmpMean += s10[l];
    %%%%%:  115-block  0
        -:  116:                    }
        -:  117:
    #####:  118:                    if(tmpMean < mean) {
    %%%%%:  118-block  0
    #####:  119:                        mean = tmpMean;
    #####:  120:                        indx = 2;
    %%%%%:  120-block  0
        -:  121:                    }
        -:  122:
        -:  123:                    //Fourth block
    #####:  124:                    BBox tmp11(i, i + halfKernelSize, j, j + halfKernelSize);
    %%%%%:  124-block  0
    #####:  125:                    source->getMeanVal(&tmp11, m11);
    %%%%%:  125-block  0
    #####:  126:                    source->getVarianceVal(m11, &tmp11, s11);
        -:  127:
        -:  128:                    tmpMean = 0.0f;
        -:  129:
    #####:  130:                    for(int l = 0; l < channels; l++) {
    %%%%%:  130-block  0
    #####:  131:                        tmpMean += s11[l];
    %%%%%:  131-block  0
        -:  132:                    }
        -:  133:
    #####:  134:                    if(tmpMean < mean) {
    %%%%%:  134-block  0
    #####:  135:                        mean = tmpMean;
    %%%%%:  135-block  0
        -:  136:                        indx = 3;
        -:  137:                    }
        -:  138:
        -:  139:                    //final filtering
    #####:  140:                    switch(indx) {
    %%%%%:  140-block  0
        -:  141:                    case 0: {
    #####:  142:                        for(int l = 0; l < channels; l++) {
    %%%%%:  142-block  0
    #####:  143:                            tmpDst[l] = m00[l];
    %%%%%:  143-block  0
        -:  144:                        }
        -:  145:                    }
        -:  146:                    break;
        -:  147:
        -:  148:                    case 1: {
    #####:  149:                        for(int l = 0; l < channels; l++) {
    %%%%%:  149-block  0
    #####:  150:                            tmpDst[l] = m01[l];
    %%%%%:  150-block  0
        -:  151:                        }
        -:  152:                    }
        -:  153:                    break;
        -:  154:
        -:  155:                    case 2: {
    #####:  156:                        for(int l = 0; l < channels; l++) {
    %%%%%:  156-block  0
    #####:  157:                            tmpDst[l] = m10[l];
    %%%%%:  157-block  0
        -:  158:                        }
        -:  159:                    }
        -:  160:                    break;
        -:  161:
        -:  162:                    case 3: {
    #####:  163:                        for(int l = 0; l < channels; l++) {
    %%%%%:  163-block  0
    #####:  164:                            tmpDst[l] = m11[l];
    %%%%%:  164-block  0
        -:  165:                        }
        -:  166:                    }
        -:  167:                    break;
        -:  168:
    #####:  169:                    default: {
    #####:  170:                        float *tmpSrc = (*source)(i, j, m);
    #####:  171:                        for(int l = 0; l < channels; l++) {
    %%%%%:  171-block  0
    %%%%%:  171-block  1
    #####:  172:                            tmpDst[l] = tmpSrc[l];
    %%%%%:  172-block  0
        -:  173:                        }
        -:  174:                    }break;
        -:  175:                    }
        -:  176:                }
        -:  177:            }
        -:  178:        }
        -:  179:
    #####:  180:        delete[] buf;
    %%%%%:  180-block  0
    #####:  181:    }
        -:  182:
        -:  183:public:
        -:  184:    /**
        -:  185:     * @brief FilterKuwahara
        -:  186:     * @param kernelSize
        -:  187:     */
        -:  188:    FilterKuwahara(int kernelSize = 3)
        -:  189:    {
        -:  190:        update(kernelSize);
        -:  191:    }
        -:  192:
        -:  193:    /**
        -:  194:     * @brief update
        -:  195:     * @param kernelSize
        -:  196:     */
        -:  197:    void update(int kernelSize)
        -:  198:    {
        -:  199:        if(kernelSize < 3) {
        -:  200:            kernelSize = 3;
        -:  201:        }
        -:  202:
        -:  203:        this->kernelSize = kernelSize;
        -:  204:        halfKernelSize = kernelSize >> 1;
        -:  205:    }
        -:  206:
        -:  207:    /**
        -:  208:     * @brief execute
        -:  209:     * @param imgIn
        -:  210:     * @param imgOut
        -:  211:     * @param kernelSize
        -:  212:     * @return
        -:  213:     */
        -:  214:    static Image *execute(Image *imgIn, Image *imgOut, int kernelSize)
        -:  215:    {
        -:  216:        FilterKuwahara filter(kernelSize);
        -:  217:        return filter.Process(Single(imgIn), imgOut);
        -:  218:    }
        -:  219:};
        -:  220:
        -:  221:} // end namespace pic
        -:  222:
        -:  223:#endif /* PIC_FILTERING_FILTER_KUWAHARA_HPP */
        -:  224:
