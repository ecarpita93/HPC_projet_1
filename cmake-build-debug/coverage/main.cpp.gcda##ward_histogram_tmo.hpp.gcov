        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/tone_mapping/ward_histogram_tmo.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_TONE_MAPPING_WARD_HISTOGRAM_TMO_HPP
        -:   19:#define PIC_TONE_MAPPING_WARD_HISTOGRAM_TMO_HPP
        -:   20:
        -:   21:#include "../image.hpp"
        -:   22:#include "../image_vec.hpp"
        -:   23:#include "../histogram.hpp"
        -:   24:#include "../util/array.hpp"
        -:   25:#include "../filtering/filter_luminance.hpp"
        -:   26:#include "../filtering/filter_sampler_2d.hpp"
        -:   27:#include "../tone_mapping/tone_mapping_operator.hpp"
        -:   28:
        -:   29:namespace pic {
        -:   30:
        -:   31:class WardHistogramTMO: public ToneMappingOperator
        -:   32:{
        -:   33:protected:
        -:   34:
        -:   35:    /**
        -:   36:     * @brief ProcessAux
        -:   37:     * @param imgIn
        -:   38:     * @param imgOut
        -:   39:     * @return
        -:   40:     */
    #####:   41:    Image *ProcessAux(ImageVec imgIn, Image *imgOut)
        -:   42:    {
    #####:   43:        updateImage(imgIn[0]);
    %%%%%:   43-block  0
        -:   44:
    #####:   45:        images[0] = flt_lum.Process(imgIn, images[0]);
    %%%%%:   45-block  0
    $$$$$:   45-block  1
        -:   46:
    #####:   47:        int fScaleX, fScaleY;
    #####:   48:        getScaleFiltering(imgIn[0], fScaleX, fScaleY);
    %%%%%:   48-block  0
    #####:   49:        flt_smp.update(fScaleX, fScaleY, &isb);
    #####:   50:        images[1] = flt_smp.Process(Single(images[0]), images[1]);
    %%%%%:   50-block  0
        -:   51:
        -:   52:        //compute min and max luminance
    #####:   53:        float LMin, LMax;
    #####:   54:        images[1]->getMinVal(NULL, &LMin);
    %%%%%:   54-block  0
    #####:   55:        images[1]->getMaxVal(NULL, &LMax);
        -:   56:
    #####:   57:        float log_LMin = logf(LMin + epsilon);
    #####:   58:        float log_LMax = logf(LMax + epsilon);
        -:   59:
    #####:   60:        float log_LdMin = logf(LdMin + epsilon);
    #####:   61:        float log_LdMax = logf(LdMax + epsilon);
        -:   62:
    #####:   63:        float delta_Ld = LdMax - LdMin;
    #####:   64:        float delta_log_L = (log_LMax - log_LMin);
    #####:   65:        float delta_log_Ld = log_LdMax - log_LdMin;
        -:   66:
        -:   67:        //compute the histogram with ceiling
    #####:   68:        h.calculate(images[1], VS_LOG_E, nBin);
        -:   69:
    #####:   70:        if(bCeiling) {
    #####:   71:            h.ceiling(delta_log_L / (float(nBin) * delta_log_Ld));
    %%%%%:   71-block  0
        -:   72:        }
        -:   73:
    #####:   74:        Pcum = Array<unsigned int>::cumsum(h.bin, nBin, Pcum);
    %%%%%:   74-block  0
    #####:   75:        float maxPcumf = float(Pcum[nBin - 1]);
        -:   76:
    #####:   77:        for(int i = 0; i < nBin; i++) {
    %%%%%:   77-block  0
    #####:   78:            PcumNorm[i] = float(Pcum[i]) / maxPcumf;
    #####:   79:            x[i] = delta_log_L * float(i) / float(nBin - 1) + log_LMin;
    %%%%%:   79-block  0
        -:   80:        }
        -:   81:
    #####:   82:        #pragma omp parallel for
        -:   83:        for(int i = 0; i < images[0]->size(); i++) {
        -:   84:            float L_w =  images[0]->data[i];
        -:   85:
        -:   86:            float log_L_w = logf(L_w + epsilon);
        -:   87:            float Ld = expf(delta_log_Ld * Arrayf::interp(x, PcumNorm, nBin, log_L_w) + log_LdMin) - epsilon;
        -:   88:
        -:   89:            float scale = (MAX(Ld, 0.0f) - LdMin) / (delta_Ld * L_w);
        -:   90:
        -:   91:            int index = i * imgOut->channels;
        -:   92:            for(int j = 0; j < imgOut->channels; j++) {
        -:   93:                int k = index + j;
        -:   94:                imgOut->data[k] = imgIn[0]->data[k] * scale;
        -:   95:            }
        -:   96:        }
        -:   97:
    #####:   98:        imgOut->removeSpecials();
    %%%%%:   98-block  0
        -:   99:
    #####:  100:        return imgOut;
        -:  101:    }
        -:  102:
        -:  103:    /**
        -:  104:     * @brief allocate
        -:  105:     * @param nBin
        -:  106:     */
        -:  107:    void allocate(int nBin = 256)
        -:  108:    {
        -:  109:        nBin = nBin > 16 ? nBin : 256;
        -:  110:
        -:  111:        if(this->nBin == nBin) {
        -:  112:            return;
        -:  113:        }
        -:  114:
        -:  115:        releaseAux();
        -:  116:
        -:  117:        Pcum = new unsigned int[nBin];
        -:  118:        PcumNorm = new float[nBin];
        -:  119:        x = new float[nBin];
        -:  120:
        -:  121:        this->nBin = nBin;
        -:  122:    }
        -:  123:
        -:  124:    int nBin;
        -:  125:    float LdMin, LdMax;
        -:  126:    ImageSamplerBilinear isb;
        -:  127:    Histogram h;
        -:  128:    float epsilon;
        -:  129:
        -:  130:    unsigned int *Pcum;
        -:  131:    float *PcumNorm, *x;
        -:  132:
        -:  133:    bool bCeiling;
        -:  134:    FilterLuminance flt_lum;
        -:  135:    FilterSampler2D flt_smp;
        -:  136:
        -:  137:public:
        -:  138:
        -:  139:    /**
        -:  140:     * @brief WardHistogramTMO
        -:  141:     * @param nBin is the number of bins of the histogram
        -:  142:     * @param LdMin is the minimum luminance of the LDR display in cd/m^2
        -:  143:     * @param LdMax is the maximum luminance of the LDR display in cd/m^2
        -:  144:     * @param bCeiling enables histogram ceiling or not
        -:  145:     */
        -:  146:    WardHistogramTMO(int nBin = 256, float LdMin = 1.0f, float LdMax = 100.0f, bool bCeiling = true) : ToneMappingOperator()
        -:  147:    {
        -:  148:        this->Pcum = NULL;
        -:  149:        this->PcumNorm = NULL;
        -:  150:        this->x = NULL;
        -:  151:        this->nBin = 0;
        -:  152:        this->bCeiling = bCeiling;
        -:  153:
        -:  154:        images.clear();
        -:  155:        images.push_back(NULL);
        -:  156:        images.push_back(NULL);
        -:  157:
        -:  158:        update(nBin, LdMin, LdMax);
        -:  159:    }
        -:  160:
        -:  161:    ~WardHistogramTMO()
        -:  162:    {
        -:  163:        release();
        -:  164:    }
        -:  165:
        -:  166:    /**
        -:  167:     * @brief releaseAux
        -:  168:     */
    #####:  169:    void releaseAux()
        -:  170:    {
    #####:  171:        Pcum = delete_vec_s(Pcum);
    %%%%%:  171-block  0
    #####:  172:        PcumNorm = delete_vec_s(PcumNorm);
    %%%%%:  172-block  0
    #####:  173:        x = delete_vec_s(x);
    %%%%%:  173-block  0
    #####:  174:    }
        -:  175:
        -:  176:    /**
        -:  177:     * @brief update
        -:  178:     * @param nBin is the number of bins of the histogram
        -:  179:     * @param LdMin is the minimum luminance of the LDR display in cd/m^2
        -:  180:     * @param LdMax is the maximum luminance of the LDR display in cd/m^2
        -:  181:     */
        -:  182:    void update(int nBin = 256, float LdMin = 1.0f, float LdMax = 100.0f)
        -:  183:    {
        -:  184:        allocate(nBin);
        -:  185:
        -:  186:        epsilon = 1e-6f;
        -:  187:
        -:  188:        this->LdMax = LdMax > 0.0f ? LdMax : 100.0f;
        -:  189:        this->LdMin = LdMin > 0.0f ? LdMin : 1.0f;
        -:  190:
        -:  191:        if(this->LdMin > this->LdMax) {
        -:  192:            LdMin = 1.0f;
        -:  193:            LdMax = 100.0f;
        -:  194:        }
        -:  195:
        -:  196:    }
        -:  197:
        -:  198:    /**
        -:  199:     * @brief execute
        -:  200:     * @param imgIn
        -:  201:     * @param imgOut
        -:  202:     * @return
        -:  203:     */
        -:  204:    static Image* execute(Image *imgIn, Image *imgOut)
        -:  205:    {
        -:  206:        WardHistogramTMO wtmo(100, 1.0f, 200.0f);
        -:  207:        return wtmo.Process(Single(imgIn), imgOut);
        -:  208:    }
        -:  209:};
        -:  210:
        -:  211:} // end namespace pic
        -:  212:
        -:  213:#endif /* PIC_TONE_MAPPING_WARD_HISTOGRAM_TMO_HPP */
        -:  214:
