        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/colors/color_conv_xyz_to_hdrlab.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_COLORS_COLOR_CONV_XYZ_TO_HDRLAB_HPP
        -:   19:#define PIC_COLORS_COLOR_CONV_XYZ_TO_HDRLAB_HPP
        -:   20:
        -:   21:#include <math.h>
        -:   22:
        -:   23:#include "../colors/color_conv.hpp"
        -:   24:
        -:   25:namespace pic {
        -:   26:
        -:   27:/**
        -:   28: * @brief The ColorConvXYZtoHDRLAB class
        -:   29: */
        -:   30:class ColorConvXYZtoHDRLAB: public ColorConv
        -:   31:{
        -:   32:protected:
        -:   33:
        -:   34:    float Yabs, Ys, two_e, epsilon;
        -:   35:    float whitePoint[3];
        -:   36:
        -:   37:public:
        -:   38:
        -:   39:    /**
        -:   40:     * @brief ColorConvXYZtoHDRLAB
        -:   41:     */
        -:   42:    ColorConvXYZtoHDRLAB()
        -:   43:    {
        -:   44:        whitePoint[0] = 1.0f;
        -:   45:        whitePoint[1] = 1.0f;
        -:   46:        whitePoint[2] = 1.0f;
        -:   47:
        -:   48:        Ys = 0.5f;
        -:   49:        Yabs = 1.0f;
        -:   50:
        -:   51:        two_e = powf(2.0f, computeEpsilon(Ys, Yabs));
        -:   52:    }
        -:   53:
        -:   54:    /**
        -:   55:     * @brief ColorConvXYZtoHDRLAB
        -:   56:     * @param Yabs
        -:   57:     * @param whitePoint
        -:   58:     */
        -:   59:    ColorConvXYZtoHDRLAB(float Yabs, float *whitePoint)
        -:   60:    {
        -:   61:        this->Yabs = Yabs;
        -:   62:        this->whitePoint[0] = whitePoint[0];
        -:   63:        this->whitePoint[1] = whitePoint[1];
        -:   64:        this->whitePoint[2] = whitePoint[2];
        -:   65:
        -:   66:        Ys = 0.5f;
        -:   67:
        -:   68:        epsilon = computeEpsilon(Ys, Yabs);
        -:   69:        two_e = powf(2.0f, epsilon);
        -:   70:    }
        -:   71:
        -:   72:    /**
        -:   73:     * @brief direct from XYZ to HDR-CIELAB
        -:   74:     * @param colIn
        -:   75:     * @param colOut
        -:   76:     */
    #####:   77:    void direct(float *colIn, float *colOut)
        -:   78:    {
        -:   79:        //L_hdr
    #####:   80:        colOut[0]  = f(colIn[1] / whitePoint[1]);
        -:   81:
        -:   82:        //a_hdr
    #####:   83:        colOut[1] = 5.0f * (f(colIn[0] / whitePoint[0]) - f(colIn[1] / whitePoint[1]));
        -:   84:
        -:   85:        //b_hdr
    #####:   86:        colOut[2] = 2.0f * (f(colIn[1] / whitePoint[1]) - f(colIn[2] / whitePoint[2]));
    #####:   87:    }
        -:   88:
        -:   89:    /**
        -:   90:     * @brief inverse from HDR-CIELAB to XYZ
        -:   91:     * @param colIn
        -:   92:     * @param colOut
        -:   93:     */
    #####:   94:    void inverse(float *colIn, float *colOut)
        -:   95:    {
    #####:   96:        colOut[1] = whitePoint[1] * f_inv( colIn[0] );
    #####:   97:        colOut[0] = whitePoint[0] * f_inv( colIn[0] + colIn[1]/5.0f );
    #####:   98:        colOut[2] = whitePoint[2] * f_inv( colIn[0] - colIn[2]/2.0f );
    #####:   99:    }
        -:  100:
        -:  101:    /**
        -:  102:     * @brief WhitePointD65
        -:  103:     * @param whitePoint
        -:  104:     * @return
        -:  105:     */
        -:  106:    float *WhitePointD65(float *whitePoint)
        -:  107:    {
        -:  108:        if(whitePoint == NULL) {
        -:  109:            whitePoint = new float[3];
        -:  110:        }
        -:  111:
        -:  112:        whitePoint[0] = 95.047f;
        -:  113:        whitePoint[1] = 100.0f;
        -:  114:        whitePoint[2] = 108.883f;
        -:  115:
        -:  116:        return whitePoint;
        -:  117:    }
        -:  118:
        -:  119:    /**
        -:  120:     * @brief f
        -:  121:     * @param omega
        -:  122:     * @return
        -:  123:     */
    #####:  124:    float f(float omega)
        -:  125:    {
    #####:  126:        float omega_e = powf(omega, epsilon);
    #####:  127:        return (247.0f * omega_e) / (omega_e + two_e) + 0.02f;
        -:  128:    }
        -:  129:
        -:  130:    /**
        -:  131:     * @brief f_inv
        -:  132:     * @param x
        -:  133:     * @return
        -:  134:     */
    #####:  135:    float f_inv(float x)
        -:  136:    {
    #####:  137:        float omega_e = ( (x - 0.02f) * two_e ) / (247.0f + 0.02f - x);
    #####:  138:        return powf(omega_e, 1.0f / epsilon);
        -:  139:    }
        -:  140:
        -:  141:    /**
        -:  142:     * @brief computeEpsilon
        -:  143:     * @param Ys
        -:  144:     * @param Yabs
        -:  145:     * @return
        -:  146:     */
        -:  147:    static float computeEpsilon(float Ys, float Yabs)
        -:  148:    {
        -:  149:        if(Yabs <= 0.0f) {
        -:  150:            Yabs = 1.0f;
        -:  151:        }
        -:  152:
        -:  153:        if(Ys < 0.0f || Ys > 1.0f) {
        -:  154:            Ys = 0.5f;
        -:  155:        }
        -:  156:
        -:  157:        float sf = 1.25f - 0.25f * (Ys / 0.184f);
        -:  158:
        -:  159:        float lf = logf(318.0f) / logf(Yabs);
        -:  160:
        -:  161:        return 0.58f / (sf * lf);
        -:  162:    }
        -:  163:};
        -:  164:
        -:  165:} // end namespace pic
        -:  166:
        -:  167:#endif /* PIC_COLORS_COLOR_SPACE_HDRLAB_HPP */
        -:  168:
