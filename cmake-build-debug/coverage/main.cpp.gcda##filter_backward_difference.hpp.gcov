        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_backward_difference.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_BACKWARD_DIFFERENCE_HPP
        -:   19:#define PIC_FILTERING_FILTER_BACKWARD_DIFFERENCE_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterBackwardDifference class
        -:   27: */
        -:   28:class FilterBackwardDifference: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:
        -:   32:    /**
        -:   33:     * @brief f
        -:   34:     * @param data
        -:   35:     */
    #####:   36:    void f(FilterFData *data)
        -:   37:    {
    #####:   38:        float *in   = (*data->src[0])(data->x,     data->y);
    %%%%%:   38-block  0
    #####:   39:        float *inXm = (*data->src[0])(data->x + 1, data->y);
    %%%%%:   39-block  0
    #####:   40:        float *inYm = (*data->src[0])(data->x,     data->y + 1);
    %%%%%:   40-block  0
        -:   41:
    #####:   42:        for(int k = 0; k < data->dst->channels; k++) {
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    #####:   43:            int tmp = k << 1;
    #####:   44:            data->out[tmp  ]   = inXm[k] - in[k];
    #####:   45:            data->out[tmp + 1] = inYm[k] - in[k];
    %%%%%:   45-block  0
        -:   46:        }
    #####:   47:    }
        -:   48:
        -:   49:    /**
        -:   50:     * @brief ProcessBBox
        -:   51:     * @param dst
        -:   52:     * @param src
        -:   53:     * @param box
        -:   54:     *
        -:   55:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   56:    {
        -:   57:        //Filtering
        -:   58:        Image *img = src[0];
        -:   59:        int channels = img->channels;
        -:   60:
        -:   61:        for(int j = box->y0; j < box->y1; j++) {
        -:   62:
        -:   63:            for(int i = box->x0; i < box->x1; i++) {
        -:   64:
        -:   65:                float *dst_data   = (*dst)(i  , j);
        -:   66:
        -:   67:                float *img_data   = (*img)(i  , j);
        -:   68:                float *img_dataXm = (*img)(i + 1, j);
        -:   69:                float *img_dataYm = (*img)(i  , j + 1);
        -:   70:
        -:   71:                for(int k = 0; k < channels; k++) {
        -:   72:
        -:   73:                }
        -:   74:            }
        -:   75:        }
        -:   76:    }*/
        -:   77:
        -:   78:public:
        -:   79:    /**
        -:   80:     * @brief FilterBackwardDifference
        -:   81:     */
        -:   82:    FilterBackwardDifference() : Filter()
        -:   83:    {
        -:   84:
        -:   85:    }
        -:   86:
        -:   87:    /**
        -:   88:     * @brief OutputSize
        -:   89:     * @param imgIn
        -:   90:     * @param width
        -:   91:     * @param height
        -:   92:     * @param channels
        -:   93:     * @param frames
        -:   94:     */
    #####:   95:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:   96:    {
    #####:   97:        width       = imgIn[0]->width;
    #####:   98:        height      = imgIn[0]->height;
    #####:   99:        channels    = imgIn[0]->channels * 2;
    #####:  100:        frames      = imgIn[0]->frames;
    #####:  101:    }
        -:  102:
        -:  103:    /**
        -:  104:     * @brief execute
        -:  105:     * @param imgIn
        -:  106:     * @param imgOut
        -:  107:     * @return
        -:  108:     */
        -:  109:    static Image *execute(Image *imgIn, Image *imgOut)
        -:  110:    {
        -:  111:        FilterBackwardDifference filter;
        -:  112:        return filter.Process(Single(imgIn), imgOut);
        -:  113:    }
        -:  114:};
        -:  115:
        -:  116:} // end namespace pic
        -:  117:
        -:  118:#endif /* PIC_FILTERING_FILTER_BACKWARD_DIFFERENCE_HPP */
        -:  119:
