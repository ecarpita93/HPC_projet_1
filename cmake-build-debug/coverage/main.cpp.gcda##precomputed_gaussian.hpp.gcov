        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/util/precomputed_gaussian.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_UTIL_PRECOMPUTED_GAUSSIAN_HPP
        -:   19:#define PIC_UTIL_PRECOMPUTED_GAUSSIAN_HPP
        -:   20:
        -:   21:namespace pic {
        -:   22:
        -:   23:#include <math.h>
        -:   24:
        -:   25:#include "../util/array.hpp"
        -:   26:
        -:   27:/**
        -:   28: * @brief The PrecomputedGaussian class
        -:   29: */
        -:   30:class  PrecomputedGaussian
        -:   31:{
        -:   32:protected:
        -:   33:    /**
        -:   34:     * @brief precomputeCoefficients precomputes a Gaussian kernel.
        -:   35:     */
    #####:   36:    void precomputeCoefficients()
        -:   37:    {
    #####:   38:        halfKernelSize = kernelSize >> 1;
    #####:   39:        kernelSize = (halfKernelSize << 1) + 1;
        -:   40:
    #####:   41:        if(coeff != NULL) {
    %%%%%:   41-block  0
    #####:   42:            delete[] coeff;
    %%%%%:   42-block  0
    #####:   43:            coeff = NULL;
        -:   44:        }
        -:   45:
    #####:   46:        coeff = new float[kernelSize];
    %%%%%:   46-block  0
    %%%%%:   46-block  1
    %%%%%:   46-block  2
        -:   47:
    #####:   48:        float sigma_sq_2 = (2.0f * sigma * sigma);
        -:   49:
    #####:   50:        float sum = 0.0f;
    #####:   51:        for(int i = 0; i < kernelSize; i++) {
    %%%%%:   51-block  0
    #####:   52:            int i_s = i - halfKernelSize;
    #####:   53:            i_s *= i_s;
    #####:   54:            coeff[i] = expf(-float(i_s) / sigma_sq_2);
    #####:   55:            sum += coeff[i];
    %%%%%:   55-block  0
        -:   56:        }
        -:   57:
        -:   58:        //normalize the kernel
    #####:   59:        if(sum > 0.0f) {
    %%%%%:   59-block  0
    #####:   60:            Arrayf::div(coeff, kernelSize, sum);
    %%%%%:   60-block  0
        -:   61:        }
    #####:   62:    }
        -:   63:
        -:   64:public:
        -:   65:    float sigma;
        -:   66:    int	  kernelSize, halfKernelSize;
        -:   67:    float *coeff;
        -:   68:
        -:   69:    /**
        -:   70:     * @brief PrecomputedGaussian
        -:   71:     */
        -:   72:    PrecomputedGaussian()
        -:   73:    {
        -:   74:        kernelSize = halfKernelSize = 0;
        -:   75:        sigma = 0.0f;
        -:   76:        coeff = NULL;
        -:   77:    }
        -:   78:
        -:   79:    /**
        -:   80:     * @brief PrecomputedGaussian
        -:   81:     * @param sigma
        -:   82:     */
    #####:   83:    PrecomputedGaussian(float sigma)
    #####:   84:    {
    #####:   85:        coeff = NULL;
    #####:   86:        calculateKernel(sigma);
    #####:   87:    }
        -:   88:
    #####:   89:    ~PrecomputedGaussian()
    #####:   90:    {
    %%%%%:   90-block  0
    %%%%%:   90-block  1
    %%%%%:   90-block  2
    #####:   91:        if(coeff != NULL) {
    %%%%%:   91-block  0
    %%%%%:   91-block  1
    %%%%%:   91-block  2
    #####:   92:            delete[] coeff;
    #####:   93:            coeff = NULL;
    %%%%%:   93-block  0
    %%%%%:   93-block  1
    %%%%%:   93-block  2
        -:   94:        }
        -:   95:    }
        -:   96:
        -:   97:    /**
        -:   98:     * @brief calculateKernel computes a Gaussian kernel of size sigma
        -:   99:     * @param sigma
        -:  100:     */
    #####:  101:    void calculateKernel(float sigma, int kernelSize = -1)
        -:  102:    {
    #####:  103:        this->sigma = sigma;
        -:  104:
        -:  105:        //the sigma for the size of the kernel
    #####:  106:        if(kernelSize < 3) {
    #####:  107:            this->kernelSize = PrecomputedGaussian::getKernelSize(sigma);
        -:  108:        } else {
        -:  109:            this->kernelSize = kernelSize;
        -:  110:        }
        -:  111:
        -:  112:        //precompute Gaussian coefficients
    #####:  113:        precomputeCoefficients();
        -:  114:    }
        -:  115:
        -:  116:    /**
        -:  117:     * @brief KernelSize computes the size of a kernel in pixel give its sigma.
        -:  118:     * @param sigma is the sigma value of a Gaussian kernel.
        -:  119:     * @return It returns the size of the kernel in pixels.
        -:  120:     */
    #####:  121:    static int getKernelSize(float sigma)
        -:  122:    {
    #####:  123:        int kernelSize = int(ceilf(sigma * 5.0f));
    #####:  124:        return (kernelSize > 3) ? kernelSize : 3;
    %%%%%:  124-block  0
        -:  125:    }
        -:  126:};
        -:  127:
        -:  128:} // end namespace pic
        -:  129:
        -:  130:#endif /* PIC_UTIL_PRECOMPUTED_GAUSSIAN_HPP */
        -:  131:
