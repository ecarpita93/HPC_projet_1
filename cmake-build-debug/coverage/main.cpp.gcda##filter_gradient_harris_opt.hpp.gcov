        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_gradient_harris_opt.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_GRADIENT_HARRIS_OPT_HPP
        -:   19:#define PIC_FILTERING_FILTER_GRADIENT_HARRIS_OPT_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterGradientHarrisOPT class
        -:   27: */
        -:   28:class FilterGradientHarrisOPT: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:    int colorChannel;
        -:   32:
        -:   33:    /**
        -:   34:     * @brief ProcessBBox
        -:   35:     * @param dst
        -:   36:     * @param src
        -:   37:     * @param box
        -:   38:     */
        -:   39:    void ProcessBBox(Image *dst, ImageVec src, BBox *box);
        -:   40:
        -:   41:public:
        -:   42:
        -:   43:    /**
        -:   44:     * @brief FilterGradientHarrisOPT
        -:   45:     * @param colorChannel
        -:   46:     */
        -:   47:    FilterGradientHarrisOPT(int colorChannel);
        -:   48:
        -:   49:    /**
        -:   50:     * @brief update
        -:   51:     * @param colorChannel
        -:   52:     */
        -:   53:    void update(int colorChannel);
        -:   54:
        -:   55:    /**
        -:   56:     * @brief OutputSize
        -:   57:     * @param imgIn
        -:   58:     * @param width
        -:   59:     * @param height
        -:   60:     * @param channels
        -:   61:     * @param frames
        -:   62:     */
    #####:   63:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:   64:    {
    #####:   65:        width       = imgIn[0]->width;
    #####:   66:        height      = imgIn[0]->height;
    #####:   67:        channels    = 3;
    #####:   68:        frames      = imgIn[0]->frames;
    #####:   69:    }
        -:   70:
        -:   71:    /**
        -:   72:     * @brief execute
        -:   73:     * @param imgIn
        -:   74:     * @param imgOut
        -:   75:     * @param colorChannel
        -:   76:     * @return
        -:   77:     */
        -:   78:    static Image *execute(Image *imgIn, Image *imgOut = NULL, int colorChannel = 0)
        -:   79:    {
        -:   80:        FilterGradientHarrisOPT filter(colorChannel);
        -:   81:        return filter.Process(Single(imgIn), imgOut);
        -:   82:    }
        -:   83:};
        -:   84:
        -:   85:PIC_INLINE FilterGradientHarrisOPT::FilterGradientHarrisOPT(int colorChannel) : Filter()
        -:   86:{
        -:   87:    this->colorChannel = 0;
        -:   88:    update(colorChannel);
        -:   89:}
        -:   90:
        -:   91:PIC_INLINE void FilterGradientHarrisOPT::update(int colorChannel)
        -:   92:{
        -:   93:    if(colorChannel > -1) {
        -:   94:        this->colorChannel = colorChannel;
        -:   95:    }
        -:   96:}
        -:   97:
    #####:   98:PIC_INLINE void FilterGradientHarrisOPT::ProcessBBox(Image *dst, ImageVec src,
        -:   99:        BBox *box)
        -:  100:{
    #####:  101:    Image *img = src[0];
    %%%%%:  101-block  0
        -:  102:
    #####:  103:    int channel = (img->channels == 1) ? 0 : colorChannel;
    %%%%%:  103-block  0
    %%%%%:  103-block  1
        -:  104:
    #####:  105:    for(int j = box->y0; j < box->y1; j++) {
    %%%%%:  105-block  0
    %%%%%:  105-block  1
    %%%%%:  105-block  2
    #####:  106:        for(int i = box->x0; i < box->x1; i++) {
    %%%%%:  106-block  0
    %%%%%:  106-block  1
    #####:  107:            float I_x = (*img)(i + 1, j)[channel] - (*img)(i - 1, j)[channel];
    %%%%%:  107-block  0
    %%%%%:  107-block  1
    #####:  108:            float I_y = (*img)(i, j + 1)[channel] - (*img)(i, j - 1)[channel];
    %%%%%:  108-block  0
    %%%%%:  108-block  1
        -:  109:
    #####:  110:            float *dst_data = (*dst)(i, j);
    %%%%%:  110-block  0
        -:  111:
    #####:  112:            dst_data[0] = I_x * I_x;
    #####:  113:            dst_data[1] = I_y * I_y;
    #####:  114:            dst_data[2] = I_x * I_y;
    %%%%%:  114-block  0
        -:  115:        }
        -:  116:    }
    #####:  117:}
        -:  118:
        -:  119:} // end namespace pic
        -:  120:
        -:  121:#endif /* PIC_FILTERING_FILTER_GRADIENT_HARRIS_OPT_HPP */
