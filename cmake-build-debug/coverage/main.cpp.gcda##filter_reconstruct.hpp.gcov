        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_reconstruct.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_RECONSTRUCT_HPP
        -:   19:#define PIC_FILTERING_FILTER_RECONSTRUCT_HPP
        -:   20:
        -:   21:#include "../util/array.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:
        -:   25:namespace pic {
        -:   26:
        -:   27:class FilterReconstruct: public Filter
        -:   28:{
        -:   29:protected:
        -:   30:
        -:   31:    /**
        -:   32:     * @brief ProcessBBox
        -:   33:     * @param dst
        -:   34:     * @param src
        -:   35:     * @param box
        -:   36:     */
    #####:   37:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   38:    {
    #####:   39:        int channels = src[0]->channels;
    %%%%%:   39-block  0
        -:   40:
    #####:   41:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   41-block  0
    %%%%%:   41-block  1
    %%%%%:   41-block  2
        -:   42:
    #####:   43:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   43-block  0
    %%%%%:   43-block  1
    %%%%%:   43-block  2
    #####:   44:                float *tmp_ann = (*src[1])(i, j);
    %%%%%:   44-block  0
    #####:   45:                int x = int(tmp_ann[0]);
    #####:   46:                int y = int(tmp_ann[1]);
        -:   47:
    #####:   48:                float *tmp_dst = (*dst)(i, j);
    %%%%%:   48-block  0
    #####:   49:                float *tmp_src = (*src[0])(x, y);
    %%%%%:   49-block  0
        -:   50:
    #####:   51:                Arrayf::assign(tmp_src, channels, tmp_dst);
    %%%%%:   51-block  0
        -:   52:            }
        -:   53:        }
    #####:   54:    }
        -:   55:
        -:   56:public:
        -:   57:    /**
        -:   58:     * @brief FilterReconstruct
        -:   59:     */
        -:   60:    FilterReconstruct() : Filter()
        -:   61:    {
        -:   62:        minInputImages = 2;
        -:   63:    }
        -:   64:
        -:   65:    /**
        -:   66:     * @brief OutputSize
        -:   67:     * @param imgIn
        -:   68:     * @param width
        -:   69:     * @param height
        -:   70:     * @param channels
        -:   71:     * @param frames
        -:   72:     */
    #####:   73:    virtual void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:   74:    {
    #####:   75:        width       = imgIn[1]->width;
    #####:   76:        height      = imgIn[1]->height;
    #####:   77:        channels    = imgIn[1]->channels;
    #####:   78:        frames      = imgIn[1]->frames;
    #####:   79:    }
        -:   80:
        -:   81:    /**
        -:   82:     * @brief execute
        -:   83:     * @param imgIn
        -:   84:     * @param ann
        -:   85:     * @param imgOut
        -:   86:     * @return
        -:   87:     */
        -:   88:    static Image *execute(Image *imgIn, Image *ann, Image *imgOut = NULL)
        -:   89:    {
        -:   90:        FilterReconstruct fltRec;
        -:   91:        return fltRec.Process(Double(imgIn, ann), imgOut);
        -:   92:    }
        -:   93:};
        -:   94:
        -:   95:} // end namespace pic
        -:   96:
        -:   97:#endif /* PIC_FILTERING_FILTER_RECONSTRUCT_HPP */
