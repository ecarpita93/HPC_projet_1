        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/image_samplers/image_sampler_lanczos.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_IMAGE_SAMPLERS_IMAGE_SAMPLER_LANCZOS_HPP
        -:   19:#define PIC_IMAGE_SAMPLERS_IMAGE_SAMPLER_LANCZOS_HPP
        -:   20:
        -:   21:#include "../image_samplers/image_sampler.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The ImageSamplerLanczos class
        -:   27: */
        -:   28:class ImageSamplerLanczos: public ImageSampler
        -:   29:{
        -:   30:protected:
        -:   31:    float a;
        -:   32:    int a_i;
        -:   33:
        -:   34:public:
        -:   35:    /**
        -:   36:     * @brief ImageSamplerLanczos
        -:   37:     */
        -:   38:    ImageSamplerLanczos()
        -:   39:    {
        -:   40:        a = 2.0f;
        -:   41:        a_i = 2;
        -:   42:    }
        -:   43:
        -:   44:    /**
        -:   45:     * @brief ImageSamplerLanczos
        -:   46:     * @param sigma
        -:   47:     * @param direction
        -:   48:     */
        -:   49:    ImageSamplerLanczos(float a)
        -:   50:    {
        -:   51:        this->a = a;
        -:   52:        a_i = int(a);
        -:   53:    }
        -:   54:
        -:   55:    /**
        -:   56:     * @brief SampleImage samples an image in uniform coordiantes.
        -:   57:     * @param img
        -:   58:     * @param x
        -:   59:     * @param y
        -:   60:     * @param vOut
        -:   61:     */
    #####:   62:    void SampleImage(Image *img, float x, float y, float *vOut)
        -:   63:    {
    #####:   64:        float xx, yy, dx, dy;
        -:   65:
        -:   66:        //Coordiantes in [0,width-1]x[0,height-1]
    #####:   67:        x *= img->width1f;
    #####:   68:        y *= img->height1f;
        -:   69:
        -:   70:        //Coordinates without fractions
    #####:   71:        xx = floorf(x);
    #####:   72:        yy = floorf(y);
        -:   73:
        -:   74:        //Interpolation values
    #####:   75:        dx = (x - xx);
    #####:   76:        dy = (y - yy);
        -:   77:
        -:   78:        //Integer coordinates
    #####:   79:        int ix = int(xx);
    #####:   80:        int iy = int(yy);
        -:   81:
    #####:   82:        for(int k = 0; k < img->channels; k++) {
    %%%%%:   82-block  0
    %%%%%:   82-block  1
    #####:   83:            vOut[k] = 0.0f;
    %%%%%:   83-block  0
        -:   84:        }
        -:   85:
    #####:   86:        float rx, ry;
    #####:   87:        int ey, ex;
    #####:   88:        for(int j = - a_i + 1; j <= a_i; j++) {
    %%%%%:   88-block  0
    %%%%%:   88-block  1
    %%%%%:   88-block  2
    #####:   89:            ry = Lanczos(dy - float(j), a);
    #####:   90:            ey = CLAMP(iy + j, img->height);
    %%%%%:   90-block  0
    %%%%%:   90-block  1
    %%%%%:   90-block  2
        -:   91:
    #####:   92:            for(int i = - a_i + 1; i <= a_i; i++) {
    %%%%%:   92-block  0
    %%%%%:   92-block  1
    %%%%%:   92-block  2
    #####:   93:                rx = Lanczos(dx - float(i), a);
    #####:   94:                ex = CLAMP(ix + i, img->width);
    %%%%%:   94-block  0
    %%%%%:   94-block  1
    %%%%%:   94-block  2
    #####:   95:                int ind = (ey * img->width + ex) * img->channels;
        -:   96:
    #####:   97:                rx *= ry;
    #####:   98:                for(int k = 0; k < img->channels; k++) {
    %%%%%:   98-block  0
    %%%%%:   98-block  1
    #####:   99:                    vOut[k] += img->data[ind + k] * rx;
    %%%%%:   99-block  0
        -:  100:                }
        -:  101:            }
        -:  102:        }
    #####:  103:    }
        -:  104:};
        -:  105:
        -:  106:} // end namespace pic
        -:  107:
        -:  108:#endif /* PIC_IMAGE_SAMPLERS_IMAGE_SAMPLER_LANCZOS_HPP */
        -:  109:
