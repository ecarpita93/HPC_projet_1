        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_warp_2d.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_GL_FILTERING_FILTER_WARP_2D_HPP
        -:   19:#define PIC_GL_FILTERING_FILTER_WARP_2D_HPP
        -:   20:
        -:   21:#include "../util/matrix_3_x_3.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:#include "../image_samplers/image_sampler_bilinear.hpp"
        -:   25:
        -:   26:namespace pic {
        -:   27:
        -:   28:/**
        -:   29: * @brief The FilterWarp2D class
        -:   30: */
        -:   31:class FilterWarp2D: public Filter
        -:   32:{
        -:   33:protected:
        -:   34:    ImageSamplerBilinear isb;
        -:   35:    Matrix3x3 h, h_inv;
        -:   36:    int bmin[2], bmax[2];
        -:   37:    float mid[2];
        -:   38:    bool bComputeBoundingBox;
        -:   39:
        -:   40:    /**
        -:   41:     * @brief ProcessBBox
        -:   42:     * @param dst
        -:   43:     * @param src
        -:   44:     * @param box
        -:   45:     */
    #####:   46:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   47:    {
    #####:   48:        int channels = src[0]->channels;
    %%%%%:   48-block  0
        -:   49:
    #####:   50:        float pos[2], pos_out[2];
        -:   51:
    #####:   52:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   52-block  0
    %%%%%:   52-block  1
    %%%%%:   52-block  2
    #####:   53:            pos[1] = float(j + bmin[1]) - mid[1];
        -:   54:
    #####:   55:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   55-block  0
    %%%%%:   55-block  1
    #####:   56:                float *tmp_dst = (*dst)(i, j);
    %%%%%:   56-block  0
        -:   57:
    #####:   58:                pos[0] = float(i + bmin[0]) - mid[0];
        -:   59:
    #####:   60:                h_inv.projection(pos, pos_out);
    %%%%%:   60-block  0
        -:   61:
    #####:   62:                pos_out[0] += mid[0];
    #####:   63:                pos_out[1] += mid[1];
        -:   64:
    #####:   65:                if(pos_out[0] >= 0.0f && pos_out[0] <= src[0]->width1f &&
    %%%%%:   65-block  0
    %%%%%:   65-block  1
    #####:   66:                   pos_out[1] >= 0.0f && pos_out[1] <= src[0]->height1f) {
    %%%%%:   66-block  0
    #####:   67:                    isb.SampleImageUC(src[0], pos_out[0], pos_out[1], tmp_dst);
    %%%%%:   67-block  0
        -:   68:                } else {
    #####:   69:                    Arrayf::assign(0.0f, tmp_dst, channels);
    %%%%%:   69-block  0
    %%%%%:   69-block  1
        -:   70:                }
        -:   71:            }
        -:   72:        }
    #####:   73:    }
        -:   74:
        -:   75:    bool bSameSize, bCentroid;
        -:   76:
        -:   77:public:
        -:   78:
        -:   79:    /**
        -:   80:     * @brief FilterWarp2D
        -:   81:     */
        -:   82:    FilterWarp2D() : Filter()
        -:   83:    {
        -:   84:        this->bComputeBoundingBox = true;
        -:   85:        this->bCentroid = false;
        -:   86:        this->bSameSize = false;
        -:   87:
        -:   88:        h.getIdentity();
        -:   89:        h_inv.getIdentity();
        -:   90:    }
        -:   91:
        -:   92:    /**
        -:   93:     * @brief FilterWarp2D
        -:   94:     * @param h
        -:   95:     * @param bSameSize
        -:   96:     * @param bCentroid
        -:   97:     */
        -:   98:    FilterWarp2D(Matrix3x3 h, bool bSameSize = false, bool bCentroid = false) : Filter()
        -:   99:    {
        -:  100:        this->bComputeBoundingBox = true;
        -:  101:        update(h, bSameSize, bCentroid);
        -:  102:    }
        -:  103:
        -:  104:    /**
        -:  105:     * @brief getBCentroid
        -:  106:     * @return
        -:  107:     */
        -:  108:    bool getBCentroid()
        -:  109:    {
        -:  110:        return bCentroid;
        -:  111:    }
        -:  112:
        -:  113:    /**
        -:  114:     * @brief computeBoundingBox
        -:  115:     * @param h
        -:  116:     * @param bCentroid
        -:  117:     * @param width
        -:  118:     * @param height
        -:  119:     * @param bmin
        -:  120:     * @param bmax
        -:  121:     */
    #####:  122:    static void computeBoundingBox(Matrix3x3 &h, bool bCentroid,
        -:  123:                                   float width, float height,
        -:  124:                                   int *bmin, int *bmax ) {
    #####:  125:        float bbox[4][2];
    #####:  126:        float bbox_out[4][2];
        -:  127:
    #####:  128:        bbox[0][0] = 0.0f;
    #####:  129:        bbox[0][1] = 0.0f;
        -:  130:
    #####:  131:        bbox[1][0] = 0.0f;
    #####:  132:        bbox[1][1] = height;
        -:  133:
    #####:  134:        bbox[2][0] = width;
    #####:  135:        bbox[2][1] = 0.0f;
        -:  136:
    #####:  137:        bbox[3][0] = width;
    #####:  138:        bbox[3][1] = height;
        -:  139:
    #####:  140:        float mid[2];
        -:  141:
    #####:  142:        if(bCentroid) {
    %%%%%:  142-block  0
    #####:  143:            mid[0] = width  * 0.5f;
    #####:  144:            mid[1] = height * 0.5f;
    %%%%%:  144-block  0
        -:  145:        } else {
        -:  146:            mid[0] = 0.0f;
        -:  147:            mid[1] = 0.0f;
        -:  148:        }
        -:  149:
        -:  150:        //compute the bounding box
    #####:  151:        bmin[0] = 1 << 24;
    #####:  152:        bmin[1] = 1 << 24;
        -:  153:
    #####:  154:        bmax[0] = -1;
    #####:  155:        bmax[1] = -1;
        -:  156:
    #####:  157:        for(int i = 0; i < 4; i++) {
    %%%%%:  157-block  0
    %%%%%:  157-block  1
        -:  158:
    #####:  159:            bbox[i][0] -= mid[0];
    #####:  160:            bbox[i][1] -= mid[1];
        -:  161:
    #####:  162:            h.projection(&bbox[i][0], &bbox_out[i][0]);
    %%%%%:  162-block  0
        -:  163:
    #####:  164:            bbox_out[i][0] += mid[0];
    #####:  165:            bbox_out[i][1] += mid[1];
        -:  166:
    #####:  167:            int x = int(bbox_out[i][0]);
    #####:  168:            int y = int(bbox_out[i][1]);
        -:  169:
        -:  170:            //min point
    #####:  171:            bmin[0] = (x < bmin[0]) ? x : bmin[0];
    #####:  172:            bmin[1] = (y < bmin[1]) ? y : bmin[1];
        -:  173:
    #####:  174:            bmax[0] = (x > bmax[0]) ? x : bmax[0];
    #####:  175:            bmax[1] = (y > bmax[1]) ? y : bmax[1];
        -:  176:        }
        -:  177:
        -:  178:        //printf("%d %d\n", bmax[0], bmin[0], bmax[1], bmin[1]);
    #####:  179:    }
        -:  180:
        -:  181:    /**
        -:  182:     * @brief setBoundingBox
        -:  183:     * @param bmin
        -:  184:     * @param bmax
        -:  185:     */
        -:  186:    void setBoundingBox(int *bmin, int *bmax)
        -:  187:    {
        -:  188:        memcpy(this->bmin, bmin, sizeof(int) * 2);
        -:  189:        memcpy(this->bmax, bmax, sizeof(int) * 2);
        -:  190:        bComputeBoundingBox = false;
        -:  191:    }
        -:  192:
        -:  193:    /**
        -:  194:     * @brief update
        -:  195:     * @param h
        -:  196:     * @param bSameSize
        -:  197:     * @param bCentroid
        -:  198:     */
        -:  199:    void update(Matrix3x3 h, bool bSameSize, bool bCentroid = false)
        -:  200:    {
        -:  201:        this->bComputeBoundingBox = true;
        -:  202:
        -:  203:        this->bSameSize = bSameSize;
        -:  204:        this->bCentroid = bCentroid;
        -:  205:
        -:  206:        this->h = h;
        -:  207:        h.inverse(&h_inv);
        -:  208:    }
        -:  209:
        -:  210:    /**
        -:  211:     * @brief OutputSize
        -:  212:     * @param imgIn
        -:  213:     * @param width
        -:  214:     * @param height
        -:  215:     * @param channels
        -:  216:     * @param frames
        -:  217:     */
    #####:  218:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:  219:    {
    #####:  220:        if(bCentroid) {
    %%%%%:  220-block  0
    #####:  221:            mid[0] = imgIn[0]->widthf;
    %%%%%:  221-block  0
    #####:  222:            mid[1] = imgIn[0]->heightf;
    %%%%%:  222-block  0
        -:  223:        } else {
    #####:  224:            mid[0] = 0.0f;
    #####:  225:            mid[1] = 0.0f;
    %%%%%:  225-block  0
        -:  226:        }
        -:  227:
    #####:  228:        if(!bSameSize) {
    %%%%%:  228-block  0
    #####:  229:            if(bComputeBoundingBox) {
    %%%%%:  229-block  0
    #####:  230:                computeBoundingBox(h, bCentroid,
    #####:  231:                                   imgIn[0]->widthf, imgIn[0]->heightf,
    #####:  232:                                   bmin, bmax);
    %%%%%:  232-block  0
        -:  233:            }
        -:  234:
    #####:  235:            width  = bmax[0] - bmin[0];
    #####:  236:            height = bmax[1] - bmin[1];
    %%%%%:  236-block  0
        -:  237:        } else {
    #####:  238:            bmin[0] = 0;
    #####:  239:            bmin[1] = 0;
        -:  240:
    #####:  241:            bmax[0] = 0;
    #####:  242:            bmax[1] = 0;
        -:  243:
    #####:  244:            width  = imgIn[0]->width;
    %%%%%:  244-block  0
    #####:  245:            height = imgIn[0]->height;
    %%%%%:  245-block  0
        -:  246:        }
        -:  247:
    #####:  248:        frames   = imgIn[0]->frames;
    #####:  249:        channels = imgIn[0]->channels;
    #####:  250:    }
        -:  251:
        -:  252:    /**
        -:  253:     * @brief execute
        -:  254:     * @param img
        -:  255:     * @param imgOut
        -:  256:     * @param h
        -:  257:     * @param bSameSize
        -:  258:     * @param bCentroid
        -:  259:     * @return
        -:  260:     */
        -:  261:    static Image *execute(Image *img, Image *imgOut, Matrix3x3 h, bool bSameSize = false, bool bCentroid = false)
        -:  262:    {
        -:  263:        FilterWarp2D flt(h, bSameSize, bCentroid);
        -:  264:        imgOut = flt.Process(Single(img), imgOut);
        -:  265:        return imgOut;
        -:  266:    }
        -:  267:};
        -:  268:
        -:  269:} // end namespace pic
        -:  270:
        -:  271:#endif /* PIC_GL_FILTERING_FILTER_WARP_2D_HPP */
        -:  272:
