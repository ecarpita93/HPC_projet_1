        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/externals/Eigen/src/Core/Matrix.h
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// This file is part of Eigen, a lightweight C++ template library
        -:    2:// for linear algebra.
        -:    3://
        -:    4:// Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
        -:    5:// Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
        -:    6://
        -:    7:// This Source Code Form is subject to the terms of the Mozilla
        -:    8:// Public License v. 2.0. If a copy of the MPL was not distributed
        -:    9:// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   10:
        -:   11:#ifndef EIGEN_MATRIX_H
        -:   12:#define EIGEN_MATRIX_H
        -:   13:
        -:   14:namespace Eigen {
        -:   15:
        -:   16:namespace internal {
        -:   17:template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
        -:   18:struct traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
        -:   19:{
        -:   20:private:
        -:   21:  enum { size = internal::size_at_compile_time<_Rows,_Cols>::ret };
        -:   22:  typedef typename find_best_packet<_Scalar,size>::type PacketScalar;
        -:   23:  enum {
        -:   24:      row_major_bit = _Options&RowMajor ? RowMajorBit : 0,
        -:   25:      is_dynamic_size_storage = _MaxRows==Dynamic || _MaxCols==Dynamic,
        -:   26:      max_size = is_dynamic_size_storage ? Dynamic : _MaxRows*_MaxCols,
        -:   27:      default_alignment = compute_default_alignment<_Scalar,max_size>::value,
        -:   28:      actual_alignment = ((_Options&DontAlign)==0) ? default_alignment : 0,
        -:   29:      required_alignment = unpacket_traits<PacketScalar>::alignment,
        -:   30:      packet_access_bit = (packet_traits<_Scalar>::Vectorizable && (EIGEN_UNALIGNED_VECTORIZE || (actual_alignment>=required_alignment))) ? PacketAccessBit : 0
        -:   31:    };
        -:   32:    
        -:   33:public:
        -:   34:  typedef _Scalar Scalar;
        -:   35:  typedef Dense StorageKind;
        -:   36:  typedef Eigen::Index StorageIndex;
        -:   37:  typedef MatrixXpr XprKind;
        -:   38:  enum {
        -:   39:    RowsAtCompileTime = _Rows,
        -:   40:    ColsAtCompileTime = _Cols,
        -:   41:    MaxRowsAtCompileTime = _MaxRows,
        -:   42:    MaxColsAtCompileTime = _MaxCols,
        -:   43:    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,
        -:   44:    Options = _Options,
        -:   45:    InnerStrideAtCompileTime = 1,
        -:   46:    OuterStrideAtCompileTime = (Options&RowMajor) ? ColsAtCompileTime : RowsAtCompileTime,
        -:   47:    
        -:   48:    // FIXME, the following flag in only used to define NeedsToAlign in PlainObjectBase
        -:   49:    EvaluatorFlags = LinearAccessBit | DirectAccessBit | packet_access_bit | row_major_bit,
        -:   50:    Alignment = actual_alignment
        -:   51:  };
        -:   52:};
        -:   53:}
        -:   54:
        -:   55:/** \class Matrix
        -:   56:  * \ingroup Core_Module
        -:   57:  *
        -:   58:  * \brief The matrix class, also used for vectors and row-vectors
        -:   59:  *
        -:   60:  * The %Matrix class is the work-horse for all \em dense (\ref dense "note") matrices and vectors within Eigen.
        -:   61:  * Vectors are matrices with one column, and row-vectors are matrices with one row.
        -:   62:  *
        -:   63:  * The %Matrix class encompasses \em both fixed-size and dynamic-size objects (\ref fixedsize "note").
        -:   64:  *
        -:   65:  * The first three template parameters are required:
        -:   66:  * \tparam _Scalar Numeric type, e.g. float, double, int or std::complex<float>.
        -:   67:  *                 User defined scalar types are supported as well (see \ref user_defined_scalars "here").
        -:   68:  * \tparam _Rows Number of rows, or \b Dynamic
        -:   69:  * \tparam _Cols Number of columns, or \b Dynamic
        -:   70:  *
        -:   71:  * The remaining template parameters are optional -- in most cases you don't have to worry about them.
        -:   72:  * \tparam _Options A combination of either \b #RowMajor or \b #ColMajor, and of either
        -:   73:  *                 \b #AutoAlign or \b #DontAlign.
        -:   74:  *                 The former controls \ref TopicStorageOrders "storage order", and defaults to column-major. The latter controls alignment, which is required
        -:   75:  *                 for vectorization. It defaults to aligning matrices except for fixed sizes that aren't a multiple of the packet size.
        -:   76:  * \tparam _MaxRows Maximum number of rows. Defaults to \a _Rows (\ref maxrows "note").
        -:   77:  * \tparam _MaxCols Maximum number of columns. Defaults to \a _Cols (\ref maxrows "note").
        -:   78:  *
        -:   79:  * Eigen provides a number of typedefs covering the usual cases. Here are some examples:
        -:   80:  *
        -:   81:  * \li \c Matrix2d is a 2x2 square matrix of doubles (\c Matrix<double, 2, 2>)
        -:   82:  * \li \c Vector4f is a vector of 4 floats (\c Matrix<float, 4, 1>)
        -:   83:  * \li \c RowVector3i is a row-vector of 3 ints (\c Matrix<int, 1, 3>)
        -:   84:  *
        -:   85:  * \li \c MatrixXf is a dynamic-size matrix of floats (\c Matrix<float, Dynamic, Dynamic>)
        -:   86:  * \li \c VectorXf is a dynamic-size vector of floats (\c Matrix<float, Dynamic, 1>)
        -:   87:  *
        -:   88:  * \li \c Matrix2Xf is a partially fixed-size (dynamic-size) matrix of floats (\c Matrix<float, 2, Dynamic>)
        -:   89:  * \li \c MatrixX3d is a partially dynamic-size (fixed-size) matrix of double (\c Matrix<double, Dynamic, 3>)
        -:   90:  *
        -:   91:  * See \link matrixtypedefs this page \endlink for a complete list of predefined \em %Matrix and \em Vector typedefs.
        -:   92:  *
        -:   93:  * You can access elements of vectors and matrices using normal subscripting:
        -:   94:  *
        -:   95:  * \code
        -:   96:  * Eigen::VectorXd v(10);
        -:   97:  * v[0] = 0.1;
        -:   98:  * v[1] = 0.2;
        -:   99:  * v(0) = 0.3;
        -:  100:  * v(1) = 0.4;
        -:  101:  *
        -:  102:  * Eigen::MatrixXi m(10, 10);
        -:  103:  * m(0, 1) = 1;
        -:  104:  * m(0, 2) = 2;
        -:  105:  * m(0, 3) = 3;
        -:  106:  * \endcode
        -:  107:  *
        -:  108:  * This class can be extended with the help of the plugin mechanism described on the page
        -:  109:  * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_MATRIX_PLUGIN.
        -:  110:  *
        -:  111:  * <i><b>Some notes:</b></i>
        -:  112:  *
        -:  113:  * <dl>
        -:  114:  * <dt><b>\anchor dense Dense versus sparse:</b></dt>
        -:  115:  * <dd>This %Matrix class handles dense, not sparse matrices and vectors. For sparse matrices and vectors, see the Sparse module.
        -:  116:  *
        -:  117:  * Dense matrices and vectors are plain usual arrays of coefficients. All the coefficients are stored, in an ordinary contiguous array.
        -:  118:  * This is unlike Sparse matrices and vectors where the coefficients are stored as a list of nonzero coefficients.</dd>
        -:  119:  *
        -:  120:  * <dt><b>\anchor fixedsize Fixed-size versus dynamic-size:</b></dt>
        -:  121:  * <dd>Fixed-size means that the numbers of rows and columns are known are compile-time. In this case, Eigen allocates the array
        -:  122:  * of coefficients as a fixed-size array, as a class member. This makes sense for very small matrices, typically up to 4x4, sometimes up
        -:  123:  * to 16x16. Larger matrices should be declared as dynamic-size even if one happens to know their size at compile-time.
        -:  124:  *
        -:  125:  * Dynamic-size means that the numbers of rows or columns are not necessarily known at compile-time. In this case they are runtime
        -:  126:  * variables, and the array of coefficients is allocated dynamically on the heap.
        -:  127:  *
        -:  128:  * Note that \em dense matrices, be they Fixed-size or Dynamic-size, <em>do not</em> expand dynamically in the sense of a std::map.
        -:  129:  * If you want this behavior, see the Sparse module.</dd>
        -:  130:  *
        -:  131:  * <dt><b>\anchor maxrows _MaxRows and _MaxCols:</b></dt>
        -:  132:  * <dd>In most cases, one just leaves these parameters to the default values.
        -:  133:  * These parameters mean the maximum size of rows and columns that the matrix may have. They are useful in cases
        -:  134:  * when the exact numbers of rows and columns are not known are compile-time, but it is known at compile-time that they cannot
        -:  135:  * exceed a certain value. This happens when taking dynamic-size blocks inside fixed-size matrices: in this case _MaxRows and _MaxCols
        -:  136:  * are the dimensions of the original matrix, while _Rows and _Cols are Dynamic.</dd>
        -:  137:  * </dl>
        -:  138:  *
        -:  139:  * <i><b>ABI and storage layout</b></i>
        -:  140:  *
        -:  141:  * The table below summarizes the ABI of some possible Matrix instances which is fixed thorough the lifetime of Eigen 3.
        -:  142:  * <table  class="manual">
        -:  143:  * <tr><th>Matrix type</th><th>Equivalent C structure</th></tr>
        -:  144:  * <tr><td>\code Matrix<T,Dynamic,Dynamic> \endcode</td><td>\code
        -:  145:  * struct {
        -:  146:  *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
        -:  147:  *   Eigen::Index rows, cols;
        -:  148:  *  };
        -:  149:  * \endcode</td></tr>
        -:  150:  * <tr class="alt"><td>\code
        -:  151:  * Matrix<T,Dynamic,1>
        -:  152:  * Matrix<T,1,Dynamic> \endcode</td><td>\code
        -:  153:  * struct {
        -:  154:  *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
        -:  155:  *   Eigen::Index size;
        -:  156:  *  };
        -:  157:  * \endcode</td></tr>
        -:  158:  * <tr><td>\code Matrix<T,Rows,Cols> \endcode</td><td>\code
        -:  159:  * struct {
        -:  160:  *   T data[Rows*Cols];        // with (size_t(data)%A(Rows*Cols*sizeof(T)))==0
        -:  161:  *  };
        -:  162:  * \endcode</td></tr>
        -:  163:  * <tr class="alt"><td>\code Matrix<T,Dynamic,Dynamic,0,MaxRows,MaxCols> \endcode</td><td>\code
        -:  164:  * struct {
        -:  165:  *   T data[MaxRows*MaxCols];  // with (size_t(data)%A(MaxRows*MaxCols*sizeof(T)))==0
        -:  166:  *   Eigen::Index rows, cols;
        -:  167:  *  };
        -:  168:  * \endcode</td></tr>
        -:  169:  * </table>
        -:  170:  * Note that in this table Rows, Cols, MaxRows and MaxCols are all positive integers. A(S) is defined to the largest possible power-of-two
        -:  171:  * smaller to EIGEN_MAX_STATIC_ALIGN_BYTES.
        -:  172:  *
        -:  173:  * \see MatrixBase for the majority of the API methods for matrices, \ref TopicClassHierarchy,
        -:  174:  * \ref TopicStorageOrders
        -:  175:  */
        -:  176:
        -:  177:template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows, int _MaxCols>
    1647*:  178:class Matrix
    %%%%%:  178-block  0
    %%%%%:  178-block  1
    $$$$$:  178-block  2
    %%%%%:  178-block  3
    %%%%%:  178-block  4
    $$$$$:  178-block  5
    %%%%%:  178-block  6
    %%%%%:  178-block  7
     1530:  178-block  8
    %%%%%:  178-block  9
    %%%%%:  178-block 10
    $$$$$:  178-block 11
    %%%%%:  178-block 12
    %%%%%:  178-block 13
    $$$$$:  178-block 14
    $$$$$:  178-block 15
        3:  178-block 16
        3:  178-block 17
    $$$$$:  178-block 18
    %%%%%:  178-block 19
    %%%%%:  178-block 20
    $$$$$:  178-block 21
       33:  178-block 22
       33:  178-block 23
       33:  178-block 24
    $$$$$:  178-block 25
    $$$$$:  178-block 26
    $$$$$:  178-block 27
    $$$$$:  178-block 28
    $$$$$:  178-block 29
    $$$$$:  178-block 30
    $$$$$:  178-block 31
    $$$$$:  178-block 32
    $$$$$:  178-block 33
    $$$$$:  178-block 34
    $$$$$:  178-block 35
    $$$$$:  178-block 36
    $$$$$:  178-block 37
    $$$$$:  178-block 38
    %%%%%:  178-block 39
    %%%%%:  178-block 40
    $$$$$:  178-block 41
    %%%%%:  178-block 42
    %%%%%:  178-block 43
    $$$$$:  178-block 44
    $$$$$:  178-block 45
    %%%%%:  178-block 46
    %%%%%:  178-block 47
    $$$$$:  178-block 48
    %%%%%:  178-block 49
    %%%%%:  178-block 50
    $$$$$:  178-block 51
    $$$$$:  178-block 52
    $$$$$:  178-block 53
    $$$$$:  178-block 54
    $$$$$:  178-block 55
    $$$$$:  178-block 56
    $$$$$:  178-block 57
    $$$$$:  178-block 58
    $$$$$:  178-block 59
    $$$$$:  178-block 60
    $$$$$:  178-block 61
    $$$$$:  178-block 62
    $$$$$:  178-block 63
    $$$$$:  178-block 64
    $$$$$:  178-block 65
    %%%%%:  178-block 66
    %%%%%:  178-block 67
    %%%%%:  178-block 68
    %%%%%:  178-block 69
    %%%%%:  178-block 70
    %%%%%:  178-block 71
    $$$$$:  178-block 72
    $$$$$:  178-block 73
    $$$$$:  178-block 74
    $$$$$:  178-block 75
    %%%%%:  178-block 76
    %%%%%:  178-block 77
    %%%%%:  178-block 78
    $$$$$:  178-block 79
    $$$$$:  178-block 80
    $$$$$:  178-block 81
    $$$$$:  178-block 82
    %%%%%:  178-block 83
    %%%%%:  178-block 84
    %%%%%:  178-block 85
    $$$$$:  178-block 86
    $$$$$:  178-block 87
    $$$$$:  178-block 88
    %%%%%:  178-block 89
    %%%%%:  178-block 90
    %%%%%:  178-block 91
    %%%%%:  178-block 92
    $$$$$:  178-block 93
    $$$$$:  178-block 94
    $$$$$:  178-block 95
    %%%%%:  178-block 96
    %%%%%:  178-block 97
    %%%%%:  178-block 98
    $$$$$:  178-block 99
    $$$$$:  178-block 100
    $$$$$:  178-block 101
        3:  178-block 102
        3:  178-block 103
        3:  178-block 104
        3:  178-block 105
    $$$$$:  178-block 106
    $$$$$:  178-block 107
    $$$$$:  178-block 108
    $$$$$:  178-block 109
    $$$$$:  178-block 110
        -:  179:  : public PlainObjectBase<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >
        -:  180:{
        -:  181:  public:
        -:  182:
        -:  183:    /** \brief Base class typedef.
        -:  184:      * \sa PlainObjectBase
        -:  185:      */
        -:  186:    typedef PlainObjectBase<Matrix> Base;
        -:  187:
        -:  188:    enum { Options = _Options };
        -:  189:
        -:  190:    EIGEN_DENSE_PUBLIC_INTERFACE(Matrix)
        -:  191:
        -:  192:    typedef typename Base::PlainObject PlainObject;
        -:  193:
        -:  194:    using Base::base;
        -:  195:    using Base::coeffRef;
        -:  196:
        -:  197:    /**
        -:  198:      * \brief Assigns matrices to each other.
        -:  199:      *
        -:  200:      * \note This is a special case of the templated operator=. Its purpose is
        -:  201:      * to prevent a default operator= from hiding the templated operator=.
        -:  202:      *
        -:  203:      * \callgraph
        -:  204:      */
        -:  205:    EIGEN_DEVICE_FUNC
       3*:  206:    EIGEN_STRONG_INLINE Matrix& operator=(const Matrix& other)
        -:  207:    {
       3*:  208:      return Base::_set(other);
    %%%%%:  208-block  0
        3:  208-block  1
    %%%%%:  208-block  2
    %%%%%:  208-block  3
        -:  209:    }
        -:  210:
        -:  211:    /** \internal
        -:  212:      * \brief Copies the value of the expression \a other into \c *this with automatic resizing.
        -:  213:      *
        -:  214:      * *this might be resized to match the dimensions of \a other. If *this was a null matrix (not already initialized),
        -:  215:      * it will be initialized.
        -:  216:      *
        -:  217:      * Note that copying a row-vector into a vector (and conversely) is allowed.
        -:  218:      * The resizing, if any, is then done in the appropriate way so that row-vectors
        -:  219:      * remain row-vectors and vectors remain vectors.
        -:  220:      */
        -:  221:    template<typename OtherDerived>
        -:  222:    EIGEN_DEVICE_FUNC
      45*:  223:    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
        -:  224:    {
      45*:  225:      return Base::_set(other);
        3:  225-block  0
        3:  225-block  1
        3:  225-block  2
       33:  225-block  3
    %%%%%:  225-block  4
    %%%%%:  225-block  5
    %%%%%:  225-block  6
    %%%%%:  225-block  7
    %%%%%:  225-block  8
    %%%%%:  225-block  9
    %%%%%:  225-block 10
    %%%%%:  225-block 11
        -:  226:    }
        -:  227:
        -:  228:    /* Here, doxygen failed to copy the brief information when using \copydoc */
        -:  229:
        -:  230:    /**
        -:  231:      * \brief Copies the generic expression \a other into *this.
        -:  232:      * \copydetails DenseBase::operator=(const EigenBase<OtherDerived> &other)
        -:  233:      */
        -:  234:    template<typename OtherDerived>
        -:  235:    EIGEN_DEVICE_FUNC
       6*:  236:    EIGEN_STRONG_INLINE Matrix& operator=(const EigenBase<OtherDerived> &other)
        -:  237:    {
       9*:  238:      return Base::operator=(other);
        3:  238-block  0
    %%%%%:  238-block  1
        -:  239:    }
        -:  240:
        -:  241:    template<typename OtherDerived>
        -:  242:    EIGEN_DEVICE_FUNC
        -:  243:    EIGEN_STRONG_INLINE Matrix& operator=(const ReturnByValue<OtherDerived>& func)
        -:  244:    {
        -:  245:      return Base::operator=(func);
        -:  246:    }
        -:  247:
        -:  248:    /** \brief Default constructor.
        -:  249:      *
        -:  250:      * For fixed-size matrices, does nothing.
        -:  251:      *
        -:  252:      * For dynamic-size matrices, creates an empty matrix of size 0. Does not allocate any array. Such a matrix
        -:  253:      * is called a null matrix. This constructor is the unique way to create null matrices: resizing
        -:  254:      * a matrix to 0 is not supported.
        -:  255:      *
        -:  256:      * \sa resize(Index,Index)
        -:  257:      */
        -:  258:    EIGEN_DEVICE_FUNC
 1650903*:  259:    EIGEN_STRONG_INLINE Matrix() : Base()
    %%%%%:  259-block  0
        3:  259-block  1
  1650897:  259-block  2
        3:  259-block  3
    %%%%%:  259-block  4
    %%%%%:  259-block  5
    %%%%%:  259-block  6
    %%%%%:  259-block  7
        -:  260:    {
        -:  261:      Base::_check_template_params();
        -:  262:      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
        -:  263:    }
        -:  264:
        -:  265:    // FIXME is it still needed
        -:  266:    EIGEN_DEVICE_FUNC
      99*:  267:    explicit Matrix(internal::constructor_without_unaligned_array_assert)
      99*:  268:      : Base(internal::constructor_without_unaligned_array_assert())
    %%%%%:  268-block  0
       33:  268-block  1
       33:  268-block  2
       33:  268-block  3
        -:  269:    { Base::_check_template_params(); EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED }
        -:  270:
        -:  271:#if EIGEN_HAS_RVALUE_REFERENCES
        -:  272:    EIGEN_DEVICE_FUNC
    #####:  273:    Matrix(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_constructible<Scalar>::value)
    #####:  274:      : Base(std::move(other))
    %%%%%:  274-block  0
        -:  275:    {
        -:  276:      Base::_check_template_params();
        -:  277:      if (RowsAtCompileTime!=Dynamic && ColsAtCompileTime!=Dynamic)
    #####:  278:        Base::_set_noalias(other);
    %%%%%:  278-block  0
    #####:  279:    }
    %%%%%:  279-block  0
        -:  280:    EIGEN_DEVICE_FUNC
        -:  281:    Matrix& operator=(Matrix&& other) EIGEN_NOEXCEPT_IF(std::is_nothrow_move_assignable<Scalar>::value)
        -:  282:    {
        -:  283:      other.swap(*this);
        -:  284:      return *this;
        -:  285:    }
        -:  286:#endif
        -:  287:
        -:  288:    #ifndef EIGEN_PARSED_BY_DOXYGEN
        -:  289:
        -:  290:    // This constructor is for both 1x1 matrices and dynamic vectors
        -:  291:    template<typename T>
        -:  292:    EIGEN_DEVICE_FUNC
    3087*:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    3087*:  294:    {
    %%%%%:  294-block  0
        -:  295:      Base::_check_template_params();
    3087*:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    3087*:  297:    }
------------------
_ZN5Eigen6MatrixIbLin1ELi1ELi0ELin1ELi1EEC2IlEERKT_:
    #####:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    #####:  294:    {
    %%%%%:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
    #####:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    #####:  297:    }
    %%%%%:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2INS_7ProductINS_5BlockIKNS0_IfLin1ELin1ELi0ELin1ELin1EEELin1ELin1ELb1EEES1_Li0EEEEERKT_:
        3:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
        3:  294:    {
        3:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
        3:  296:      Base::template _init1<T>(x);
        3:  296-block  0
        3:  297:    }
        3:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2INS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEEKS1_EEKNS_5BlockIKNS0_IfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb0EEEEEEERKT_:
    #####:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    #####:  294:    {
    %%%%%:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
    #####:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    #####:  297:    }
    %%%%%:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2INS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEEKS1_EEKNS_3MapIS1_Li0ENS_6StrideILi0ELi0EEEEEEEEERKT_:
    #####:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    #####:  294:    {
    %%%%%:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
    #####:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    #####:  297:    }
    %%%%%:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2INS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEEKS1_EEKNS_5BlockINSD_INS0_IfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1EEELin1ELi1ELb0EEEEEEERKT_:
     1530:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
     1530:  294:    {
     1530:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
     1530:  296:      Base::template _init1<T>(x);
     1530:  296-block  0
     1530:  297:    }
     1530:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEC2INS_7ProductINS_14TriangularViewIKNS_9TransposeIKNS0_IfLin1ELin1ELi1ELin1ELin1EEEEELj1EEES1_Li0EEEEERKT_:
    #####:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    #####:  294:    {
    %%%%%:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
    #####:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    #####:  297:    }
    %%%%%:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEC2INS_7ProductINS_14TriangularViewINS0_IfLin1ELin1ELi1ELin1ELin1EEELj2EEES1_Li0EEEEERKT_:
       33:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
       33:  294:    {
       33:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
       33:  296:      Base::template _init1<T>(x);
       33:  296-block  0
       33:  297:    }
       33:  297-block  0
------------------
_ZN5Eigen6MatrixIfLi1ELin1ELi1ELi1ELin1EEC2INS_7ProductINS_5BlockINS4_INS0_IfLin1ELin1ELi1ELin1ELin1EEELi1ELin1ELb1EEELi1ELin1ELb0EEENS_14TriangularViewINS4_IS5_Lin1ELin1ELb0EEELj2EEELi0EEEEERKT_:
     1503:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
     1503:  294:    {
     1503:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
     1503:  296:      Base::template _init1<T>(x);
     1503:  296-block  0
     1503:  297:    }
     1503:  297-block  0
------------------
_ZN5Eigen6MatrixIiLin1ELi1ELi0ELin1ELi1EEC2IlEERKT_:
        3:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
        3:  294:    {
        3:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
        3:  296:      Base::template _init1<T>(x);
        3:  296-block  0
        3:  297:    }
        3:  297-block  0
------------------
_ZN5Eigen6MatrixIfLi1ELin1ELi1ELi1ELin1EEC2IlEERKT_:
        9:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
        9:  294:    {
        9:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
        9:  296:      Base::template _init1<T>(x);
        9:  296-block  0
        9:  297:    }
        9:  297-block  0
------------------
_ZN5Eigen6MatrixIlLi1ELin1ELi1ELi1ELin1EEC2IlEERKT_:
        3:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
        3:  294:    {
        3:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
        3:  296:      Base::template _init1<T>(x);
        3:  296-block  0
        3:  297:    }
        3:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2IlEERKT_:
        3:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
        3:  294:    {
        3:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
        3:  296:      Base::template _init1<T>(x);
        3:  296-block  0
        3:  297:    }
        3:  297-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELi1ELi0ELin1ELi1EEC2IiEERKT_:
    #####:  293:    EIGEN_STRONG_INLINE explicit Matrix(const T& x)
    #####:  294:    {
    %%%%%:  294-block  0
    $$$$$:  294-block  1
        -:  295:      Base::_check_template_params();
    #####:  296:      Base::template _init1<T>(x);
    %%%%%:  296-block  0
    #####:  297:    }
    %%%%%:  297-block  0
------------------
        -:  298:
        -:  299:    template<typename T0, typename T1>
        -:  300:    EIGEN_DEVICE_FUNC
      36*:  301:    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)
      36*:  302:    {
        -:  303:      Base::_check_template_params();
      36*:  304:      Base::template _init2<T0,T1>(x, y);
      36*:  305:    }
------------------
_ZN5Eigen6MatrixIfLin1ELin1ELi1ELin1ELin1EEC2IllEERKT_RKT0_:
       33:  301:    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)
       33:  302:    {
       33:  302-block  0
    $$$$$:  302-block  1
        -:  303:      Base::_check_template_params();
       33:  304:      Base::template _init2<T0,T1>(x, y);
       33:  304-block  0
       33:  305:    }
       33:  305-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEC2IllEERKT_RKT0_:
        3:  301:    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)
        3:  302:    {
        3:  302-block  0
    $$$$$:  302-block  1
        -:  303:      Base::_check_template_params();
        3:  304:      Base::template _init2<T0,T1>(x, y);
        3:  304-block  0
        3:  305:    }
        3:  305-block  0
------------------
_ZN5Eigen6MatrixIfLin1ELin1ELi0ELin1ELin1EEC2IiiEERKT_RKT0_:
    #####:  301:    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)
    #####:  302:    {
    %%%%%:  302-block  0
    $$$$$:  302-block  1
        -:  303:      Base::_check_template_params();
    #####:  304:      Base::template _init2<T0,T1>(x, y);
    %%%%%:  304-block  0
    #####:  305:    }
    %%%%%:  305-block  0
------------------
        -:  306:    #else
        -:  307:    /** \brief Constructs a fixed-sized matrix initialized with coefficients starting at \a data */
        -:  308:    EIGEN_DEVICE_FUNC
        -:  309:    explicit Matrix(const Scalar *data);
        -:  310:
        -:  311:    /** \brief Constructs a vector or row-vector with given dimension. \only_for_vectors
        -:  312:      *
        -:  313:      * This is useful for dynamic-size vectors. For fixed-size vectors,
        -:  314:      * it is redundant to pass these parameters, so one should use the default constructor
        -:  315:      * Matrix() instead.
        -:  316:      * 
        -:  317:      * \warning This constructor is disabled for fixed-size \c 1x1 matrices. For instance,
        -:  318:      * calling Matrix<double,1,1>(1) will call the initialization constructor: Matrix(const Scalar&).
        -:  319:      * For fixed-size \c 1x1 matrices it is therefore recommended to use the default
        -:  320:      * constructor Matrix() instead, especially when using one of the non standard
        -:  321:      * \c EIGEN_INITIALIZE_MATRICES_BY_{ZERO,\c NAN} macros (see \ref TopicPreprocessorDirectives).
        -:  322:      */
        -:  323:    EIGEN_STRONG_INLINE explicit Matrix(Index dim);
        -:  324:    /** \brief Constructs an initialized 1x1 matrix with the given coefficient */
        -:  325:    Matrix(const Scalar& x);
        -:  326:    /** \brief Constructs an uninitialized matrix with \a rows rows and \a cols columns.
        -:  327:      *
        -:  328:      * This is useful for dynamic-size matrices. For fixed-size matrices,
        -:  329:      * it is redundant to pass these parameters, so one should use the default constructor
        -:  330:      * Matrix() instead.
        -:  331:      * 
        -:  332:      * \warning This constructor is disabled for fixed-size \c 1x2 and \c 2x1 vectors. For instance,
        -:  333:      * calling Matrix2f(2,1) will call the initialization constructor: Matrix(const Scalar& x, const Scalar& y).
        -:  334:      * For fixed-size \c 1x2 or \c 2x1 vectors it is therefore recommended to use the default
        -:  335:      * constructor Matrix() instead, especially when using one of the non standard
        -:  336:      * \c EIGEN_INITIALIZE_MATRICES_BY_{ZERO,\c NAN} macros (see \ref TopicPreprocessorDirectives).
        -:  337:      */
        -:  338:    EIGEN_DEVICE_FUNC
        -:  339:    Matrix(Index rows, Index cols);
        -:  340:    
        -:  341:    /** \brief Constructs an initialized 2D vector with given coefficients */
        -:  342:    Matrix(const Scalar& x, const Scalar& y);
        -:  343:    #endif
        -:  344:
        -:  345:    /** \brief Constructs an initialized 3D vector with given coefficients */
        -:  346:    EIGEN_DEVICE_FUNC
        -:  347:    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
        -:  348:    {
        -:  349:      Base::_check_template_params();
        -:  350:      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
        -:  351:      m_storage.data()[0] = x;
        -:  352:      m_storage.data()[1] = y;
        -:  353:      m_storage.data()[2] = z;
        -:  354:    }
        -:  355:    /** \brief Constructs an initialized 4D vector with given coefficients */
        -:  356:    EIGEN_DEVICE_FUNC
        -:  357:    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)
        -:  358:    {
        -:  359:      Base::_check_template_params();
        -:  360:      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 4)
        -:  361:      m_storage.data()[0] = x;
        -:  362:      m_storage.data()[1] = y;
        -:  363:      m_storage.data()[2] = z;
        -:  364:      m_storage.data()[3] = w;
        -:  365:    }
        -:  366:
        -:  367:
        -:  368:    /** \brief Copy constructor */
        -:  369:    EIGEN_DEVICE_FUNC
    #####:  370:    EIGEN_STRONG_INLINE Matrix(const Matrix& other) : Base(other)
    %%%%%:  370-block  0
        -:  371:    { }
        -:  372:
        -:  373:    /** \brief Copy constructor for generic expressions.
        -:  374:      * \sa MatrixBase::operator=(const EigenBase<OtherDerived>&)
        -:  375:      */
        -:  376:    template<typename OtherDerived>
        -:  377:    EIGEN_DEVICE_FUNC
      42*:  378:    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)
      42*:  379:      : Base(other.derived())
    %%%%%:  379-block  0
        3:  379-block  1
      39*:  380:    { }
       33:  380-block  0
    %%%%%:  380-block  1
        3:  380-block  2
        3:  380-block  3
        -:  381:
11988959*:  382:    EIGEN_DEVICE_FUNC inline Index innerStride() const { return 1; }
    %%%%%:  382-block  0
    %%%%%:  382-block  1
     1503:  382-block  2
     1503:  382-block  3
    %%%%%:  382-block  4
    %%%%%:  382-block  5
    %%%%%:  382-block  6
    %%%%%:  382-block  7
    %%%%%:  382-block  8
   392445:  382-block  9
     1530:  382-block 10
    %%%%%:  382-block 11
    %%%%%:  382-block 12
    %%%%%:  382-block 13
     1503:  382-block 14
    %%%%%:  382-block 15
        6:  382-block 16
        3:  382-block 17
    %%%%%:  382-block 18
     1503:  382-block 19
    %%%%%:  382-block 20
     1530:  382-block 21
     1530:  382-block 22
        3:  382-block 23
     1503:  382-block 24
     4509:  382-block 25
    %%%%%:  382-block 26
     1503:  382-block 27
    %%%%%:  382-block 28
    %%%%%:  382-block 29
    %%%%%:  382-block 30
     1536:  382-block 31
    %%%%%:  382-block 32
     3060:  382-block 33
     1536:  382-block 34
     1536:  382-block 35
     3072:  382-block 36
      761:  382-block 37
      761:  382-block 38
    %%%%%:  382-block 39
    %%%%%:  382-block 40
     1530:  382-block 41
     1536:  382-block 42
     4428:  382-block 43
     4428:  382-block 44
     1536:  382-block 45
  3301794:  382-block 46
  3301794:  382-block 47
  4952691:  382-block 48
14885737*:  383:    EIGEN_DEVICE_FUNC inline Index outerStride() const { return this->innerSize(); }
    %%%%%:  383-block  0
    %%%%%:  383-block  1
       63:  383-block  2
    %%%%%:  383-block  3
        3:  383-block  4
    %%%%%:  383-block  5
       63:  383-block  6
    %%%%%:  383-block  7
       63:  383-block  8
        3:  383-block  9
     1536:  383-block 10
    %%%%%:  383-block 11
    %%%%%:  383-block 12
     4509:  383-block 13
    %%%%%:  383-block 14
    %%%%%:  383-block 15
    %%%%%:  383-block 16
       36:  383-block 17
        3:  383-block 18
     1536:  383-block 19
        6:  383-block 20
     1503:  383-block 21
     1533:  383-block 22
    %%%%%:  383-block 23
  9920368:  383-block 24
     1602:  383-block 25
       36:  383-block 26
  1650897:  383-block 27
  1650897:  383-block 28
        3:  383-block 29
        3:  383-block 30
    %%%%%:  383-block 31
    %%%%%:  383-block 32
        3:  383-block 33
        -:  384:
        -:  385:    /////////// Geometry module ///////////
        -:  386:
        -:  387:    template<typename OtherDerived>
        -:  388:    EIGEN_DEVICE_FUNC
        -:  389:    explicit Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r);
        -:  390:    template<typename OtherDerived>
        -:  391:    EIGEN_DEVICE_FUNC
        -:  392:    Matrix& operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r);
        -:  393:
        -:  394:    // allow to extend Matrix outside Eigen
        -:  395:    #ifdef EIGEN_MATRIX_PLUGIN
        -:  396:    #include EIGEN_MATRIX_PLUGIN
        -:  397:    #endif
        -:  398:
        -:  399:  protected:
        -:  400:    template <typename Derived, typename OtherDerived, bool IsVector>
        -:  401:    friend struct internal::conservative_resize_like_impl;
        -:  402:
        -:  403:    using Base::m_storage;
        -:  404:};
        -:  405:
        -:  406:/** \defgroup matrixtypedefs Global matrix typedefs
        -:  407:  *
        -:  408:  * \ingroup Core_Module
        -:  409:  *
        -:  410:  * Eigen defines several typedef shortcuts for most common matrix and vector types.
        -:  411:  *
        -:  412:  * The general patterns are the following:
        -:  413:  *
        -:  414:  * \c MatrixSizeType where \c Size can be \c 2,\c 3,\c 4 for fixed size square matrices or \c X for dynamic size,
        -:  415:  * and where \c Type can be \c i for integer, \c f for float, \c d for double, \c cf for complex float, \c cd
        -:  416:  * for complex double.
        -:  417:  *
        -:  418:  * For example, \c Matrix3d is a fixed-size 3x3 matrix type of doubles, and \c MatrixXf is a dynamic-size matrix of floats.
        -:  419:  *
        -:  420:  * There are also \c VectorSizeType and \c RowVectorSizeType which are self-explanatory. For example, \c Vector4cf is
        -:  421:  * a fixed-size vector of 4 complex floats.
        -:  422:  *
        -:  423:  * \sa class Matrix
        -:  424:  */
        -:  425:
        -:  426:#define EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, Size, SizeSuffix)   \
        -:  427:/** \ingroup matrixtypedefs */                                    \
        -:  428:typedef Matrix<Type, Size, Size> Matrix##SizeSuffix##TypeSuffix;  \
        -:  429:/** \ingroup matrixtypedefs */                                    \
        -:  430:typedef Matrix<Type, Size, 1>    Vector##SizeSuffix##TypeSuffix;  \
        -:  431:/** \ingroup matrixtypedefs */                                    \
        -:  432:typedef Matrix<Type, 1, Size>    RowVector##SizeSuffix##TypeSuffix;
        -:  433:
        -:  434:#define EIGEN_MAKE_FIXED_TYPEDEFS(Type, TypeSuffix, Size)         \
        -:  435:/** \ingroup matrixtypedefs */                                    \
        -:  436:typedef Matrix<Type, Size, Dynamic> Matrix##Size##X##TypeSuffix;  \
        -:  437:/** \ingroup matrixtypedefs */                                    \
        -:  438:typedef Matrix<Type, Dynamic, Size> Matrix##X##Size##TypeSuffix;
        -:  439:
        -:  440:#define EIGEN_MAKE_TYPEDEFS_ALL_SIZES(Type, TypeSuffix) \
        -:  441:EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, 2, 2) \
        -:  442:EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, 3, 3) \
        -:  443:EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, 4, 4) \
        -:  444:EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, Dynamic, X) \
        -:  445:EIGEN_MAKE_FIXED_TYPEDEFS(Type, TypeSuffix, 2) \
        -:  446:EIGEN_MAKE_FIXED_TYPEDEFS(Type, TypeSuffix, 3) \
        -:  447:EIGEN_MAKE_FIXED_TYPEDEFS(Type, TypeSuffix, 4)
        -:  448:
        -:  449:EIGEN_MAKE_TYPEDEFS_ALL_SIZES(int,                  i)
        -:  450:EIGEN_MAKE_TYPEDEFS_ALL_SIZES(float,                f)
        -:  451:EIGEN_MAKE_TYPEDEFS_ALL_SIZES(double,               d)
        -:  452:EIGEN_MAKE_TYPEDEFS_ALL_SIZES(std::complex<float>,  cf)
        -:  453:EIGEN_MAKE_TYPEDEFS_ALL_SIZES(std::complex<double>, cd)
        -:  454:
        -:  455:#undef EIGEN_MAKE_TYPEDEFS_ALL_SIZES
        -:  456:#undef EIGEN_MAKE_TYPEDEFS
        -:  457:#undef EIGEN_MAKE_FIXED_TYPEDEFS
        -:  458:
        -:  459:} // end namespace Eigen
        -:  460:
        -:  461:#endif // EIGEN_MATRIX_H
