        -:    0:Source:/usr/include/c++/9/bits/move.h
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  /**
        -:   42:   *  @brief Same as C++11 std::addressof
        -:   43:   *  @ingroup utilities
        -:   44:   */
        -:   45:  template<typename _Tp>
        -:   46:    inline _GLIBCXX_CONSTEXPR _Tp*
     986*:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
      381:   47-block  0
    $$$$$:   47-block  1
    %%%%%:   47-block  2
    %%%%%:   47-block  3
    %%%%%:   47-block  4
    %%%%%:   47-block  5
    %%%%%:   47-block  6
    %%%%%:   47-block  7
    %%%%%:   47-block  8
    %%%%%:   47-block  9
      381:   47-block 10
    $$$$$:   47-block 11
        7:   47-block 12
    %%%%%:   47-block 13
    %%%%%:   47-block 14
        7:   47-block 15
    %%%%%:   47-block 16
    %%%%%:   47-block 17
    %%%%%:   47-block 18
    %%%%%:   47-block 19
    %%%%%:   47-block 20
      210:   47-block 21
        -:   48:    { return __builtin_addressof(__r); }
        -:   49:
        -:   50:#if __cplusplus >= 201103L
        -:   51:
        -:   52:_GLIBCXX_END_NAMESPACE_VERSION
        -:   53:} // namespace
        -:   54:
        -:   55:#include <type_traits> // Brings in std::declval too.
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup utilities
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /**
        -:   67:   *  @brief  Forward an lvalue.
        -:   68:   *  @return The parameter cast to the specified type.
        -:   69:   *
        -:   70:   *  This function is used to implement "perfect forwarding".
        -:   71:   */
        -:   72:  template<typename _Tp>
        -:   73:    constexpr _Tp&&
     400*:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       24:   74-block  0
       24:   74-block  1
       24:   74-block  2
    %%%%%:   74-block  3
    %%%%%:   74-block  4
    %%%%%:   74-block  5
    %%%%%:   74-block  6
    %%%%%:   74-block  7
    %%%%%:   74-block  8
    %%%%%:   74-block  9
    %%%%%:   74-block 10
    %%%%%:   74-block 11
    %%%%%:   74-block 12
    %%%%%:   74-block 13
    %%%%%:   74-block 14
    %%%%%:   74-block 15
    %%%%%:   74-block 16
    %%%%%:   74-block 17
    %%%%%:   74-block 18
    %%%%%:   74-block 19
    %%%%%:   74-block 20
    %%%%%:   74-block 21
    %%%%%:   74-block 22
    %%%%%:   74-block 23
    %%%%%:   74-block 24
    %%%%%:   74-block 25
    %%%%%:   74-block 26
    %%%%%:   74-block 27
    %%%%%:   74-block 28
    %%%%%:   74-block 29
    %%%%%:   74-block 30
    %%%%%:   74-block 31
    %%%%%:   74-block 32
    %%%%%:   74-block 33
    %%%%%:   74-block 34
    %%%%%:   74-block 35
    %%%%%:   74-block 36
    %%%%%:   74-block 37
    %%%%%:   74-block 38
    %%%%%:   74-block 39
    %%%%%:   74-block 40
    %%%%%:   74-block 41
    %%%%%:   74-block 42
    %%%%%:   74-block 43
    %%%%%:   74-block 44
    %%%%%:   74-block 45
    %%%%%:   74-block 46
    %%%%%:   74-block 47
    %%%%%:   74-block 48
    %%%%%:   74-block 49
    %%%%%:   74-block 50
    %%%%%:   74-block 51
    %%%%%:   74-block 52
    %%%%%:   74-block 53
    %%%%%:   74-block 54
    %%%%%:   74-block 55
    %%%%%:   74-block 56
    %%%%%:   74-block 57
    %%%%%:   74-block 58
    %%%%%:   74-block 59
    %%%%%:   74-block 60
    %%%%%:   74-block 61
    %%%%%:   74-block 62
    %%%%%:   74-block 63
    %%%%%:   74-block 64
    %%%%%:   74-block 65
    %%%%%:   74-block 66
        3:   74-block 67
    %%%%%:   74-block 68
    %%%%%:   74-block 69
    %%%%%:   74-block 70
    %%%%%:   74-block 71
    %%%%%:   74-block 72
    %%%%%:   74-block 73
    %%%%%:   74-block 74
    %%%%%:   74-block 75
       24:   74-block 76
    %%%%%:   74-block 77
    %%%%%:   74-block 78
        7:   74-block 79
    %%%%%:   74-block 80
    %%%%%:   74-block 81
    %%%%%:   74-block 82
    %%%%%:   74-block 83
    %%%%%:   74-block 84
       24:   74-block 85
    %%%%%:   74-block 86
      186:   74-block 87
        6:   74-block 88
        3:   74-block 89
    %%%%%:   74-block 90
    %%%%%:   74-block 91
    %%%%%:   74-block 92
    %%%%%:   74-block 93
        3:   74-block 94
       24:   74-block 95
       24:   74-block 96
        -:   75:    { return static_cast<_Tp&&>(__t); }
        -:   76:
        -:   77:  /**
        -:   78:   *  @brief  Forward an rvalue.
        -:   79:   *  @return The parameter cast to the specified type.
        -:   80:   *
        -:   81:   *  This function is used to implement "perfect forwarding".
        -:   82:   */
        -:   83:  template<typename _Tp>
        -:   84:    constexpr _Tp&&
        -:   85:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   86:    {
        -:   87:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   88:		    " substituting _Tp is an lvalue reference type");
        -:   89:      return static_cast<_Tp&&>(__t);
        -:   90:    }
        -:   91:
        -:   92:  /**
        -:   93:   *  @brief  Convert a value to an rvalue.
        -:   94:   *  @param  __t  A thing of arbitrary type.
        -:   95:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   96:  */
        -:   97:  template<typename _Tp>
        -:   98:    constexpr typename std::remove_reference<_Tp>::type&&
     180*:   99:    move(_Tp&& __t) noexcept
       24:   99-block  0
    %%%%%:   99-block  1
    %%%%%:   99-block  2
    %%%%%:   99-block  3
    %%%%%:   99-block  4
    %%%%%:   99-block  5
    %%%%%:   99-block  6
    %%%%%:   99-block  7
    %%%%%:   99-block  8
    %%%%%:   99-block  9
    %%%%%:   99-block 10
    %%%%%:   99-block 11
    %%%%%:   99-block 12
    %%%%%:   99-block 13
    %%%%%:   99-block 14
    %%%%%:   99-block 15
    %%%%%:   99-block 16
    %%%%%:   99-block 17
    %%%%%:   99-block 18
    %%%%%:   99-block 19
    %%%%%:   99-block 20
    %%%%%:   99-block 21
    %%%%%:   99-block 22
    %%%%%:   99-block 23
    %%%%%:   99-block 24
    %%%%%:   99-block 25
    %%%%%:   99-block 26
    %%%%%:   99-block 27
    %%%%%:   99-block 28
    %%%%%:   99-block 29
    %%%%%:   99-block 30
    %%%%%:   99-block 31
    %%%%%:   99-block 32
    %%%%%:   99-block 33
    %%%%%:   99-block 34
    %%%%%:   99-block 35
    %%%%%:   99-block 36
    %%%%%:   99-block 37
    %%%%%:   99-block 38
    %%%%%:   99-block 39
    %%%%%:   99-block 40
    %%%%%:   99-block 41
    %%%%%:   99-block 42
    %%%%%:   99-block 43
    %%%%%:   99-block 44
    %%%%%:   99-block 45
    %%%%%:   99-block 46
    %%%%%:   99-block 47
    %%%%%:   99-block 48
    %%%%%:   99-block 49
    %%%%%:   99-block 50
        7:   99-block 51
    %%%%%:   99-block 52
    %%%%%:   99-block 53
       24:   99-block 54
    %%%%%:   99-block 55
    $$$$$:   99-block 56
    %%%%%:   99-block 57
        3:   99-block 58
    %%%%%:   99-block 59
    %%%%%:   99-block 60
    %%%%%:   99-block 61
    %%%%%:   99-block 62
    %%%%%:   99-block 63
        7:   99-block 64
        1:   99-block 65
        1:   99-block 66
        1:   99-block 67
    %%%%%:   99-block 68
    %%%%%:   99-block 69
    %%%%%:   99-block 70
    %%%%%:   99-block 71
    %%%%%:   99-block 72
    %%%%%:   99-block 73
    %%%%%:   99-block 74
    %%%%%:   99-block 75
    %%%%%:   99-block 76
    %%%%%:   99-block 77
    %%%%%:   99-block 78
    %%%%%:   99-block 79
    %%%%%:   99-block 80
    %%%%%:   99-block 81
    %%%%%:   99-block 82
    %%%%%:   99-block 83
    %%%%%:   99-block 84
    %%%%%:   99-block 85
    %%%%%:   99-block 86
    %%%%%:   99-block 87
    %%%%%:   99-block 88
    %%%%%:   99-block 89
        7:   99-block 90
    %%%%%:   99-block 91
    %%%%%:   99-block 92
    %%%%%:   99-block 93
       24:   99-block 94
       21:   99-block 95
        2:   99-block 96
    %%%%%:   99-block 97
        1:   99-block 98
    %%%%%:   99-block 99
    %%%%%:   99-block 100
    %%%%%:   99-block 101
        1:   99-block 102
        1:   99-block 103
    %%%%%:   99-block 104
    %%%%%:   99-block 105
    %%%%%:   99-block 106
    %%%%%:   99-block 107
    %%%%%:   99-block 108
    %%%%%:   99-block 109
    %%%%%:   99-block 110
    %%%%%:   99-block 111
    %%%%%:   99-block 112
        7:   99-block 113
    %%%%%:   99-block 114
    %%%%%:   99-block 115
    %%%%%:   99-block 116
    %%%%%:   99-block 117
        7:   99-block 118
        7:   99-block 119
        4:   99-block 120
    %%%%%:   99-block 121
        7:   99-block 122
    %%%%%:   99-block 123
    %%%%%:   99-block 124
    %%%%%:   99-block 125
    %%%%%:   99-block 126
    %%%%%:   99-block 127
    %%%%%:   99-block 128
    %%%%%:   99-block 129
    %%%%%:   99-block 130
    %%%%%:   99-block 131
    %%%%%:   99-block 132
    %%%%%:   99-block 133
    %%%%%:   99-block 134
    %%%%%:   99-block 135
    %%%%%:   99-block 136
    %%%%%:   99-block 137
    %%%%%:   99-block 138
    %%%%%:   99-block 139
    %%%%%:   99-block 140
        -:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        -:  101:
        -:  102:
        -:  103:  template<typename _Tp>
        -:  104:    struct __move_if_noexcept_cond
        -:  105:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  106:                    is_copy_constructible<_Tp>>::type { };
        -:  107:
        -:  108:  /**
        -:  109:   *  @brief  Conditionally convert a value to an rvalue.
        -:  110:   *  @param  __x  A thing of arbitrary type.
        -:  111:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  112:   *
        -:  113:   *  Same as std::move unless the type's move constructor could throw and the
        -:  114:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  115:   */
        -:  116:  template<typename _Tp>
        -:  117:    constexpr typename
        -:  118:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  119:    move_if_noexcept(_Tp& __x) noexcept
        -:  120:    { return std::move(__x); }
        -:  121:
        -:  122:  // declval, from type_traits.
        -:  123:
        -:  124:#if __cplusplus > 201402L
        -:  125:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:  // 2296. std::addressof should be constexpr
        -:  127:# define __cpp_lib_addressof_constexpr 201603
        -:  128:#endif
        -:  129:  /**
        -:  130:   *  @brief Returns the actual address of the object or function
        -:  131:   *         referenced by r, even in the presence of an overloaded
        -:  132:   *         operator&.
        -:  133:   *  @param  __r  Reference to an object or function.
        -:  134:   *  @return   The actual address.
        -:  135:  */
        -:  136:  template<typename _Tp>
        -:  137:    inline _GLIBCXX17_CONSTEXPR _Tp*
     842*:  138:    addressof(_Tp& __r) noexcept
     814*:  139:    { return std::__addressof(__r); }
    $$$$$:  139-block  0
        7:  139-block  1
        7:  139-block  2
    %%%%%:  139-block  3
    %%%%%:  139-block  4
    $$$$$:  139-block  5
        7:  139-block  6
    %%%%%:  139-block  7
    %%%%%:  139-block  8
    $$$$$:  139-block  9
        3:  139-block 10
    %%%%%:  139-block 11
    $$$$$:  139-block 12
    %%%%%:  139-block 13
    %%%%%:  139-block 14
    %%%%%:  139-block 15
    %%%%%:  139-block 16
    $$$$$:  139-block 17
        7:  139-block 18
        7:  139-block 19
        7:  139-block 20
        7:  139-block 21
        7:  139-block 22
        1:  139-block 23
        1:  139-block 24
    $$$$$:  139-block 25
    $$$$$:  139-block 26
    $$$$$:  139-block 27
    $$$$$:  139-block 28
    $$$$$:  139-block 29
    $$$$$:  139-block 30
    %%%%%:  139-block 31
    $$$$$:  139-block 32
    %%%%%:  139-block 33
    $$$$$:  139-block 34
    %%%%%:  139-block 35
    $$$$$:  139-block 36
    %%%%%:  139-block 37
    $$$$$:  139-block 38
    %%%%%:  139-block 39
    $$$$$:  139-block 40
        7:  139-block 41
        7:  139-block 42
    $$$$$:  139-block 43
      612:  139-block 44
       21:  139-block 45
    $$$$$:  139-block 46
        2:  139-block 47
    %%%%%:  139-block 48
    %%%%%:  139-block 49
        1:  139-block 50
        1:  139-block 51
    %%%%%:  139-block 52
    %%%%%:  139-block 53
    %%%%%:  139-block 54
    %%%%%:  139-block 55
    %%%%%:  139-block 56
    %%%%%:  139-block 57
        1:  139-block 58
        1:  139-block 59
        1:  139-block 60
    %%%%%:  139-block 61
    %%%%%:  139-block 62
    %%%%%:  139-block 63
    %%%%%:  139-block 64
    %%%%%:  139-block 65
    %%%%%:  139-block 66
    %%%%%:  139-block 67
    %%%%%:  139-block 68
    $$$$$:  139-block 69
    $$$$$:  139-block 70
    $$$$$:  139-block 71
    $$$$$:  139-block 72
    $$$$$:  139-block 73
    $$$$$:  139-block 74
    $$$$$:  139-block 75
    $$$$$:  139-block 76
    $$$$$:  139-block 77
    $$$$$:  139-block 78
    %%%%%:  139-block 79
    %%%%%:  139-block 80
    %%%%%:  139-block 81
    %%%%%:  139-block 82
    %%%%%:  139-block 83
    %%%%%:  139-block 84
    %%%%%:  139-block 85
    %%%%%:  139-block 86
    %%%%%:  139-block 87
    %%%%%:  139-block 88
        7:  139-block 89
    %%%%%:  139-block 90
    %%%%%:  139-block 91
    %%%%%:  139-block 92
    %%%%%:  139-block 93
    %%%%%:  139-block 94
    %%%%%:  139-block 95
    %%%%%:  139-block 96
    %%%%%:  139-block 97
        7:  139-block 98
        7:  139-block 99
        7:  139-block 100
        7:  139-block 101
        7:  139-block 102
    $$$$$:  139-block 103
    $$$$$:  139-block 104
    $$$$$:  139-block 105
    $$$$$:  139-block 106
    $$$$$:  139-block 107
    $$$$$:  139-block 108
    $$$$$:  139-block 109
    $$$$$:  139-block 110
    $$$$$:  139-block 111
    $$$$$:  139-block 112
    $$$$$:  139-block 113
    $$$$$:  139-block 114
        4:  139-block 115
    $$$$$:  139-block 116
    %%%%%:  139-block 117
    $$$$$:  139-block 118
        7:  139-block 119
    $$$$$:  139-block 120
    %%%%%:  139-block 121
    $$$$$:  139-block 122
    %%%%%:  139-block 123
    %%%%%:  139-block 124
    %%%%%:  139-block 125
    $$$$$:  139-block 126
    %%%%%:  139-block 127
    %%%%%:  139-block 128
    %%%%%:  139-block 129
    $$$$$:  139-block 130
    %%%%%:  139-block 131
    %%%%%:  139-block 132
    $$$$$:  139-block 133
    %%%%%:  139-block 134
    %%%%%:  139-block 135
    %%%%%:  139-block 136
    %%%%%:  139-block 137
    %%%%%:  139-block 138
    %%%%%:  139-block 139
    %%%%%:  139-block 140
    $$$$$:  139-block 141
    $$$$$:  139-block 142
    %%%%%:  139-block 143
    %%%%%:  139-block 144
    $$$$$:  139-block 145
    %%%%%:  139-block 146
    %%%%%:  139-block 147
    %%%%%:  139-block 148
    %%%%%:  139-block 149
    %%%%%:  139-block 150
    %%%%%:  139-block 151
    %%%%%:  139-block 152
    $$$$$:  139-block 153
    $$$$$:  139-block 154
    %%%%%:  139-block 155
    %%%%%:  139-block 156
    $$$$$:  139-block 157
    %%%%%:  139-block 158
    %%%%%:  139-block 159
    %%%%%:  139-block 160
    %%%%%:  139-block 161
    %%%%%:  139-block 162
    %%%%%:  139-block 163
    %%%%%:  139-block 164
    %%%%%:  139-block 165
    %%%%%:  139-block 166
    %%%%%:  139-block 167
    %%%%%:  139-block 168
    %%%%%:  139-block 169
    %%%%%:  139-block 170
    %%%%%:  139-block 171
    %%%%%:  139-block 172
    %%%%%:  139-block 173
    $$$$$:  139-block 174
    $$$$$:  139-block 175
    $$$$$:  139-block 176
    $$$$$:  139-block 177
    $$$$$:  139-block 178
    $$$$$:  139-block 179
    %%%%%:  139-block 180
    %%%%%:  139-block 181
    %%%%%:  139-block 182
    %%%%%:  139-block 183
    %%%%%:  139-block 184
    %%%%%:  139-block 185
    %%%%%:  139-block 186
    %%%%%:  139-block 187
    %%%%%:  139-block 188
    %%%%%:  139-block 189
    %%%%%:  139-block 190
    %%%%%:  139-block 191
    $$$$$:  139-block 192
    $$$$$:  139-block 193
    $$$$$:  139-block 194
    $$$$$:  139-block 195
    $$$$$:  139-block 196
    $$$$$:  139-block 197
    $$$$$:  139-block 198
    $$$$$:  139-block 199
    %%%%%:  139-block 200
    %%%%%:  139-block 201
    %%%%%:  139-block 202
    %%%%%:  139-block 203
    %%%%%:  139-block 204
    $$$$$:  139-block 205
    $$$$$:  139-block 206
    $$$$$:  139-block 207
    $$$$$:  139-block 208
    $$$$$:  139-block 209
    %%%%%:  139-block 210
    %%%%%:  139-block 211
    %%%%%:  139-block 212
    $$$$$:  139-block 213
    %%%%%:  139-block 214
    $$$$$:  139-block 215
        -:  140:
        -:  141:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  142:  // 2598. addressof works on temporaries
        -:  143:  template<typename _Tp>
        -:  144:    const _Tp* addressof(const _Tp&&) = delete;
        -:  145:
        -:  146:  // C++11 version of std::exchange for internal use.
        -:  147:  template <typename _Tp, typename _Up = _Tp>
        -:  148:    inline _Tp
        -:  149:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  150:    {
        -:  151:      _Tp __old_val = std::move(__obj);
        -:  152:      __obj = std::forward<_Up>(__new_val);
        -:  153:      return __old_val;
        -:  154:    }
        -:  155:
        -:  156:  /// @} group utilities
        -:  157:
        -:  158:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  159:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  160:#else
        -:  161:#define _GLIBCXX_MOVE(__val) (__val)
        -:  162:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  163:#endif
        -:  164:
        -:  165:  /**
        -:  166:   *  @addtogroup utilities
        -:  167:   *  @{
        -:  168:   */
        -:  169:
        -:  170:  /**
        -:  171:   *  @brief Swaps two values.
        -:  172:   *  @param  __a  A thing of arbitrary type.
        -:  173:   *  @param  __b  Another thing of arbitrary type.
        -:  174:   *  @return   Nothing.
        -:  175:  */
        -:  176:  template<typename _Tp>
        -:  177:    inline
        -:  178:#if __cplusplus >= 201103L
        -:  179:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  180:			      is_move_constructible<_Tp>,
        -:  181:			      is_move_assignable<_Tp>>::value>::type
   25308*:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
   25308*:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
   25308*:  194:      __a = _GLIBCXX_MOVE(__b);
   23772*:  195:      __b = _GLIBCXX_MOVE(__tmp);
    10426:  195-block  0
    10384:  195-block  1
    %%%%%:  195-block  2
    %%%%%:  195-block  3
    %%%%%:  195-block  4
    %%%%%:  195-block  5
    %%%%%:  195-block  6
    %%%%%:  195-block  7
    %%%%%:  195-block  8
    %%%%%:  195-block  9
    %%%%%:  195-block 10
    %%%%%:  195-block 11
    %%%%%:  195-block 12
    %%%%%:  195-block 13
    %%%%%:  195-block 14
    %%%%%:  195-block 15
    %%%%%:  195-block 16
    %%%%%:  195-block 17
    %%%%%:  195-block 18
    %%%%%:  195-block 19
    %%%%%:  195-block 20
    %%%%%:  195-block 21
    %%%%%:  195-block 22
    %%%%%:  195-block 23
    %%%%%:  195-block 24
     1466:  195-block 25
        -:  196:    }
        -:  197:
        -:  198:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  199:  // DR 809. std::swap should be overloaded for array types.
        -:  200:  /// Swap the contents of two arrays.
        -:  201:  template<typename _Tp, size_t _Nm>
        -:  202:    inline
        -:  203:#if __cplusplus >= 201103L
        -:  204:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  205:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  206:    noexcept(__is_nothrow_swappable<_Tp>::value)
        -:  207:#else
        -:  208:    void
        -:  209:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  210:#endif
        -:  211:    {
        -:  212:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  213:	swap(__a[__n], __b[__n]);
        -:  214:    }
        -:  215:
        -:  216:  /// @} group utilities
        -:  217:_GLIBCXX_END_NAMESPACE_VERSION
        -:  218:} // namespace
        -:  219:
        -:  220:#endif /* _MOVE_H */
