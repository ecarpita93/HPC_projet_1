        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_down_pp.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_DOWN_PP_HPP
        -:   19:#define PIC_FILTERING_FILTER_DOWN_PP_HPP
        -:   20:
        -:   21:#include "../util/array.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:
        -:   25:namespace pic {
        -:   26:
        -:   27:/**
        -:   28: * @brief The FilterDownPP class
        -:   29: */
        -:   30:class FilterDownPP: public Filter
        -:   31:{
        -:   32:protected:
        -:   33:    /**
        -:   34:     * @brief ProcessBBox
        -:   35:     * @param dst
        -:   36:     * @param src
        -:   37:     * @param box
        -:   38:     */
    #####:   39:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   40:    {
    #####:   41:        int channels = src[0]->channels;
    %%%%%:   41-block  0
        -:   42:
    #####:   43:        for(int i2 = box->y0; i2 < box->y1; i2++) {
    %%%%%:   43-block  0
    %%%%%:   43-block  1
    %%%%%:   43-block  2
    #####:   44:            int i = i2 << 1;
        -:   45:
    #####:   46:            for(int j2 = box->x0; j2 < box->x1; j2++) {
    %%%%%:   46-block  0
    %%%%%:   46-block  1
    #####:   47:                int j = j2 << 1;
        -:   48:
    #####:   49:                float *tmp[4];
    #####:   50:                tmp[0] = (*src[0])(j    , i);
    %%%%%:   50-block  0
    #####:   51:                tmp[1] = (*src[0])(j + 1, i);
    %%%%%:   51-block  0
    #####:   52:                tmp[2] = (*src[0])(j    , i + 1);
    %%%%%:   52-block  0
    #####:   53:                tmp[3] = (*src[0])(j + 1, i + 1);
    %%%%%:   53-block  0
        -:   54:
    #####:   55:                int counter = 0;
    #####:   56:                float *out = (*dst)(j2, i2);
    %%%%%:   56-block  0
        -:   57:
    #####:   58:                Arrayf::assign(0.0f, out, channels);
    %%%%%:   58-block  0
        -:   59:
    #####:   60:                for(int k = 0; k < 4; k++) {
    %%%%%:   60-block  0
    %%%%%:   60-block  1
    #####:   61:                    if(Arrayf::distanceSq(tmp[k], value, channels) > threshold) {
    %%%%%:   61-block  0
    %%%%%:   61-block  1
    #####:   62:                        counter++;
        -:   63:
    #####:   64:                        for(int l = 0; l < channels; l++) {
    %%%%%:   64-block  0
    %%%%%:   64-block  1
    #####:   65:                            out[l] += tmp[k][l];
    %%%%%:   65-block  0
        -:   66:                        }
        -:   67:                    }
        -:   68:                }
        -:   69:
    #####:   70:                if(counter > 0) {
    %%%%%:   70-block  0
    #####:   71:                    float counter_f = float(counter);                    
    #####:   72:                    Arrayf::div(out, channels, counter_f);
    %%%%%:   72-block  0
        -:   73:                } else {
    #####:   74:                    Arrayf::assign(value, channels, out);
    %%%%%:   74-block  0
    %%%%%:   74-block  1
        -:   75:                }
        -:   76:            }
        -:   77:        }
    #####:   78:    }
        -:   79:
        -:   80:    float *value, threshold;
        -:   81:
        -:   82:public:
        -:   83:
        -:   84:    /**
        -:   85:     * @brief FilterDownPP
        -:   86:     * @param value
        -:   87:     * @param threshold
        -:   88:     */
        -:   89:    FilterDownPP(float *value, float threshold) : Filter()
        -:   90:    {
        -:   91:        update(value, threshold);
        -:   92:    }
        -:   93:
        -:   94:    ~FilterDownPP()
        -:   95:    {
        -:   96:    }
        -:   97:
        -:   98:    /**
        -:   99:     * @brief update
        -:  100:     * @param value
        -:  101:     * @param threshold
        -:  102:     */
        -:  103:    void update(float *value, float threshold)
        -:  104:    {
        -:  105:        this->value = value;
        -:  106:
        -:  107:        if(value == NULL) {
        -:  108:            printf("ERROR in FilterDownPP");
        -:  109:        }
        -:  110:
        -:  111:        this->threshold = (threshold > 0.0f) ? threshold : 1e-4f;
        -:  112:    }
        -:  113:
        -:  114:    /**
        -:  115:     * @brief OutputSize
        -:  116:     * @param imgIn
        -:  117:     * @param width
        -:  118:     * @param height
        -:  119:     * @param channels
        -:  120:     * @param frames
        -:  121:     */
    #####:  122:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:  123:    {
    #####:  124:        if(imgIn.size() == 1) {
    %%%%%:  124-block  0
    #####:  125:            width       = imgIn[0]->width >> 1;
    %%%%%:  125-block  0
    #####:  126:            height      = imgIn[0]->height >> 1;
    %%%%%:  126-block  0
        -:  127:        } else {
    #####:  128:            width       = imgIn[1]->width;
    %%%%%:  128-block  0
    #####:  129:            height      = imgIn[1]->height;
    %%%%%:  129-block  0
        -:  130:
        -:  131:        }
        -:  132:
    #####:  133:        channels    = imgIn[0]->channels;
    #####:  134:        frames      = imgIn[0]->frames;
    #####:  135:    }
        -:  136:};
        -:  137:
        -:  138:} // end namespace pic
        -:  139:
        -:  140:#endif /* PIC_FILTERING_FILTER_DOWN_PP_HPP */
        -:  141:
