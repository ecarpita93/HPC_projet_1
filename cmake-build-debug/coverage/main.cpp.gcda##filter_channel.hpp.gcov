        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_channel.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_CHANNEL_HPP
        -:   19:#define PIC_FILTERING_FILTER_CHANNEL_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief SingleInt
        -:   27: * @param v0
        -:   28: * @return
        -:   29: */
    #####:   30:PIC_INLINE std::vector<int> SingleInt(int v0)
        -:   31:{
    #####:   32:    std::vector<int> ret;
    %%%%%:   32-block  0
    #####:   33:    ret.push_back(MAX(v0, 0));
    %%%%%:   33-block  0
    $$$$$:   33-block  1
    #####:   34:    return ret;
    %%%%%:   34-block  0
        -:   35:}
        -:   36:
        -:   37:/**
        -:   38: * @brief TripleInt
        -:   39: * @param v0
        -:   40: * @param v1
        -:   41: * @param v2
        -:   42: * @return
        -:   43: */
        -:   44:PIC_INLINE std::vector<int> TripleInt(int v0, int v1, int v2)
        -:   45:{
        -:   46:    std::vector<int> ret;
        -:   47:    ret.push_back(MAX(v0, 0));
        -:   48:    ret.push_back(MAX(v1, 0));
        -:   49:    ret.push_back(MAX(v2, 0));
        -:   50:    return ret;
        -:   51:}
        -:   52:
        -:   53:/**
        -:   54: * @brief The FilterChannel class
        -:   55: */
        -:   56:class FilterChannel: public Filter
        -:   57:{
        -:   58:protected:
        -:   59:
        -:   60:    /**
        -:   61:     * @brief ProcessBBox
        -:   62:     * @param dst
        -:   63:     * @param src
        -:   64:     * @param box
        -:   65:     */
    #####:   66:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   67:    {
    #####:   68:        int totChannels =  CLAMPi(int(channels_vec.size()), 0, src[0]->channels);
    %%%%%:   68-block  0
    %%%%%:   68-block  1
        -:   69:
    #####:   70:        for(int p = box->z0; p < box->z1; p++) {
    %%%%%:   70-block  0
    %%%%%:   70-block  1
    %%%%%:   70-block  2
    #####:   71:            for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   71-block  0
    %%%%%:   71-block  1
    %%%%%:   71-block  2
    #####:   72:                for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   72-block  0
    %%%%%:   72-block  1
    %%%%%:   72-block  2
        -:   73:
    #####:   74:                    float *dataOut = (*dst)(i, j, p);
    #####:   75:                    float *dataIn = (*src[0])(i, j, p);
    %%%%%:   75-block  0
        -:   76:
    #####:   77:                    for(int k = 0; k < totChannels; k++) {
    %%%%%:   77-block  0
    %%%%%:   77-block  1
    #####:   78:                        int index = channels_vec[k];
    %%%%%:   78-block  0
    #####:   79:                        dataOut[k] = dataIn[index];
    %%%%%:   79-block  0
        -:   80:                    }
        -:   81:                }
        -:   82:            }
        -:   83:        }
    #####:   84:    }
        -:   85:
        -:   86:    std::vector<int> channels_vec;
        -:   87:
        -:   88:public:
        -:   89:
        -:   90:    /**
        -:   91:     * @brief FilterChannel
        -:   92:     * @param channels_vec
        -:   93:     */
    #####:   94:    FilterChannel(std::vector<int> channels_vec) : Filter()
    %%%%%:   94-block  0
    $$$$$:   94-block  1
    $$$$$:   94-block  2
        -:   95:    {
    #####:   96:        update(channels_vec);
    %%%%%:   96-block  0
    %%%%%:   96-block  1
    $$$$$:   96-block  2
    $$$$$:   96-block  3
    #####:   97:    }
    %%%%%:   97-block  0
        -:   98:
        -:   99:    /**
        -:  100:     * @brief update
        -:  101:     * @param channels_vec
        -:  102:     */
    #####:  103:    void update(std::vector<int> channels_vec)
        -:  104:    {
    #####:  105:        this->channels_vec = channels_vec;
    %%%%%:  105-block  0
    #####:  106:    }
    %%%%%:  106-block  0
        -:  107:
        -:  108:    /**
        -:  109:     * @brief OutputSize
        -:  110:     * @param imgIn
        -:  111:     * @param width
        -:  112:     * @param height
        -:  113:     * @param channels
        -:  114:     * @param frames
        -:  115:     */
    #####:  116:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:  117:    {
    #####:  118:        width       = imgIn[0]->width;
    #####:  119:        height      = imgIn[0]->height;
    #####:  120:        channels    = MAX(1, int(this->channels_vec.size()));
    #####:  121:        frames      = imgIn[0]->frames;
    #####:  122:    }
        -:  123:
        -:  124:    /**
        -:  125:     * @brief execute
        -:  126:     * @param imgIn
        -:  127:     * @param imgOut
        -:  128:     * @param channel
        -:  129:     * @return
        -:  130:     */
        -:  131:    static Image *execute(Image *imgIn, Image *imgOut, int channel = 0)
        -:  132:    {
        -:  133:        FilterChannel fltCh(SingleInt(channel));
        -:  134:        return fltCh.Process(Single(imgIn), imgOut);
        -:  135:    }
        -:  136:
        -:  137:    /**
        -:  138:     * @brief execute
        -:  139:     * @param imgIn
        -:  140:     * @param imgOut
        -:  141:     * @param channel
        -:  142:     * @return
        -:  143:     */
        -:  144:    static Image *execute(Image *imgIn, Image *imgOut, std::vector<int> channels_vec)
        -:  145:    {
        -:  146:        FilterChannel fltCh(channels_vec);
        -:  147:        return fltCh.Process(Single(imgIn), imgOut);
        -:  148:    }
        -:  149:
        -:  150:    /**
        -:  151:     * @brief removeAlpha
        -:  152:     * @param imgIn
        -:  153:     * @param imgOut
        -:  154:     * @return
        -:  155:     */
        -:  156:    static Image *removeAlpha(Image *imgIn, Image *imgOut)
        -:  157:    {
        -:  158:        imgOut = execute(imgIn, imgOut, TripleInt(0, 1, 2));
        -:  159:        return imgOut;
        -:  160:    }
        -:  161:
        -:  162:    /**
        -:  163:     * @brief test
        -:  164:     */
        -:  165:    static void test()
        -:  166:    {
        -:  167:        Image imgIn(1, 512, 512, 3);
        -:  168:        imgIn = 1.0f;
        -:  169:
        -:  170:        Image *outR = execute(&imgIn, NULL, SingleInt(0));
        -:  171:        Image *outG = execute(&imgIn, NULL, SingleInt(1));
        -:  172:        Image *outB = execute(&imgIn, NULL, SingleInt(2));
        -:  173:
        -:  174:        outR->Write("channel_R.pfm");
        -:  175:        outG->Write("channel_G.pfm");
        -:  176:        outB->Write("channel_B.pfm");
        -:  177:    }
        -:  178:};
        -:  179:
        -:  180:} // end namespace pic
        -:  181:
        -:  182:#endif /* PIC_FILTERING_FILTER_CHANNEL_HPP */
        -:  183:
