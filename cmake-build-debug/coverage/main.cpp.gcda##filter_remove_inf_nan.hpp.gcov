        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_remove_inf_nan.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_REMOVE_INF_NAN_HPP
        -:   19:#define PIC_FILTERING_FILTER_REMOVE_INF_NAN_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterRemoveInfNaN class
        -:   27: */
        -:   28:class FilterRemoveInfNaN: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:
        -:   32:    /**
        -:   33:     * @brief ProcessBBox
        -:   34:     * @param dst
        -:   35:     * @param src
        -:   36:     * @param box
        -:   37:     */
    #####:   38:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   39:    {
    #####:   40:        float values[9];
        -:   41:
    #####:   42:        int channels = dst->channels;
        -:   43:
    #####:   44:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    #####:   45:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   45-block  0
    %%%%%:   45-block  1
    %%%%%:   45-block  2
        -:   46:
    #####:   47:                float *tmp_data = (*src[0])(i, j);
    %%%%%:   47-block  0
    #####:   48:                float *tmp_dst  = (*dst   )(i, j);
    %%%%%:   48-block  0
        -:   49:
    #####:   50:                for(int ch = 0; ch < channels; ch++) {
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    %%%%%:   50-block  2
        -:   51:
    #####:   52:                    float val = tmp_data[ch];
        -:   53:
    #####:   54:                    if(isinf(val) || isnan(val)) {
    %%%%%:   54-block  0
        -:   55:                        int c2 = 0;
        -:   56:
    #####:   57:                        for(int k = -1; k <= 1; k++) {
    %%%%%:   57-block  0
    %%%%%:   57-block  1
    #####:   58:                            for(int l = -1; l <= 1; l++) {
    %%%%%:   58-block  0
    %%%%%:   58-block  1
        -:   59:
    #####:   60:                                float *tmp_val = (*src[0])(i + l, j + k);
    %%%%%:   60-block  0
        -:   61:
    #####:   62:                                if(!(isnan(tmp_val[ch]) || isinf(tmp_val[ch]))) {
    %%%%%:   62-block  0
    #####:   63:                                    values[c2] = tmp_val[ch];
    #####:   64:                                    c2++;
    %%%%%:   64-block  0
        -:   65:                                }
        -:   66:                            }
        -:   67:                        }
        -:   68:
    #####:   69:                        if(c2 == 0) {
    %%%%%:   69-block  0
    #####:   70:                            tmp_dst[ch] = 0.0f;
    %%%%%:   70-block  0
        -:   71:                        } else {
    #####:   72:                            std::sort(values, values + c2);
    %%%%%:   72-block  0
    #####:   73:                            tmp_dst[ch] = values[5];
        -:   74:                        }
        -:   75:                    } else {
    #####:   76:                        tmp_dst[ch] = val;
    %%%%%:   76-block  0
        -:   77:                    }
        -:   78:                }
        -:   79:            }
        -:   80:        }
    #####:   81:    }
        -:   82:     
        -:   83:
        -:   84:public:
        -:   85:    /**
        -:   86:     * @brief FilterRemoveInfNaN
        -:   87:     */
        -:   88:    FilterRemoveInfNaN() : Filter()
        -:   89:    {
        -:   90:    }
        -:   91:
        -:   92:    /**
        -:   93:     * @brief execute
        -:   94:     * @param imgIn
        -:   95:     * @param imgOut
        -:   96:     * @param threshold_nuked
        -:   97:     * @return
        -:   98:     */
        -:   99:    static Image* execute(Image *imgIn, Image *imgOut)
        -:  100:    {
        -:  101:        FilterRemoveInfNaN filter;
        -:  102:        imgOut = filter.Process(Single(imgIn), imgOut);
        -:  103:        return imgOut;
        -:  104:    }
        -:  105:};
        -:  106:
        -:  107:} // end namespace pic
        -:  108:
        -:  109:#endif /* PIC_FILTERING_FILTER_REMOVE_INF_NAN_HPP */
        -:  110:
