        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_max.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_MAX_HPP
        -:   19:#define PIC_FILTERING_FILTER_MAX_HPP
        -:   20:
        -:   21:#include "../filtering/filter.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterMax class
        -:   27: */
        -:   28:class FilterMax: public Filter
        -:   29:{
        -:   30:protected:
        -:   31:    int halfSize;
        -:   32:
        -:   33:    /**
        -:   34:     * @brief ProcessBBox
        -:   35:     * @param dst
        -:   36:     * @param src
        -:   37:     * @param box
        -:   38:     */
    #####:   39:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   40:    {
    #####:   41:        int channels = dst->channels;
    #####:   42:        float *maxVal = new float[channels];
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    %%%%%:   42-block  2
        -:   43:        
    #####:   44:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    #####:   45:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   45-block  0
    %%%%%:   45-block  1
    %%%%%:   45-block  2
        -:   46:
    #####:   47:                float *dst_data = (*dst)(i, j);
    %%%%%:   47-block  0
    #####:   48:                float *src_data = (*src[0])(i, j);
    %%%%%:   48-block  0
        -:   49:
    #####:   50:                for(int k = 0; k < channels; k++) {
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    #####:   51:                    maxVal[k] = src_data[k];
    %%%%%:   51-block  0
        -:   52:                }
        -:   53:
    #####:   54:                for(int k = -halfSize; k <= halfSize; k++) {
    %%%%%:   54-block  0
    %%%%%:   54-block  1
    %%%%%:   54-block  2
    #####:   55:                    for(int l = -halfSize; l <= halfSize; l++) {
    %%%%%:   55-block  0
    %%%%%:   55-block  1
        -:   56:
    #####:   57:                        src_data = (*src[0])(i + l, j + k);
    %%%%%:   57-block  0
        -:   58:
    #####:   59:                        for(int ch = 0; ch < channels; ch++) {
    %%%%%:   59-block  0
    %%%%%:   59-block  1
    #####:   60:                            maxVal[ch] = maxVal[ch] > src_data[ch] ?
    %%%%%:   60-block  0
        -:   61:                                         maxVal[ch] : src_data[ch];
        -:   62:                        }
        -:   63:                    }
        -:   64:                }
        -:   65:
    #####:   66:                for(int k = 0; k < channels; k++) {
    %%%%%:   66-block  0
    #####:   67:                    dst_data[k] = maxVal[k];
    %%%%%:   67-block  0
        -:   68:                }
        -:   69:            }
        -:   70:        }
        -:   71:
    #####:   72:        delete[] maxVal;
    %%%%%:   72-block  0
    #####:   73:    }
        -:   74:
        -:   75:public:
        -:   76:
        -:   77:    /**
        -:   78:     * @brief FilterMax
        -:   79:     * @param size
        -:   80:     */
        -:   81:    FilterMax(int size) : Filter()
        -:   82:    {
        -:   83:        update(size);
        -:   84:    }
        -:   85:
        -:   86:    ~FilterMax()
        -:   87:    {
        -:   88:        release();
        -:   89:    }
        -:   90:
        -:   91:    /**
        -:   92:     * @brief update
        -:   93:     * @param size
        -:   94:     */
        -:   95:    void update(int size)
        -:   96:    {
        -:   97:        this->halfSize = checkHalfSize(size);
        -:   98:    }
        -:   99:
        -:  100:    /**
        -:  101:     * @brief execute
        -:  102:     * @param imgIn
        -:  103:     * @param imgOut
        -:  104:     * @param size
        -:  105:     * @return
        -:  106:     */
        -:  107:    static Image *execute(Image *imgIn, Image *imgOut, int size)
        -:  108:    {
        -:  109:        FilterMax filter(size);
        -:  110:        return filter.Process(Single(imgIn), imgOut);
        -:  111:    }
        -:  112:};
        -:  113:
        -:  114:} // end namespace pic
        -:  115:
        -:  116:#endif /* PIC_FILTERING_FILTER_MAX_HPP */
        -:  117:
