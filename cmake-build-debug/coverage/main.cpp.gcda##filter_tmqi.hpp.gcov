        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_tmqi.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_TMQI_HPP
        -:   19:#define PIC_FILTERING_FILTER_TMQI_HPP
        -:   20:
        -:   21:#include "../util/math.hpp"
        -:   22:
        -:   23:#include "../filtering/filter.hpp"
        -:   24:
        -:   25:namespace pic {
        -:   26:
        -:   27:/**
        -:   28: * @brief The FilterTMQI class
        -:   29: */
        -:   30:class FilterTMQI: public Filter
        -:   31:{
        -:   32:protected:
        -:   33:
        -:   34:    float C1, C2;
        -:   35:
        -:   36:    /**
        -:   37:     * @brief ProcessBBox
        -:   38:     * @param dst
        -:   39:     * @param src
        -:   40:     * @param box
        -:   41:     */
    #####:   42:    void ProcessBBox(Image *dst, ImageVec src, BBox *box)
        -:   43:    {
    #####:   44:        for(int j = box->y0; j < box->y1; j++) {
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    #####:   45:            for(int i = box->x0; i < box->x1; i++) {
    %%%%%:   45-block  0
    %%%%%:   45-block  1
    #####:   46:                float *out = (*dst)(i, j);
    %%%%%:   46-block  0
        -:   47:
    #####:   48:                float sigma1 = (*src[0])(i, j)[0];
    %%%%%:   48-block  0
    #####:   49:                float sigma1p = normalCDF(sigma1, u_hdr, sig_hdr);
    %%%%%:   49-block  0
        -:   50:
    #####:   51:                float sigma2 = (*src[1])(i, j)[0];
    %%%%%:   51-block  0
    #####:   52:                float sigma2p = normalCDF(sigma2, u_ldr, sig_ldr);
    %%%%%:   52-block  0
        -:   53:
    #####:   54:                float sigma12 = (*src[2])(i, j)[0];
    %%%%%:   54-block  0
        -:   55:
    #####:   56:                out[0] = (((2*sigma1p*sigma2p)+C1)/((sigma1p*sigma1p)+(sigma2p*sigma2p)+C1))*((sigma12+C2)/(sigma1*sigma2 + C2));
    %%%%%:   56-block  0
        -:   57:            }
        -:   58:        }
    #####:   59:    }
        -:   60:
        -:   61:    float u_hdr, sig_hdr, u_ldr, sig_ldr;
        -:   62:
        -:   63:public:
        -:   64:
        -:   65:    /**
        -:   66:     * @brief FilterTMQI
        -:   67:     * @param type
        -:   68:     */
        -:   69:    FilterTMQI() : Filter()
        -:   70:    {
        -:   71:        C1 = 0.01f;
        -:   72:        C2 = 10.0f;
        -:   73:        minInputImages = 3;
        -:   74:    }
        -:   75:
        -:   76:    /**
        -:   77:     * @brief MannosCSF
        -:   78:     * @param sf
        -:   79:     * @return
        -:   80:     */
        -:   81:    static float MannosCSF(float sf)
        -:   82:    {
        -:   83:        return 100.0f * 2.6f *
        -:   84:                (0.0192f + 0.114f * sf) *
        -:   85:                expf(-powf(0.114f * sf, 1.1f));
        -:   86:    }
        -:   87:
        -:   88:    /**
        -:   89:     * @brief update
        -:   90:     */
        -:   91:    void update(float sf)
        -:   92:    {
        -:   93:        float CSF = MannosCSF(sf);
        -:   94:
        -:   95:        u_hdr = 128.0f / (1.4f * CSF);
        -:   96:        sig_hdr = u_hdr / 3.0f;
        -:   97:
        -:   98:        u_ldr = u_hdr;
        -:   99:        sig_ldr = u_ldr / 3.0f;
        -:  100:    }
        -:  101:
        -:  102:};
        -:  103:
        -:  104:} // end namespace pic
        -:  105:
        -:  106:#endif /* PIC_FILTERING_FILTER_TMQI_HPP */
        -:  107:
