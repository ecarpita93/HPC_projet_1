        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_iterative.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_ITERATIVE_HPP
        -:   19:#define PIC_FILTERING_FILTER_ITERATIVE_HPP
        -:   20:
        -:   21:#include "../filtering/filter_npasses.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The FilterIterative class
        -:   27: */
        -:   28:class FilterIterative: public FilterNPasses
        -:   29:{
        -:   30:protected:
        -:   31:    int iterations;
        -:   32:
        -:   33:    /**
        -:   34:     * @brief getFilter
        -:   35:     * @param i
        -:   36:     * @return
        -:   37:     */
        -:   38:    Filter* getFilter(int i);
        -:   39:
        -:   40:    /**
        -:   41:     * @brief getFilter
        -:   42:     * @param i
        -:   43:     * @return
        -:   44:     */
        -:   45:    int getIterations();
        -:   46:
        -:   47:public:
        -:   48:
        -:   49:    /**
        -:   50:     * @brief FilterIterative
        -:   51:     * @param flt
        -:   52:     * @param iterations
        -:   53:     */
        -:   54:    FilterIterative(Filter *flt, int iterations);
        -:   55:
        -:   56:    /**
        -:   57:     * @brief update
        -:   58:     * @param flt
        -:   59:     * @param iterations
        -:   60:     */
        -:   61:    void update(Filter *flt, int iterations);
        -:   62:
        -:   63:};
        -:   64:
        -:   65:PIC_INLINE FilterIterative::FilterIterative(Filter *flt, int iterations) : FilterNPasses()
        -:   66:{
        -:   67:    printf("\n\n%d\n\n", iterations);
        -:   68:    update(flt, iterations);
        -:   69:}
        -:   70:
        -:   71:PIC_INLINE void FilterIterative::update(Filter *flt, int iterations)
        -:   72:{
        -:   73:    if(iterations > 0) {
        -:   74:        this->iterations = iterations;
        -:   75:    }
        -:   76:
        -:   77:    if(flt == NULL) {
        -:   78:        return;
        -:   79:    }
        -:   80:
        -:   81:    if(!filters.empty()) {
        -:   82:        filters.clear();
        -:   83:    }
        -:   84:
        -:   85:    filters.push_back(flt);
        -:   86:}
        -:   87:
    #####:   88:PIC_INLINE Filter* FilterIterative::getFilter(int i)
        -:   89:{
    #####:   90:    return filters[0];
        -:   91:}
        -:   92:
    #####:   93:PIC_INLINE int FilterIterative::getIterations()
        -:   94:{
    #####:   95:    return iterations;
        -:   96:}
        -:   97:
        -:   98:} // end namespace pic
        -:   99:
        -:  100:#endif /* PIC_FILTERING_FILTER_ITERATIVE_HPP */
        -:  101:
