        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/filtering/filter_luminance_adaptation.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_FILTERING_FILTER_LUMINANCE_ADAPTATION_HPP
        -:   19:#define PIC_FILTERING_FILTER_LUMINANCE_ADAPTATION_HPP
        -:   20:
        -:   21:#include <cmath>
        -:   22:
        -:   23:#include "../util/math.hpp"
        -:   24:#include "../filtering/filter.hpp"
        -:   25:#include "../filtering/filter_luminance.hpp"
        -:   26:#include "../algorithms/connected_components.hpp"
        -:   27:
        -:   28:namespace pic {
        -:   29:
        -:   30:/**
        -:   31: * @brief The FilterLuminanceAdaptation class
        -:   32: */
        -:   33:class FilterLuminanceAdaptation: public Filter
        -:   34:{
        -:   35:protected:
        -:   36:    float threshold;
        -:   37:    float bin_size_1;
        -:   38:    float bin_size_2;
        -:   39:    float delta_bin_size;
        -:   40:    int maxLayers;
        -:   41:    FilterLuminance flt;
        -:   42:    Image *lum;
        -:   43:
        -:   44:public:
        -:   45:
        -:   46:    /**
        -:   47:     * @brief FilterLuminanceAdaptation
        -:   48:     * @param maxLayers
        -:   49:     * @param threshold
        -:   50:     */
        -:   51:    FilterLuminanceAdaptation(int maxLayers = 32, float threshold = 0.05f) : Filter()
        -:   52:    {
        -:   53:        lum = NULL;
        -:   54:        update(maxLayers, threshold);
        -:   55:    }
        -:   56:
        -:   57:    /**
        -:   58:     * @brief update
        -:   59:     * @param maxLayers
        -:   60:     * @param threshold
        -:   61:     */
        -:   62:    void update(int maxLayers = 32, float threshold = 0.05f)
        -:   63:    {
        -:   64:        this->threshold = threshold > 0.0f ? threshold : 0.05f;
        -:   65:        this->maxLayers = maxLayers > 0 ? maxLayers : 32;
        -:   66:
        -:   67:        bin_size_1 = 0.5f;
        -:   68:        bin_size_2 = 2.0f;
        -:   69:        delta_bin_size = bin_size_2 - bin_size_1;
        -:   70:    }
        -:   71:
        -:   72:    /**
        -:   73:     * @brief OutputSize
        -:   74:     * @param imgIn
        -:   75:     * @param width
        -:   76:     * @param height
        -:   77:     * @param channels
        -:   78:     * @param frames
        -:   79:     */
    #####:   80:    void OutputSize(ImageVec imgIn, int &width, int &height, int &channels, int &frames)
        -:   81:    {
    #####:   82:        width       = imgIn[0]->width;
    #####:   83:        height      = imgIn[0]->height;
    #####:   84:        channels    = 1;
    #####:   85:        frames      = imgIn[0]->frames;
    #####:   86:    }
        -:   87:
        -:   88:    /**
        -:   89:     * @brief Filter::Process
        -:   90:     * @param imgIn
        -:   91:     * @param imgOut
        -:   92:     * @return
        -:   93:     */
    #####:   94:    Image *Process(ImageVec imgIn, Image *imgOut)
        -:   95:    {
    #####:   96:        if(!checkInput(imgIn)) {
    %%%%%:   96-block  0
        -:   97:            return imgOut;
        -:   98:        }
        -:   99:
    #####:  100:        imgOut = setupAux(imgIn, imgOut);
    %%%%%:  100-block  0
    %%%%%:  100-block  1
    $$$$$:  100-block  2
        -:  101:
    #####:  102:        if(imgOut == NULL) {
    %%%%%:  102-block  0
        -:  103:            return imgOut;
        -:  104:        }
        -:  105:
    #####:  106:        lum = flt.Process(imgIn, lum);
    %%%%%:  106-block  0
    %%%%%:  106-block  1
    $$$$$:  106-block  2
    #####:  107:        lum->applyFunction(log10fPlusEpsilon);
    %%%%%:  107-block  0
        -:  108:
    #####:  109:        float lum_min;
    #####:  110:        lum->getMinVal(NULL, &lum_min);
        -:  111:
    #####:  112:        int n = imgIn[0]->width * imgIn[0]->height;
    #####:  113:        int *category = new int[n];
    %%%%%:  113-block  0
    %%%%%:  113-block  1
    #####:  114:        unsigned int *img_labels = NULL;
        -:  115:
    #####:  116:        imgOut->setZero();
        -:  117:
    #####:  118:        float maxLayer_m_1 = float(maxLayers - 1);
        -:  119:
    #####:  120:        for(int i = 0; i < maxLayers; i++) {
    %%%%%:  120-block  0
    #####:  121:            float bin_size = bin_size_1 + (float(i) * delta_bin_size / maxLayer_m_1);
        -:  122:
    #####:  123:            #pragma omp parallel for
        -:  124:            for(int j = 0; j < n; j++) {
        -:  125:                category[j] = int(lround((lum->data[j] - lum_min) / bin_size));
        -:  126:                category[j]++;
        -:  127:            }
        -:  128:
    #####:  129:            ConnectedComponents<int> cc_int;
    %%%%%:  129-block  0
        -:  130:
    #####:  131:            std::vector<LabelOutput> labelsList;
    %%%%%:  131-block  0
    %%%%%:  131-block  1
    $$$$$:  131-block  2
    #####:  132:            img_labels = cc_int.execute(category, imgIn[0]->width, imgIn[0]->height, img_labels, labelsList);
    %%%%%:  132-block  0
        -:  133:
    #####:  134:            ConnectedComponents<int>::mergeIsolatedAreasWithThreshold(img_labels, lum->width, lum->height, labelsList);
    %%%%%:  134-block  0
        -:  135:
    #####:  136:            ConnectedComponents<int>::reCount(img_labels, labelsList);
        -:  137:
    #####:  138:            for(unsigned int j_ui = 0; j_ui < labelsList.size(); j_ui++) {
    %%%%%:  138-block  0
    %%%%%:  138-block  1
        -:  139:                //mean luminance
    #####:  140:                float La_j_ui = IndexedArrayf::mean(lum->data, labelsList[j_ui].coords);
    %%%%%:  140-block  0
    #####:  141:                IndexedArrayf::add(imgOut->data, labelsList[j_ui].coords, La_j_ui);
    %%%%%:  141-block  0
        -:  142:            }
        -:  143:        }
    #####:  144:        (*imgOut) /= float (maxLayers);
    %%%%%:  144-block  0
        -:  145:
    #####:  146:        imgOut->applyFunction(powf10fMinusEpsilon);
        -:  147:
    #####:  148:        return imgOut;
        -:  149:    }
        -:  150:};
        -:  151:
        -:  152:} // end namespace pic
        -:  153:
        -:  154:#endif /* PIC_FILTERING_FILTER_LUMINANCE_ADAPTATION_HPP */
        -:  155:
