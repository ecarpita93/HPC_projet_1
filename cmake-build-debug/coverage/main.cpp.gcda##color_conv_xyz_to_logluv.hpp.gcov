        -:    0:Source:/home/edd993/CLionProjects/hdr_generator/include/colors/color_conv_xyz_to_logluv.hpp
        -:    0:Graph:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcno
        -:    0:Data:/home/edd993/CLionProjects/hdr_generator/cmake-build-debug/CMakeFiles/hdr_generator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:
        -:    3:PICCANTE
        -:    4:The hottest HDR imaging library!
        -:    5:http://vcg.isti.cnr.it/piccante
        -:    6:
        -:    7:Copyright (C) 2014
        -:    8:Visual Computing Laboratory - ISTI CNR
        -:    9:http://vcg.isti.cnr.it
        -:   10:First author: Francesco Banterle
        -:   11:
        -:   12:This Source Code Form is subject to the terms of the Mozilla Public
        -:   13:License, v. 2.0. If a copy of the MPL was not distributed with this
        -:   14:file, You can obtain one at http://mozilla.org/MPL/2.0/.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#ifndef PIC_COLORS_COLOR_CONV_XYZ_TO_LOGLUV_HPP
        -:   19:#define PIC_COLORS_COLOR_CONV_XYZ_TO_LOGLUV_HPP
        -:   20:
        -:   21:#include "../colors/color_conv.hpp"
        -:   22:
        -:   23:namespace pic {
        -:   24:
        -:   25:/**
        -:   26: * @brief The ColorConvXYZtoLogLuv class
        -:   27: */
        -:   28:class ColorConvXYZtoLogLuv: public ColorConv
        -:   29:{
        -:   30:protected:
        -:   31:    float epsilon;
        -:   32:
        -:   33:public:
        -:   34:
        -:   35:    /**
        -:   36:     * @brief ColorConvXYZtoLogLuv
        -:   37:     */
        -:   38:    ColorConvXYZtoLogLuv()
        -:   39:    {
        -:   40:        epsilon = 1.0f;
        -:   41:    }
        -:   42:
        -:   43:    /**
        -:   44:     * @brief direct from XYZ to CIE LUV
        -:   45:     * @param colIn
        -:   46:     * @param colOut
        -:   47:     */
    #####:   48:    void direct(float *colIn, float *colOut)
        -:   49:    {
        -:   50:
    #####:   51:        colOut[0] = logf(colIn[1] + epsilon);
        -:   52:
    #####:   53:        float norm = colIn[0] + colIn[1] + colIn[2];
    #####:   54:        float x = colIn[0] / norm;
    #####:   55:        float y = colIn[1] / norm;
        -:   56:
    #####:   57:        float norm_uv = -2.0f * x + 12.0f * y + 3.0f;
    #####:   58:        float u_prime =  4.0f * x / norm_uv;
    #####:   59:        float v_prime =  9.0f * y / norm_uv;
        -:   60:
    #####:   61:        colOut[1] = u_prime;
    #####:   62:        colOut[2] = v_prime;
    #####:   63:    }
        -:   64:
        -:   65:    /**
        -:   66:     * @brief inverse from CIE LUV to XYZ
        -:   67:     * @param colIn
        -:   68:     * @param colOut
        -:   69:     */
    #####:   70:    void inverse(float *colIn, float *colOut)
        -:   71:    {
    #####:   72:        float norm = 6.0f * colIn[1] - 16.0f * colIn[2] + 12.0f;
        -:   73:
    #####:   74:        float x = 9.0f * colIn[1] / norm;
    #####:   75:        float y = 4.0f * colIn[2] / norm;
    #####:   76:        float z = 1.0f - x - y;
        -:   77:
    #####:   78:        float Y = MAX(expf(colIn[0]) - epsilon, 0.0f);
    #####:   79:        norm = Y / y;
        -:   80:
    #####:   81:        colOut[0] = x * norm;
    #####:   82:        colOut[1] = Y;
    #####:   83:        colOut[2] = z * norm;
    #####:   84:    }
        -:   85:};
        -:   86:
        -:   87:} // end namespace pic
        -:   88:
        -:   89:#endif /* PIC_COLORS_COLOR_SPACE_LOGLUV_HPP */
        -:   90:
